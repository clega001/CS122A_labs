
three.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004ec  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800104  00800104  00000584  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001139  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cf  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094f  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000592  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ea  00000000  00000000  00003236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e4 d0       	rcall	.+456    	; 0x28c <main>
  c4:	11 c2       	rjmp	.+1058   	; 0x4e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_13>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
  de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
  e2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
  e6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	a1 09       	sbc	r26, r1
  ee:	b1 09       	sbc	r27, r1
  f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
  f4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
  f8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
  fc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 100:	89 2b       	or	r24, r25
 102:	8a 2b       	or	r24, r26
 104:	8b 2b       	or	r24, r27
 106:	99 f4       	brne	.+38     	; 0x12e <__vector_13+0x66>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 116:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 11a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 122:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 126:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 12a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <initUSART>:
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	81 f0       	breq	.+32     	; 0x164 <initUSART+0x24>
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 61       	ori	r24, 0x18	; 24
 14c:	80 83       	st	Z, r24
 14e:	e2 ec       	ldi	r30, 0xC2	; 194
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	86 60       	ori	r24, 0x06	; 6
 156:	80 83       	st	Z, r24
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 15e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 162:	08 95       	ret
 164:	e9 ec       	ldi	r30, 0xC9	; 201
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 61       	ori	r24, 0x18	; 24
 16c:	80 83       	st	Z, r24
 16e:	ea ec       	ldi	r30, 0xCA	; 202
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	86 60       	ori	r24, 0x06	; 6
 176:	80 83       	st	Z, r24
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 17e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 182:	08 95       	ret

00000184 <USART_Flush>:
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	29 f4       	brne	.+10     	; 0x192 <USART_Flush+0xe>
 188:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 18c:	88 23       	and	r24, r24
 18e:	74 f0       	brlt	.+28     	; 0x1ac <USART_Flush+0x28>
 190:	08 95       	ret
 192:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 196:	88 23       	and	r24, r24
 198:	8c f4       	brge	.+34     	; 0x1bc <USART_Flush+0x38>
 19a:	a6 ec       	ldi	r26, 0xC6	; 198
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e0 ec       	ldi	r30, 0xC0	; 192
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	8c 91       	ld	r24, X
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	e4 f3       	brlt	.-8      	; 0x1a2 <USART_Flush+0x1e>
 1aa:	08 95       	ret
 1ac:	ae ec       	ldi	r26, 0xCE	; 206
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e8 ec       	ldi	r30, 0xC8	; 200
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	8c 91       	ld	r24, X
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	e4 f3       	brlt	.-8      	; 0x1b4 <USART_Flush+0x30>
 1bc:	08 95       	ret

000001be <USART_Send>:
 1be:	61 30       	cpi	r22, 0x01	; 1
 1c0:	41 f0       	breq	.+16     	; 0x1d2 <USART_Send+0x14>
 1c2:	e0 ec       	ldi	r30, 0xC0	; 192
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	90 81       	ld	r25, Z
 1c8:	95 ff       	sbrs	r25, 5
 1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <USART_Send+0x8>
 1cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1d0:	08 95       	ret
 1d2:	e8 ec       	ldi	r30, 0xC8	; 200
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	90 81       	ld	r25, Z
 1d8:	95 ff       	sbrs	r25, 5
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <USART_Send+0x18>
 1dc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1e0:	08 95       	ret

000001e2 <ADC_init>:
//---------------------------------------------------------------------------

//taken from http://extremeelectronics.co.in/avr-tutorials/using-adc-of-avr-microcontroller/
void ADC_init()
{
	ADMUX=(1<<REFS1)|(1<<REFS0);                         // For Aref=AVcc;
 1e2:	80 ec       	ldi	r24, 0xC0	; 192
 1e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
 1e8:	8f e8       	ldi	r24, 0x8F	; 143
 1ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1ee:	08 95       	ret

000001f0 <ReadADC>:
}
uint16_t ReadADC(uint8_t ch){//I added the small delays
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX|=ch;
 1f0:	ec e7       	ldi	r30, 0x7C	; 124
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	90 81       	ld	r25, Z
 1f6:	87 70       	andi	r24, 0x07	; 7
 1f8:	98 2b       	or	r25, r24
 1fa:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	89 ef       	ldi	r24, 0xF9	; 249
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <ReadADC+0x10>
 204:	00 c0       	rjmp	.+0      	; 0x206 <ReadADC+0x16>
 206:	00 00       	nop
	_delay_ms(1);
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 208:	ea e7       	ldi	r30, 0x7A	; 122
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 64       	ori	r24, 0x40	; 64
 210:	80 83       	st	Z, r24
 212:	89 ef       	ldi	r24, 0xF9	; 249
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <ReadADC+0x26>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <ReadADC+0x2c>
 21c:	00 00       	nop
	_delay_ms(1);
	
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 21e:	80 81       	ld	r24, Z
 220:	84 ff       	sbrs	r24, 4
 222:	fd cf       	rjmp	.-6      	; 0x21e <ReadADC+0x2e>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!
	ADCSRA|=(1<<ADIF);
 224:	ea e7       	ldi	r30, 0x7A	; 122
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	80 61       	ori	r24, 0x10	; 16
 22c:	80 83       	st	Z, r24
	return(ADC);
 22e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 232:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 236:	08 95       	ret

00000238 <PWM_init>:

void PWM_init(){
	TCCR0A = (1<<COM0A1)|(1<<COM0A0)|(1<<COM0B1)|(1<<COM0B0)|(1<<WGM01)|(1<<WGM00);
 238:	93 ef       	ldi	r25, 0xF3	; 243
 23a:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1<<CS00);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	85 bd       	out	0x25, r24	; 37
	TCCR1A =  (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B1)|(1<<WGM11)|(1<<WGM10);
 240:	e0 e8       	ldi	r30, 0x80	; 128
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	23 ee       	ldi	r18, 0xE3	; 227
 246:	20 83       	st	Z, r18
	TCCR1B = (1<<CS00);
 248:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR2A = (1<<COM0A1)|(1<<COM0A0)|(1<<COM0B1)|(1<<COM0B0)|(1<<WGM01)|(1<<WGM00);
 24c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<CS00);
 250:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCCR3A = (1<<COM0A1)|(1<<COM0A0)|(1<<COM0B1)|(1<<COM0B0)|(1<<WGM01)|(1<<WGM00);
 254:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = (1<<CS00);
 258:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	OCR0A = 128;
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	87 bd       	out	0x27, r24	; 39
	OCR0B = 128;
 260:	88 bd       	out	0x28, r24	; 40
	OCR1A = 128;
 262:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 266:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 128;
 26a:	f0 93 8b 00 	sts	0x008B, r31	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 26e:	e0 93 8a 00 	sts	0x008A, r30	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR2A = 128;
 272:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 128;
 276:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	OCR3A = 128;
 27a:	f0 93 99 00 	sts	0x0099, r31	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 27e:	e0 93 98 00 	sts	0x0098, r30	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = 128;
 282:	f0 93 9b 00 	sts	0x009B, r31	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 286:	e0 93 9a 00 	sts	0x009A, r30	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 28a:	08 95       	ret

0000028c <main>:


//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int main(){
	DDRA = 0x00; PORTA = 0xFF;
 28c:	11 b8       	out	0x01, r1	; 1
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 292:	84 b9       	out	0x04, r24	; 4
 294:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 296:	87 b9       	out	0x07, r24	; 7
 298:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xF0, PORTD = 0x00;
 29a:	80 ef       	ldi	r24, 0xF0	; 240
 29c:	8a b9       	out	0x0a, r24	; 10
 29e:	1b b8       	out	0x0b, r1	; 11
	
	unsigned char data = 0x00;
	
	PWM_init();
 2a0:	cb df       	rcall	.-106    	; 0x238 <PWM_init>
	ADC_init();
 2a2:	9f df       	rcall	.-194    	; 0x1e2 <ADC_init>
	initUSART(0);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	4c df       	rcall	.-360    	; 0x140 <initUSART>
	USART_Flush(0);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	6c df       	rcall	.-296    	; 0x184 <USART_Flush>
 2ac:	f1 2c       	mov	r15, r1
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	DDRC = 0xFF; PORTC = 0x00;
	DDRD = 0xF0, PORTD = 0x00;
	
	unsigned char data = 0x00;
 2ae:	0c e7       	ldi	r16, 0x7C	; 124
	ADC_init();
	initUSART(0);
	USART_Flush(0);
	
	while(1) {
		ADMUX = 0xC0;
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f0 ec       	ldi	r31, 0xC0	; 192
 2b6:	8f 2e       	mov	r8, r31
 2b8:	f0 2d       	mov	r31, r0
 2ba:	ca e7       	ldi	r28, 0x7A	; 122
		ADCSRA |= (1<<ADSC);
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	0f 2e       	mov	r0, r31
		a = ReadADC(0);
			if(a > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0xE0;
 2c0:	f0 ee       	ldi	r31, 0xE0	; 224
 2c2:	3f 2e       	mov	r3, r31
 2c4:	f0 2d       	mov	r31, r0
 2c6:	0f 2e       	mov	r0, r31
			}	
			
		ADMUX = 0xC1;
 2c8:	f1 ec       	ldi	r31, 0xC1	; 193
 2ca:	9f 2e       	mov	r9, r31
 2cc:	f0 2d       	mov	r31, r0
 2ce:	0f 2e       	mov	r0, r31
				PORTC = 0x00;
				data = SetBit(data, 0, 0);
			}
			else{
				data = SetBit(data, 0, 1);
				PORTC = 0x70;
 2d0:	f0 e7       	ldi	r31, 0x70	; 112
 2d2:	4f 2e       	mov	r4, r31
 2d4:	f0 2d       	mov	r31, r0
 2d6:	0f 2e       	mov	r0, r31
			}

		ADMUX = 0xC2;
 2d8:	f2 ec       	ldi	r31, 0xC2	; 194
 2da:	af 2e       	mov	r10, r31
 2dc:	f0 2d       	mov	r31, r0
 2de:	0f 2e       	mov	r0, r31
		c = ReadADC(2);
			if(c > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0x38;
 2e0:	f8 e3       	ldi	r31, 0x38	; 56
 2e2:	5f 2e       	mov	r5, r31
 2e4:	f0 2d       	mov	r31, r0
 2e6:	0f 2e       	mov	r0, r31
			}

		ADMUX = 0xC3;
 2e8:	f3 ec       	ldi	r31, 0xC3	; 195
 2ea:	bf 2e       	mov	r11, r31
 2ec:	f0 2d       	mov	r31, r0
 2ee:	0f 2e       	mov	r0, r31
		d = ReadADC(3);
			if(d > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0x1C;
 2f0:	fc e1       	ldi	r31, 0x1C	; 28
 2f2:	6f 2e       	mov	r6, r31
 2f4:	f0 2d       	mov	r31, r0
 2f6:	0f 2e       	mov	r0, r31
			}
			
		ADMUX = 0xC4;
 2f8:	f4 ec       	ldi	r31, 0xC4	; 196
 2fa:	cf 2e       	mov	r12, r31
 2fc:	f0 2d       	mov	r31, r0
 2fe:	0f 2e       	mov	r0, r31
			if(e > 150){
				PORTC = 0x00;
				data = SetBit(data, 1, 0);
			}
			else{
				PORTC = 0x0E;
 300:	fe e0       	ldi	r31, 0x0E	; 14
 302:	7f 2e       	mov	r7, r31
 304:	f0 2d       	mov	r31, r0
 306:	0f 2e       	mov	r0, r31
				data = SetBit(data, 1, 1);
			}

		ADMUX = 0xC5;
 308:	f5 ec       	ldi	r31, 0xC5	; 197
 30a:	df 2e       	mov	r13, r31
 30c:	f0 2d       	mov	r31, r0
 30e:	0f 2e       	mov	r0, r31
		f = ReadADC(5);
			if(f > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0x07;
 310:	f7 e0       	ldi	r31, 0x07	; 7
 312:	ef 2e       	mov	r14, r31
 314:	f0 2d       	mov	r31, r0
 316:	f8 01       	movw	r30, r16
	ADC_init();
	initUSART(0);
	USART_Flush(0);
	
	while(1) {
		ADMUX = 0xC0;
 318:	80 82       	st	Z, r8
 31a:	88 81       	ld	r24, Y
		ADCSRA |= (1<<ADSC);
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	88 83       	st	Y, r24
 320:	81 ee       	ldi	r24, 0xE1	; 225
 322:	94 e0       	ldi	r25, 0x04	; 4
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <main+0x98>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0x9e>
 32a:	00 00       	nop
		_delay_ms(5);
		
		a = ReadADC(0);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	60 df       	rcall	.-320    	; 0x1f0 <ReadADC>
 330:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <a+0x1>
 334:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <a>
 338:	87 39       	cpi	r24, 0x97	; 151
			if(a > 150){
 33a:	91 05       	cpc	r25, r1
 33c:	10 f0       	brcs	.+4      	; 0x342 <main+0xb6>
 33e:	18 b8       	out	0x08, r1	; 8
				PORTC = 0x00;
 340:	01 c0       	rjmp	.+2      	; 0x344 <main+0xb8>
 342:	38 b8       	out	0x08, r3	; 8
			}
			else{
				PORTC = 0xE0;
 344:	f8 01       	movw	r30, r16
			}	
			
		ADMUX = 0xC1;
 346:	90 82       	st	Z, r9
 348:	88 81       	ld	r24, Y
		ADCSRA |= (1<<ADSC);
 34a:	80 64       	ori	r24, 0x40	; 64
 34c:	88 83       	st	Y, r24
 34e:	81 ee       	ldi	r24, 0xE1	; 225
 350:	94 e0       	ldi	r25, 0x04	; 4
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0xc6>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0xcc>
 358:	00 00       	nop
		_delay_ms(5);
		
		b = ReadADC(1);
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	49 df       	rcall	.-366    	; 0x1f0 <ReadADC>
 35e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <b+0x1>
 362:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <b>
 366:	87 39       	cpi	r24, 0x97	; 151
			if(b > 150){
 368:	91 05       	cpc	r25, r1
 36a:	28 f0       	brcs	.+10     	; 0x376 <main+0xea>
 36c:	18 b8       	out	0x08, r1	; 8
				PORTC = 0x00;
 36e:	9f 2d       	mov	r25, r15
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 370:	9e 7f       	andi	r25, 0xFE	; 254
 372:	f9 2e       	mov	r15, r25
 374:	04 c0       	rjmp	.+8      	; 0x37e <main+0xf2>
 376:	ef 2d       	mov	r30, r15
 378:	e1 60       	ori	r30, 0x01	; 1
 37a:	fe 2e       	mov	r15, r30
 37c:	48 b8       	out	0x08, r4	; 8
				data = SetBit(data, 0, 0);
			}
			else{
				data = SetBit(data, 0, 1);
				PORTC = 0x70;
 37e:	f8 01       	movw	r30, r16
			}

		ADMUX = 0xC2;
 380:	a0 82       	st	Z, r10
 382:	88 81       	ld	r24, Y
		ADCSRA |= (1<<ADSC);
 384:	80 64       	ori	r24, 0x40	; 64
 386:	88 83       	st	Y, r24
 388:	81 ee       	ldi	r24, 0xE1	; 225
 38a:	94 e0       	ldi	r25, 0x04	; 4
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <main+0x100>
 390:	00 c0       	rjmp	.+0      	; 0x392 <main+0x106>
 392:	00 00       	nop
		_delay_ms(5);
		
		c = ReadADC(2);
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	2c df       	rcall	.-424    	; 0x1f0 <ReadADC>
 398:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <c+0x1>
 39c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <c>
 3a0:	87 39       	cpi	r24, 0x97	; 151
			if(c > 150){
 3a2:	91 05       	cpc	r25, r1
 3a4:	10 f0       	brcs	.+4      	; 0x3aa <main+0x11e>
 3a6:	18 b8       	out	0x08, r1	; 8
				PORTC = 0x00;
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <main+0x120>
 3aa:	58 b8       	out	0x08, r5	; 8
			}
			else{
				PORTC = 0x38;
 3ac:	f8 01       	movw	r30, r16
			}

		ADMUX = 0xC3;
 3ae:	b0 82       	st	Z, r11
 3b0:	88 81       	ld	r24, Y
		ADCSRA |= (1<<ADSC);
 3b2:	80 64       	ori	r24, 0x40	; 64
 3b4:	88 83       	st	Y, r24
 3b6:	81 ee       	ldi	r24, 0xE1	; 225
 3b8:	94 e0       	ldi	r25, 0x04	; 4
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x12e>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x134>
 3c0:	00 00       	nop
		_delay_ms(5);
		
		d = ReadADC(3);
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	15 df       	rcall	.-470    	; 0x1f0 <ReadADC>
 3c6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <d+0x1>
 3ca:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <d>
 3ce:	87 39       	cpi	r24, 0x97	; 151
			if(d > 150){
 3d0:	91 05       	cpc	r25, r1
 3d2:	10 f0       	brcs	.+4      	; 0x3d8 <main+0x14c>
 3d4:	18 b8       	out	0x08, r1	; 8
				PORTC = 0x00;
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <main+0x14e>
 3d8:	68 b8       	out	0x08, r6	; 8
			}
			else{
				PORTC = 0x1C;
 3da:	f8 01       	movw	r30, r16
			}
			
		ADMUX = 0xC4;
 3dc:	c0 82       	st	Z, r12
 3de:	88 81       	ld	r24, Y
		ADCSRA |= (1<<ADSC);
 3e0:	80 64       	ori	r24, 0x40	; 64
 3e2:	88 83       	st	Y, r24
 3e4:	81 ee       	ldi	r24, 0xE1	; 225
 3e6:	94 e0       	ldi	r25, 0x04	; 4
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x15c>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x162>
 3ee:	00 00       	nop
		_delay_ms(5);
		
		e = ReadADC(4);
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	fe de       	rcall	.-516    	; 0x1f0 <ReadADC>
 3f4:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <e+0x1>
 3f8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <e>
 3fc:	87 39       	cpi	r24, 0x97	; 151
			if(e > 150){
 3fe:	91 05       	cpc	r25, r1
 400:	28 f0       	brcs	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 402:	18 b8       	out	0x08, r1	; 8
				PORTC = 0x00;
 404:	9f 2d       	mov	r25, r15
 406:	9d 7f       	andi	r25, 0xFD	; 253
 408:	f9 2e       	mov	r15, r25
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	78 b8       	out	0x08, r7	; 8
				data = SetBit(data, 1, 0);
			}
			else{
				PORTC = 0x0E;
 40e:	ef 2d       	mov	r30, r15
 410:	e2 60       	ori	r30, 0x02	; 2
 412:	fe 2e       	mov	r15, r30
 414:	f8 01       	movw	r30, r16
				data = SetBit(data, 1, 1);
			}

		ADMUX = 0xC5;
 416:	d0 82       	st	Z, r13
 418:	88 81       	ld	r24, Y
		ADCSRA |= (1<<ADSC);
 41a:	80 64       	ori	r24, 0x40	; 64
 41c:	88 83       	st	Y, r24
 41e:	81 ee       	ldi	r24, 0xE1	; 225
 420:	94 e0       	ldi	r25, 0x04	; 4
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
		_delay_ms(5);
		f = ReadADC(5);
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	e1 de       	rcall	.-574    	; 0x1f0 <ReadADC>
 42e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <f+0x1>
 432:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <f>
 436:	87 39       	cpi	r24, 0x97	; 151
			if(f > 150){
 438:	91 05       	cpc	r25, r1
 43a:	10 f0       	brcs	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43c:	18 b8       	out	0x08, r1	; 8
				PORTC = 0x00;
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	e8 b8       	out	0x08, r14	; 8
			}
			else{
				PORTC = 0x07;
 442:	86 ec       	ldi	r24, 0xC6	; 198
			}
			
		ADMUX = 0xC6;
 444:	f8 01       	movw	r30, r16
 446:	80 83       	st	Z, r24
 448:	88 81       	ld	r24, Y
		ADCSRA |= (1<<ADSC);
 44a:	80 64       	ori	r24, 0x40	; 64
 44c:	88 83       	st	Y, r24
 44e:	81 ee       	ldi	r24, 0xE1	; 225
 450:	94 e0       	ldi	r25, 0x04	; 4
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
		_delay_ms(5);
		
		g = ReadADC(6);
 45a:	86 e0       	ldi	r24, 0x06	; 6
 45c:	c9 de       	rcall	.-622    	; 0x1f0 <ReadADC>
 45e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <g+0x1>
 462:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g>
 466:	87 39       	cpi	r24, 0x97	; 151
			if(g > 150){
 468:	91 05       	cpc	r25, r1
 46a:	10 f0       	brcs	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46c:	18 b8       	out	0x08, r1	; 8
				PORTC = 0x00;
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 470:	83 e0       	ldi	r24, 0x03	; 3
			}
			else{
				PORTC = 0x03;
 472:	88 b9       	out	0x08, r24	; 8
 474:	87 ec       	ldi	r24, 0xC7	; 199
			}
			
		ADMUX = 0xC7;
 476:	f8 01       	movw	r30, r16
 478:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
 47a:	88 81       	ld	r24, Y
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	88 83       	st	Y, r24
 480:	81 ee       	ldi	r24, 0xE1	; 225
 482:	94 e0       	ldi	r25, 0x04	; 4
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
		_delay_ms(5);
		
		h = ReadADC(7);
 48c:	8e 2d       	mov	r24, r14
 48e:	b0 de       	rcall	.-672    	; 0x1f0 <ReadADC>
 490:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <h+0x1>
 494:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <h>
 498:	87 39       	cpi	r24, 0x97	; 151
			if(h > 150){
 49a:	91 05       	cpc	r25, r1
 49c:	48 f0       	brcs	.+18     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 49e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
				cnt = 0;
 4a2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 4a6:	18 b8       	out	0x08, r1	; 8
				PORTC = 0x00;
 4a8:	9f 2d       	mov	r25, r15
 4aa:	9b 7f       	andi	r25, 0xFB	; 251
 4ac:	f9 2e       	mov	r15, r25
 4ae:	12 c0       	rjmp	.+36     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
				data = SetBit(data, 2, 0);
			}
			else{
				if(cnt >= 100){
 4b4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 4b8:	84 36       	cpi	r24, 0x64	; 100
 4ba:	91 05       	cpc	r25, r1
 4bc:	20 f0       	brcs	.+8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4be:	ef 2d       	mov	r30, r15
 4c0:	e4 60       	ori	r30, 0x04	; 4
 4c2:	fe 2e       	mov	r15, r30
 4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
					data = SetBit(data, 2, 1);
				} else {
					cnt += 1;
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 4cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
					PORTC = 0x01;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	88 b9       	out	0x08, r24	; 8
				}
				
			}
			USART_Send(data, 0);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	8f 2d       	mov	r24, r15
 4d8:	72 de       	rcall	.-796    	; 0x1be <USART_Send>
 4da:	87 ea       	ldi	r24, 0xA7	; 167
 4dc:	91 e6       	ldi	r25, 0x61	; 97
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e4:	00 00       	nop
 4e6:	17 cf       	rjmp	.-466    	; 0x316 <main+0x8a>

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
