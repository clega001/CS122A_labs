
two_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004c4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800104  00800104  0000055c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e39  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006de  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  0000252c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000580  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d4  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c1       	rjmp	.+644    	; 0x2ba <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 32       	cpi	r26, 0x26	; 38
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bd d1       	rcall	.+890    	; 0x43e <main>
  c4:	fd c1       	rjmp	.+1018   	; 0x4c0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Flush>:
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <USART_Flush+0xe>
 110:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 114:	88 23       	and	r24, r24
 116:	74 f0       	brlt	.+28     	; 0x134 <USART_Flush+0x28>
 118:	08 95       	ret
 11a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 11e:	88 23       	and	r24, r24
 120:	8c f4       	brge	.+34     	; 0x144 <USART_Flush+0x38>
 122:	a6 ec       	ldi	r26, 0xC6	; 198
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	e4 f3       	brlt	.-8      	; 0x12a <USART_Flush+0x1e>
 132:	08 95       	ret
 134:	ae ec       	ldi	r26, 0xCE	; 206
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e8 ec       	ldi	r30, 0xC8	; 200
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8c 91       	ld	r24, X
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	e4 f3       	brlt	.-8      	; 0x13c <USART_Flush+0x30>
 144:	08 95       	ret

00000146 <USART_Receive>:
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	41 f0       	breq	.+16     	; 0x15a <USART_Receive+0x14>
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	ec f7       	brge	.-6      	; 0x14e <USART_Receive+0x8>
 154:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 158:	08 95       	ret
 15a:	e8 ec       	ldi	r30, 0xC8	; 200
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	ec f7       	brge	.-6      	; 0x15e <USART_Receive+0x18>
 164:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 168:	08 95       	ret

0000016a <TimerOn>:
 16a:	8b e0       	ldi	r24, 0x0B	; 11
 16c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 170:	8d e7       	ldi	r24, 0x7D	; 125
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 178:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 186:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 192:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 196:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 19a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 19e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 1a2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 1a6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 1aa:	8f b7       	in	r24, 0x3f	; 63
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	8f bf       	out	0x3f, r24	; 63
 1b0:	08 95       	ret

000001b2 <blink>:
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	91 05       	cpc	r25, r1
 1b6:	91 f0       	breq	.+36     	; 0x1dc <blink+0x2a>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <blink+0x10>
 1be:	89 2b       	or	r24, r25
 1c0:	d1 f5       	brne	.+116    	; 0x236 <blink+0x84>
 1c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <color>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <blink+0x20>
 1ca:	82 b9       	out	0x02, r24	; 2
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	08 95       	ret
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	82 b9       	out	0x02, r24	; 2
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret
 1dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <color>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	29 f5       	brne	.+74     	; 0x22e <blink+0x7c>
 1e4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cnt>
 1e8:	85 30       	cpi	r24, 0x05	; 5
 1ea:	b8 f0       	brcs	.+46     	; 0x21a <blink+0x68>
 1ec:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1f0:	88 ee       	ldi	r24, 0xE8	; 232
 1f2:	93 e0       	ldi	r25, 0x03	; 3
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <tasks+0xe>
 1fc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <tasks+0xf>
 200:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <tasks+0x10>
 204:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <tasks+0x11>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <color>
 20e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 212:	ab df       	rcall	.-170    	; 0x16a <TimerOn>
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	08 95       	ret
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	82 b9       	out	0x02, r24	; 2
 21e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cnt>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cnt>
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	08 95       	ret
 22e:	12 b8       	out	0x02, r1	; 2
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	08 95       	ret
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 95       	ret

0000023c <TimerISR>:

const unsigned char tasksSize = 2;
task tasks[2];

void TimerISR()
{
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cc e0       	ldi	r28, 0x0C	; 12
 24a:	d1 e0       	ldi	r29, 0x01	; 1
 24c:	0f 2e       	mov	r0, r31
 24e:	f4 e2       	ldi	r31, 0x24	; 36
 250:	ef 2e       	mov	r14, r31
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	ff 2e       	mov	r15, r31
 256:	f0 2d       	mov	r31, r0
 258:	8e 01       	movw	r16, r28
	unsigned char i;
	for (i = 0;i < tasksSize;++i)
	{
		if ((tasks[i].elapsedTime >= tasks[i].period))
 25a:	4e 81       	ldd	r20, Y+6	; 0x06
 25c:	5f 81       	ldd	r21, Y+7	; 0x07
 25e:	68 85       	ldd	r22, Y+8	; 0x08
 260:	79 85       	ldd	r23, Y+9	; 0x09
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	9b 81       	ldd	r25, Y+3	; 0x03
 266:	ac 81       	ldd	r26, Y+4	; 0x04
 268:	bd 81       	ldd	r27, Y+5	; 0x05
 26a:	48 17       	cp	r20, r24
 26c:	59 07       	cpc	r21, r25
 26e:	6a 07       	cpc	r22, r26
 270:	7b 07       	cpc	r23, r27
 272:	58 f0       	brcs	.+22     	; 0x28a <TimerISR+0x4e>
		{
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 274:	ea 85       	ldd	r30, Y+10	; 0x0a
 276:	fb 85       	ldd	r31, Y+11	; 0x0b
 278:	88 81       	ld	r24, Y
 27a:	99 81       	ldd	r25, Y+1	; 0x01
 27c:	09 95       	icall
 27e:	99 83       	std	Y+1, r25	; 0x01
 280:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 282:	1e 82       	std	Y+6, r1	; 0x06
 284:	1f 82       	std	Y+7, r1	; 0x07
 286:	18 86       	std	Y+8, r1	; 0x08
 288:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += PERIOD;
 28a:	f8 01       	movw	r30, r16
 28c:	86 81       	ldd	r24, Z+6	; 0x06
 28e:	97 81       	ldd	r25, Z+7	; 0x07
 290:	a0 85       	ldd	r26, Z+8	; 0x08
 292:	b1 85       	ldd	r27, Z+9	; 0x09
 294:	8c 59       	subi	r24, 0x9C	; 156
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	af 4f       	sbci	r26, 0xFF	; 255
 29a:	bf 4f       	sbci	r27, 0xFF	; 255
 29c:	86 83       	std	Z+6, r24	; 0x06
 29e:	97 83       	std	Z+7, r25	; 0x07
 2a0:	a0 87       	std	Z+8, r26	; 0x08
 2a2:	b1 87       	std	Z+9, r27	; 0x09
 2a4:	2c 96       	adiw	r28, 0x0c	; 12
task tasks[2];

void TimerISR()
{
	unsigned char i;
	for (i = 0;i < tasksSize;++i)
 2a6:	ce 15       	cp	r28, r14
 2a8:	df 05       	cpc	r29, r15
 2aa:	b1 f6       	brne	.-84     	; 0x258 <TimerISR+0x1c>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += PERIOD;
	}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	ff 90       	pop	r15
 2b6:	ef 90       	pop	r14
 2b8:	08 95       	ret

000002ba <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	0b b6       	in	r0, 0x3b	; 59
 2c6:	0f 92       	push	r0
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 2e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_cntcurr>
 2e4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x1>
 2e8:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x2>
 2ec:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x3>
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	a1 09       	sbc	r26, r1
 2f4:	b1 09       	sbc	r27, r1
 2f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 2fa:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 2fe:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 302:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 306:	89 2b       	or	r24, r25
 308:	8a 2b       	or	r24, r26
 30a:	8b 2b       	or	r24, r27
 30c:	89 f4       	brne	.+34     	; 0x330 <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 30e:	96 df       	rcall	.-212    	; 0x23c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 314:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 318:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 31c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 320:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 324:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 328:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 32c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	}
}
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0b be       	out	0x3b, r0	; 59
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 356:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 35a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 35e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 362:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 366:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_avr_timer_cntcurr>
 36a:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_avr_timer_cntcurr+0x1>
 36e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_cntcurr+0x2>
 372:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_cntcurr+0x3>
 376:	08 95       	ret

00000378 <readUSART>:
	return state;
}

enum readState{start, action} s;
int readUSART(int s){
	switch(s){
 378:	02 97       	sbiw	r24, 0x02	; 2
 37a:	08 f0       	brcs	.+2      	; 0x37e <readUSART+0x6>
 37c:	57 c0       	rjmp	.+174    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 37e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <r>
	}
	switch(s){
		case start:
			break;
		case action:
			if(GetBit(r,2)){
 382:	82 ff       	sbrs	r24, 2
 384:	1a c0       	rjmp	.+52     	; 0x3ba <readUSART+0x42>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 386:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		case start:
			break;
		case action:
			if(GetBit(r,2)){
				TimerOff();
				tasks[1].period = 10;
 38a:	8a e0       	ldi	r24, 0x0A	; 10
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <tasks+0xe>
 396:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <tasks+0xf>
 39a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <tasks+0x10>
 39e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <tasks+0x11>
				color = 0x02;
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <color>
				TimerSet(PERIOD);
 3a8:	64 e6       	ldi	r22, 0x64	; 100
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	d2 df       	rcall	.-92     	; 0x356 <TimerSet>
				TimerOn();
 3b2:	db de       	rcall	.-586    	; 0x16a <TimerOn>
 3b4:	81 e0       	ldi	r24, 0x01	; 1

enum readState{start, action} s;
int readUSART(int s){
	switch(s){
		case start:
			s = action; break;
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	08 95       	ret
				TimerOff();
				tasks[1].period = 10;
				color = 0x02;
				TimerSet(PERIOD);
				TimerOn();
				break;
 3ba:	81 ff       	sbrs	r24, 1
			}
			else if(GetBit(r,1)){
 3bc:	1a c0       	rjmp	.+52     	; 0x3f2 <readUSART+0x7a>
 3be:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 3c2:	84 e6       	ldi	r24, 0x64	; 100
				TimerOn();
				break;
			}
			else if(GetBit(r,1)){
				TimerOff();
				tasks[1].period = 100;
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	a0 e0       	ldi	r26, 0x00	; 0
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <tasks+0xe>
 3ce:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <tasks+0xf>
 3d2:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <tasks+0x10>
 3d6:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <tasks+0x11>
 3da:	81 e0       	ldi	r24, 0x01	; 1
				speed = 0x01;
 3dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3e0:	64 e6       	ldi	r22, 0x64	; 100
				TimerSet(PERIOD);
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	b6 df       	rcall	.-148    	; 0x356 <TimerSet>
				TimerOn();
 3ea:	bf de       	rcall	.-642    	; 0x16a <TimerOn>
 3ec:	81 e0       	ldi	r24, 0x01	; 1

enum readState{start, action} s;
int readUSART(int s){
	switch(s){
		case start:
			s = action; break;
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	08 95       	ret
				TimerOff();
				tasks[1].period = 100;
				speed = 0x01;
				TimerSet(PERIOD);
				TimerOn();
				break;
 3f2:	80 ff       	sbrs	r24, 0
			}
			else if(GetBit(r,0) && !speed){
 3f4:	1e c0       	rjmp	.+60     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3fa:	81 11       	cpse	r24, r1
 3fc:	1d c0       	rjmp	.+58     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3fe:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 402:	84 ef       	ldi	r24, 0xF4	; 244
				TimerOn();
				break;
			}
			else if(GetBit(r,0) && !speed){
				TimerOff();
				tasks[1].period = 500;
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <tasks+0xe>
 40e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <tasks+0xf>
 412:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <tasks+0x10>
 416:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <tasks+0x11>
 41a:	64 e6       	ldi	r22, 0x64	; 100
				TimerSet(PERIOD);
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	99 df       	rcall	.-206    	; 0x356 <TimerSet>
				TimerOn();
 424:	a2 de       	rcall	.-700    	; 0x16a <TimerOn>
 426:	81 e0       	ldi	r24, 0x01	; 1

enum readState{start, action} s;
int readUSART(int s){
	switch(s){
		case start:
			s = action; break;
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	08 95       	ret
			else if(GetBit(r,0) && !speed){
				TimerOff();
				tasks[1].period = 500;
				TimerSet(PERIOD);
				TimerOn();
				break;
 42c:	80 e0       	ldi	r24, 0x00	; 0
		case start:
			s = action; break;
		case action:
			s = action; break;
		default:
			s = start; break;
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	08 95       	ret
 432:	81 e0       	ldi	r24, 0x01	; 1

enum readState{start, action} s;
int readUSART(int s){
	switch(s){
		case start:
			s = action; break;
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	08 95       	ret
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	08 95       	ret

0000043e <main>:
			}
		default:
			break;
	}
	return s;
}
 43e:	8f ef       	ldi	r24, 0xFF	; 255

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 440:	81 b9       	out	0x01, r24	; 1
 442:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 444:	84 b9       	out	0x04, r24	; 4
 446:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x00; PORTD = 0xFF;
 448:	1a b8       	out	0x0a, r1	; 10
 44a:	8b b9       	out	0x0b, r24	; 11

	initUSART(0);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	3c de       	rcall	.-904    	; 0xc8 <initUSART>

	tasks[0].state = start;
 450:	ec e0       	ldi	r30, 0x0C	; 12
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	11 82       	std	Z+1, r1	; 0x01
 456:	10 82       	st	Z, r1
	tasks[0].period = 100;
 458:	84 e6       	ldi	r24, 0x64	; 100
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	a0 e0       	ldi	r26, 0x00	; 0
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	82 83       	std	Z+2, r24	; 0x02
 462:	93 83       	std	Z+3, r25	; 0x03
 464:	a4 83       	std	Z+4, r26	; 0x04
 466:	b5 83       	std	Z+5, r27	; 0x05
	tasks[0].elapsedTime = 0;
 468:	16 82       	std	Z+6, r1	; 0x06
 46a:	17 82       	std	Z+7, r1	; 0x07
 46c:	10 86       	std	Z+8, r1	; 0x08
 46e:	11 86       	std	Z+9, r1	; 0x09
	tasks[0].TickFct = &readUSART;
 470:	8c eb       	ldi	r24, 0xBC	; 188
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	93 87       	std	Z+11, r25	; 0x0b
 476:	82 87       	std	Z+10, r24	; 0x0a

	tasks[1].state = init;
 478:	15 86       	std	Z+13, r1	; 0x0d
 47a:	14 86       	std	Z+12, r1	; 0x0c
	tasks[1].period = 1000;
 47c:	88 ee       	ldi	r24, 0xE8	; 232
 47e:	93 e0       	ldi	r25, 0x03	; 3
 480:	a0 e0       	ldi	r26, 0x00	; 0
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	86 87       	std	Z+14, r24	; 0x0e
 486:	97 87       	std	Z+15, r25	; 0x0f
 488:	a0 8b       	std	Z+16, r26	; 0x10
 48a:	b1 8b       	std	Z+17, r27	; 0x11
	tasks[1].elapsedTime = 0;
 48c:	12 8a       	std	Z+18, r1	; 0x12
 48e:	13 8a       	std	Z+19, r1	; 0x13
 490:	14 8a       	std	Z+20, r1	; 0x14
 492:	15 8a       	std	Z+21, r1	; 0x15
	tasks[1].TickFct = &blink;
 494:	89 ed       	ldi	r24, 0xD9	; 217
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	97 8b       	std	Z+23, r25	; 0x17
 49a:	86 8b       	std	Z+22, r24	; 0x16
	
	TimerSet(PERIOD);
 49c:	64 e6       	ldi	r22, 0x64	; 100
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 4a4:	58 df       	rcall	.-336    	; 0x356 <TimerSet>
 4a6:	61 de       	rcall	.-830    	; 0x16a <TimerOn>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 4a8:	c0 ec       	ldi	r28, 0xC0	; 192
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	88 81       	ld	r24, Y
	while (1)
	{
		if(USART_HasReceived(0))
 4ae:	88 23       	and	r24, r24
		{
			r = USART_Receive(0);
 4b0:	ec f7       	brge	.-6      	; 0x4ac <main+0x6e>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	48 de       	rcall	.-880    	; 0x146 <USART_Receive>
 4b6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <r>
			USART_Flush(0);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	27 de       	rcall	.-946    	; 0x10c <USART_Flush>
 4be:	f6 cf       	rjmp	.-20     	; 0x4ac <main+0x6e>

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
