
clega001_jcent001_lab1_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002f8  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a48  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000894  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040c  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000111  00000000  00000000  0000211d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000222e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ce d0       	rcall	.+412    	; 0x260 <main>
  c4:	17 c1       	rjmp	.+558    	; 0x2f4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
  ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
  f0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
  f4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
  f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
  fc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 100:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 104:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 122:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 126:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 13c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 140:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 144:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TimerFlag>

ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 15a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 15e:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 162:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 166:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 16a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 172:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 18c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 190:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 194:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <_avr_timer_cntcurr>
 19c:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <TickFct_BL>:
unsigned char hold = 0x00;
unsigned char b = 0x00;

void TickFct_BL(){
	
	b = PINA && 0x01;
 1aa:	90 b1       	in	r25, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	91 11       	cpse	r25, r1
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <TickFct_BL+0xa>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	
	switch(BL_state){
 1b8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <BL_state>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	51 f0       	breq	.+20     	; 0x1d4 <TickFct_BL+0x2a>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <TickFct_BL+0x22>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	69 f0       	breq	.+26     	; 0x1e0 <TickFct_BL+0x36>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	c9 f0       	breq	.+50     	; 0x1fc <TickFct_BL+0x52>
 1ca:	0e c0       	rjmp	.+28     	; 0x1e8 <TickFct_BL+0x3e>
		case BL_Start:
			BL_state = blink_on;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <BL_state>
			break;
 1d2:	10 c0       	rjmp	.+32     	; 0x1f4 <TickFct_BL+0x4a>
		case blink_on:
			BL_state = blink_off; break;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <BL_state>
			break;
		case blink_on:
			blinkingLED = 0x08;
			break;
		case blink_off:
			blinkingLED = 0x00;
 1da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <blinkingLED>
			break;
 1de:	08 95       	ret
			BL_state = blink_on;
			break;
		case blink_on:
			BL_state = blink_off; break;
		case blink_off:
			BL_state = blink_on;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <BL_state>
			break;
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <TickFct_BL+0x4a>
		case test:
			BL_state = test;
			break;
		default:
			BL_state = BL_Start;
 1e8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <BL_state>
			break;
	}
	switch(BL_state){
		case BL_Start:
			blinkingLED = 0x08;
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <blinkingLED>
		case test:
			blinkingLED = 0x08;
		default:
			break;
	}
}
 1f2:	08 95       	ret
	switch(BL_state){
		case BL_Start:
			blinkingLED = 0x08;
			break;
		case blink_on:
			blinkingLED = 0x08;
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <blinkingLED>
			break;
 1fa:	08 95       	ret
		case blink_off:
			blinkingLED = 0x00;
			break;
		case test:
			blinkingLED = 0x08;
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <blinkingLED>
 202:	08 95       	ret

00000204 <TickFct_TL>:
			break;
	}
}
void TickFct_TL(){
	
	b = PINA && 0x01;
 204:	90 b1       	in	r25, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	91 11       	cpse	r25, r1
 20a:	01 c0       	rjmp	.+2      	; 0x20e <TickFct_TL+0xa>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	
	switch(TL_state){
 212:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <TL_state>
 216:	88 23       	and	r24, r24
 218:	19 f0       	breq	.+6      	; 0x220 <TickFct_TL+0x1c>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	d9 f0       	breq	.+54     	; 0x254 <TickFct_TL+0x50>
 21e:	04 c0       	rjmp	.+8      	; 0x228 <TickFct_TL+0x24>
		case TL_Start:
			TL_state = TL_Blink;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <TL_state>
			break;
 226:	16 c0       	rjmp	.+44     	; 0x254 <TickFct_TL+0x50>
		case TL_Blink:
			TL_state = TL_Blink;
			break;
		default:
			TL_state = TL_Start;
 228:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <TL_state>
			break;
	}
	switch(TL_state){
		case TL_Start:
			threeLED = 0x04;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 232:	08 95       	ret
		case TL_Blink:
		if(threeLED == 0x04){
			threeLED = 0x01;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 23a:	08 95       	ret
		}
		else if(threeLED == 0x01){
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	21 f4       	brne	.+8      	; 0x248 <TickFct_TL+0x44>
			threeLED = 0x02;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 246:	08 95       	ret
		}
		else if(threeLED == 0x02){
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	49 f4       	brne	.+18     	; 0x25e <TickFct_TL+0x5a>
			threeLED = 0x04;
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
		}
		default:
			break;
	}
}
 252:	08 95       	ret
	switch(TL_state){
		case TL_Start:
			threeLED = 0x04;
			break;
		case TL_Blink:
		if(threeLED == 0x04){
 254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 258:	84 30       	cpi	r24, 0x04	; 4
 25a:	81 f7       	brne	.-32     	; 0x23c <TickFct_TL+0x38>
 25c:	eb cf       	rjmp	.-42     	; 0x234 <TickFct_TL+0x30>
 25e:	08 95       	ret

00000260 <main>:
}


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 260:	11 b8       	out	0x01, r1	; 1
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 266:	84 b9       	out	0x04, r24	; 4
 268:	15 b8       	out	0x05, r1	; 5
	
	unsigned long BL_elapsedTime = 0;
	unsigned long TL_elapsedTime = 0;
	const unsigned long timerPeriod = 100;
	
	PORTB = 0x00;
 26a:	15 b8       	out	0x05, r1	; 5
	TimerSet(timerPeriod);
 26c:	64 e6       	ldi	r22, 0x64	; 100
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	89 df       	rcall	.-238    	; 0x188 <TimerSet>
	TimerOn();
 276:	28 df       	rcall	.-432    	; 0xc8 <TimerOn>
 278:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <BL_state>
	
	BL_state = BL_Start;
 27c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <TL_state>
	TL_state = TL_Start;
 280:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <blinkingLED>
	PORTB = blinkingLED & threeLED;
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 288:	89 23       	and	r24, r25
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	81 2c       	mov	r8, r1
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	
	unsigned long BL_elapsedTime = 0;
 28e:	91 2c       	mov	r9, r1
 290:	54 01       	movw	r10, r8
 292:	c1 2c       	mov	r12, r1
	unsigned long TL_elapsedTime = 0;
 294:	d1 2c       	mov	r13, r1
 296:	76 01       	movw	r14, r12
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <main+0x58>
	TL_state = TL_Start;
	PORTB = blinkingLED & threeLED;
	
	while(1){
		if(BL_elapsedTime >= 1000){
			TickFct_BL();
 29a:	87 df       	rcall	.-242    	; 0x1aa <TickFct_BL>
 29c:	81 2c       	mov	r8, r1
			BL_elapsedTime = 0;
 29e:	91 2c       	mov	r9, r1
 2a0:	54 01       	movw	r10, r8
 2a2:	84 ef       	ldi	r24, 0xF4	; 244
		}
		if(TL_elapsedTime >= 500){
 2a4:	c8 16       	cp	r12, r24
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	d8 06       	cpc	r13, r24
 2aa:	e1 04       	cpc	r14, r1
 2ac:	f1 04       	cpc	r15, r1
 2ae:	20 f0       	brcs	.+8      	; 0x2b8 <main+0x58>
			TickFct_TL();
 2b0:	a9 df       	rcall	.-174    	; 0x204 <TickFct_TL>
 2b2:	c1 2c       	mov	r12, r1
			TL_elapsedTime = 0;
 2b4:	d1 2c       	mov	r13, r1
 2b6:	76 01       	movw	r14, r12
 2b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <blinkingLED>
		}
		
		PORTB = blinkingLED | threeLED;
 2bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c0:	89 2b       	or	r24, r25
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TimerFlag>
		
		while(!TimerFlag){}
 2c8:	88 23       	and	r24, r24
 2ca:	e1 f3       	breq	.-8      	; 0x2c4 <main+0x64>
 2cc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TimerFlag>
		TimerFlag = 0;
 2d0:	84 e6       	ldi	r24, 0x64	; 100
		BL_elapsedTime += timerPeriod;
 2d2:	88 0e       	add	r8, r24
 2d4:	91 1c       	adc	r9, r1
 2d6:	a1 1c       	adc	r10, r1
 2d8:	b1 1c       	adc	r11, r1
 2da:	84 e6       	ldi	r24, 0x64	; 100
		TL_elapsedTime += timerPeriod;
 2dc:	c8 0e       	add	r12, r24
 2de:	d1 1c       	adc	r13, r1
 2e0:	e1 1c       	adc	r14, r1
 2e2:	f1 1c       	adc	r15, r1
 2e4:	88 ee       	ldi	r24, 0xE8	; 232
	BL_state = BL_Start;
	TL_state = TL_Start;
	PORTB = blinkingLED & threeLED;
	
	while(1){
		if(BL_elapsedTime >= 1000){
 2e6:	88 16       	cp	r8, r24
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	98 06       	cpc	r9, r24
 2ec:	a1 04       	cpc	r10, r1
 2ee:	b1 04       	cpc	r11, r1
 2f0:	c0 f2       	brcs	.-80     	; 0x2a2 <main+0x42>
 2f2:	d3 cf       	rjmp	.-90     	; 0x29a <main+0x3a>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
