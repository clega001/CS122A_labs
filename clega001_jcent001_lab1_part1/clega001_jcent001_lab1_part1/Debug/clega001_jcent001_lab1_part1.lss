
clega001_jcent001_lab1_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000384  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800106  00800106  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ade  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000495  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a2  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000149  00000000  00000000  00002366  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000024af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fe d0       	rcall	.+508    	; 0x2c0 <main>
  c4:	5d c1       	rjmp	.+698    	; 0x380 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
  ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
  f0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
  f4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
  f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
  fc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 100:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 104:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 122:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_cntcurr>
 126:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x2>
 12e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 13c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 140:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 144:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <TimerFlag>

ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 15a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 15e:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 162:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 166:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 16a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 172:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 18c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 190:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 194:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_avr_timer_cntcurr>
 19c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_cntcurr+0x2>
 1a4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <TickFct_BL>:
unsigned char bbb = 0x00;
unsigned char b = 0x00;

void TickFct_BL(){

	switch(BL_state){
 1aa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <BL_state>
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <TickFct_BL+0xe>
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <TickFct_BL+0x1e>
 1b6:	0f c0       	rjmp	.+30     	; 0x1d6 <TickFct_BL+0x2c>
		case BL_Start:
			if(bbb){BL_state = BL_Start; break;}
 1b8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bbb>
 1bc:	81 11       	cpse	r24, r1
 1be:	0d c0       	rjmp	.+26     	; 0x1da <TickFct_BL+0x30>
				else{
					BL_state = BL_Blink; break;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <BL_state>
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <TickFct_BL+0x38>
				}
		case BL_Blink:
			if(bbb){BL_state = BL_Blink; break;}
 1c8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bbb>
 1cc:	81 11       	cpse	r24, r1
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <TickFct_BL+0x38>
				else{
					BL_state = BL_Start; break;
 1d0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <BL_state>
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <TickFct_BL+0x30>
				}
		default:
			BL_state = BL_Start;
 1d6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <BL_state>
			break;
	}
	switch(BL_state){
		case BL_Start:
			blinkingLED = 0x01;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <blinkingLED>
			break;
 1e0:	08 95       	ret
		case BL_Blink:
			blinkingLED = 0x00;
 1e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <blinkingLED>
 1e6:	08 95       	ret

000001e8 <TickFct_TL>:
			break;
	}
}
void TickFct_TL(){
	
	switch(TL_state){
 1e8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <TL_state>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	61 f0       	breq	.+24     	; 0x208 <TickFct_TL+0x20>
 1f0:	18 f0       	brcs	.+6      	; 0x1f8 <TickFct_TL+0x10>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	89 f0       	breq	.+34     	; 0x218 <TickFct_TL+0x30>
 1f6:	17 c0       	rjmp	.+46     	; 0x226 <TickFct_TL+0x3e>
		case TL_Start:
			if(bbb){TL_state = TL_Start; break;}
 1f8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bbb>
 1fc:	81 11       	cpse	r24, r1
 1fe:	15 c0       	rjmp	.+42     	; 0x22a <TickFct_TL+0x42>
				else{
					TL_state = TL_Blink; break;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_state>
 206:	15 c0       	rjmp	.+42     	; 0x232 <TickFct_TL+0x4a>
				}
		case TL_Blink:
			if(bbb){TL_state = TL_Blink; break;}
 208:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bbb>
 20c:	81 11       	cpse	r24, r1
 20e:	11 c0       	rjmp	.+34     	; 0x232 <TickFct_TL+0x4a>
				else{
					TL_state = TL_Blink_Again; break;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_state>
 216:	11 c0       	rjmp	.+34     	; 0x23a <TickFct_TL+0x52>
				}
		case TL_Blink_Again:
			if(bbb){TL_state = TL_Blink_Again; break;}
 218:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bbb>
 21c:	81 11       	cpse	r24, r1
 21e:	0d c0       	rjmp	.+26     	; 0x23a <TickFct_TL+0x52>
				else{
					TL_state = TL_Start; break;
 220:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <TL_state>
 224:	02 c0       	rjmp	.+4      	; 0x22a <TickFct_TL+0x42>
				}
		default:
			TL_state = TL_Start;
 226:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <TL_state>
			break;
	}
	switch(TL_state){
		case TL_Start:
			threeLED = 0x01;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 230:	08 95       	ret
		case TL_Blink:
			threeLED = 0x02;
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 238:	08 95       	ret
		case TL_Blink_Again:
			threeLED = 0x04;
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 240:	08 95       	ret

00000242 <TickFct_Butt>:
			break;
	}
}
void TickFct_Butt(){
	
	b = PINA & 0x01;
 242:	80 b1       	in	r24, 0x00	; 0
 244:	81 70       	andi	r24, 0x01	; 1
 246:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	
	
	switch(Butt_state){
 24a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Butt_state>
 24e:	92 30       	cpi	r25, 0x02	; 2
 250:	79 f0       	breq	.+30     	; 0x270 <TickFct_Butt+0x2e>
 252:	28 f4       	brcc	.+10     	; 0x25e <TickFct_Butt+0x1c>
 254:	99 23       	and	r25, r25
 256:	41 f0       	breq	.+16     	; 0x268 <TickFct_Butt+0x26>
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	b1 f0       	breq	.+44     	; 0x288 <TickFct_Butt+0x46>
 25c:	25 c0       	rjmp	.+74     	; 0x2a8 <TickFct_Butt+0x66>
 25e:	93 30       	cpi	r25, 0x03	; 3
 260:	69 f0       	breq	.+26     	; 0x27c <TickFct_Butt+0x3a>
 262:	94 30       	cpi	r25, 0x04	; 4
 264:	b9 f0       	breq	.+46     	; 0x294 <TickFct_Butt+0x52>
 266:	20 c0       	rjmp	.+64     	; 0x2a8 <TickFct_Butt+0x66>
		case Butt_Start:
			Butt_state = off;
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Butt_state>
			break;
 26e:	24 c0       	rjmp	.+72     	; 0x2b8 <TickFct_Butt+0x76>
		case off:
			if(!b){Butt_state = press_on; break;}
 270:	81 11       	cpse	r24, r1
 272:	22 c0       	rjmp	.+68     	; 0x2b8 <TickFct_Butt+0x76>
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Butt_state>
 27a:	08 95       	ret
				else{
					Butt_state = off; break;
				}
		case press_on:
			if(!b){Butt_state = press_on; break;}
 27c:	88 23       	and	r24, r24
 27e:	f9 f0       	breq	.+62     	; 0x2be <TickFct_Butt+0x7c>
				else{
					Butt_state = on; break;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Butt_state>
 286:	13 c0       	rjmp	.+38     	; 0x2ae <TickFct_Butt+0x6c>
				}
		case on:
			if(!b){Butt_state = press_off; break;}
 288:	81 11       	cpse	r24, r1
 28a:	11 c0       	rjmp	.+34     	; 0x2ae <TickFct_Butt+0x6c>
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Butt_state>
 292:	08 95       	ret
				else{
					Butt_state = on; break;
				}
		case press_off:
			if(!b){Butt_state = press_on; break;}
 294:	81 11       	cpse	r24, r1
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <TickFct_Butt+0x5e>
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Butt_state>
 29e:	08 95       	ret
				else{
					Butt_state = off; break;
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Butt_state>
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <TickFct_Butt+0x76>
				}
		default:
			Butt_state = Butt_Start;
 2a8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Butt_state>
			break;
 2ac:	08 95       	ret
	}
	switch(Butt_state){
		case on:
			bbb = 0x01;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bbb>
			PORTB = bbb;
 2b4:	85 b9       	out	0x05, r24	; 5
			break;
 2b6:	08 95       	ret
		case off:
			bbb = 0x00;
 2b8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <bbb>
			PORTB = bbb;
 2bc:	15 b8       	out	0x05, r1	; 5
 2be:	08 95       	ret

000002c0 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 2c0:	11 b8       	out	0x01, r1	; 1
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 2c6:	84 b9       	out	0x04, r24	; 4
 2c8:	15 b8       	out	0x05, r1	; 5
	unsigned long BL_elapsedTime = 0;
	unsigned long TL_elapsedTime = 0;
	unsigned long Butt_elapsedTime = 0;
	const unsigned long timerPeriod = 100;
	
	TimerSet(timerPeriod);
 2ca:	64 e6       	ldi	r22, 0x64	; 100
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	5a df       	rcall	.-332    	; 0x188 <TimerSet>
	TimerOn();
 2d4:	f9 de       	rcall	.-526    	; 0xc8 <TimerOn>
 2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <blinkingLED>
	
	PORTB = blinkingLED | threeLED;
 2da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2de:	89 2b       	or	r24, r25
 2e0:	85 b9       	out	0x05, r24	; 5
 2e2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <BL_state>
	
	BL_state = BL_Start;
 2e6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <TL_state>
	TL_state = TL_Start;
 2ea:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Butt_state>
	Butt_state = Butt_Start;
 2ee:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <Com_states>
	Com_states = Com_Start;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	
	unsigned long BL_elapsedTime = 0;
	unsigned long TL_elapsedTime = 0;
	unsigned long Butt_elapsedTime = 0;
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	dc 01       	movw	r26, r24
 2f8:	81 2c       	mov	r8, r1
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	
	unsigned long BL_elapsedTime = 0;
 2fa:	91 2c       	mov	r9, r1
 2fc:	54 01       	movw	r10, r8
 2fe:	c1 2c       	mov	r12, r1
	unsigned long TL_elapsedTime = 0;
 300:	d1 2c       	mov	r13, r1
 302:	76 01       	movw	r14, r12
 304:	01 e0       	ldi	r16, 0x01	; 1
		PORTB = (blinkingLED << 3) | threeLED;
		while(!TimerFlag){}
		TimerFlag = 0;
		BL_elapsedTime += timerPeriod;
		TL_elapsedTime += timerPeriod;
		Butt_elapsedTime += 1;
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	d0 e0       	ldi	r29, 0x00	; 0
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	13 c0       	rjmp	.+38     	; 0x334 <main+0x74>
	Butt_state = Butt_Start;
	Com_states = Com_Start;

	while(1){
		if(BL_elapsedTime >= 1000){
			TickFct_BL();
 30e:	4d df       	rcall	.-358    	; 0x1aa <TickFct_BL>
 310:	81 2c       	mov	r8, r1
			BL_elapsedTime = 0;
 312:	91 2c       	mov	r9, r1
 314:	54 01       	movw	r10, r8
 316:	84 ef       	ldi	r24, 0xF4	; 244
		}
		if(TL_elapsedTime >= 500){
 318:	c8 16       	cp	r12, r24
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	d8 06       	cpc	r13, r24
 31e:	e1 04       	cpc	r14, r1
 320:	f1 04       	cpc	r15, r1
 322:	20 f0       	brcs	.+8      	; 0x32c <main+0x6c>
			TickFct_TL();
 324:	61 df       	rcall	.-318    	; 0x1e8 <TickFct_TL>
 326:	c1 2c       	mov	r12, r1
			TL_elapsedTime = 0;
 328:	d1 2c       	mov	r13, r1
 32a:	76 01       	movw	r14, r12
 32c:	80 2f       	mov	r24, r16
		PORTB = (blinkingLED << 3) | threeLED;
		while(!TimerFlag){}
		TimerFlag = 0;
		BL_elapsedTime += timerPeriod;
		TL_elapsedTime += timerPeriod;
		Butt_elapsedTime += 1;
 32e:	91 2f       	mov	r25, r17
 330:	ad 2f       	mov	r26, r29
 332:	bc 2f       	mov	r27, r28
 334:	89 2b       	or	r24, r25
		}
		if(TL_elapsedTime >= 500){
			TickFct_TL();
			TL_elapsedTime = 0;
		}
		if(Butt_elapsedTime >= 1){
 336:	8a 2b       	or	r24, r26
 338:	8b 2b       	or	r24, r27
 33a:	09 f0       	breq	.+2      	; 0x33e <main+0x7e>
			TickFct_Butt();
 33c:	82 df       	rcall	.-252    	; 0x242 <TickFct_Butt>
 33e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <blinkingLED>
			Butt_elapsedTime = 0;
		}
		PORTB = (blinkingLED << 3) | threeLED;
 342:	88 0f       	add	r24, r24
 344:	88 0f       	add	r24, r24
 346:	88 0f       	add	r24, r24
 348:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 34c:	89 2b       	or	r24, r25
 34e:	85 b9       	out	0x05, r24	; 5
 350:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <TimerFlag>
		while(!TimerFlag){}
 354:	88 23       	and	r24, r24
 356:	e1 f3       	breq	.-8      	; 0x350 <main+0x90>
 358:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <TimerFlag>
		TimerFlag = 0;
 35c:	84 e6       	ldi	r24, 0x64	; 100
		BL_elapsedTime += timerPeriod;
 35e:	88 0e       	add	r8, r24
 360:	91 1c       	adc	r9, r1
 362:	a1 1c       	adc	r10, r1
 364:	b1 1c       	adc	r11, r1
 366:	84 e6       	ldi	r24, 0x64	; 100
		TL_elapsedTime += timerPeriod;
 368:	c8 0e       	add	r12, r24
 36a:	d1 1c       	adc	r13, r1
 36c:	e1 1c       	adc	r14, r1
 36e:	f1 1c       	adc	r15, r1
 370:	88 ee       	ldi	r24, 0xE8	; 232
	TL_state = TL_Start;
	Butt_state = Butt_Start;
	Com_states = Com_Start;

	while(1){
		if(BL_elapsedTime >= 1000){
 372:	88 16       	cp	r8, r24
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	98 06       	cpc	r9, r24
 378:	a1 04       	cpc	r10, r1
 37a:	b1 04       	cpc	r11, r1
 37c:	60 f2       	brcs	.-104    	; 0x316 <main+0x56>
 37e:	c7 cf       	rjmp	.-114    	; 0x30e <main+0x4e>

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
