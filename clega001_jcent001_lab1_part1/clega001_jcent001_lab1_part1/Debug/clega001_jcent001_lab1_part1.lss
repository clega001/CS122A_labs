
clega001_jcent001_lab1_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000004dc  00000570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080010a  0080010a  0000057a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0f  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  00001373  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051f  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000610  00000000  00000000  00002921  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 33       	cpi	r26, 0x33	; 51
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f3 d0       	rcall	.+486    	; 0x2aa <main>
  c4:	09 c2       	rjmp	.+1042   	; 0x4d8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SM1Tick>:
        if(c==0){return b;}
        a = b;
b = c;
    }
    return 0;
}
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	81 f0       	breq	.+32     	; 0xee <SM1Tick+0x26>
  ce:	2c f4       	brge	.+10     	; 0xda <SM1Tick+0x12>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	e1 f0       	breq	.+56     	; 0x10c <SM1Tick+0x44>
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	41 f0       	breq	.+16     	; 0xe8 <SM1Tick+0x20>
  d8:	1e c0       	rjmp	.+60     	; 0x116 <SM1Tick+0x4e>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	91 05       	cpc	r25, r1
  de:	51 f0       	breq	.+20     	; 0xf4 <SM1Tick+0x2c>
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	91 05       	cpc	r25, r1
  e4:	51 f0       	breq	.+20     	; 0xfa <SM1Tick+0x32>
  e6:	17 c0       	rjmp	.+46     	; 0x116 <SM1Tick+0x4e>
  e8:	00 9b       	sbis	0x00, 0	; 0
  ea:	18 c0       	rjmp	.+48     	; 0x11c <SM1Tick+0x54>
  ec:	09 c0       	rjmp	.+18     	; 0x100 <SM1Tick+0x38>
  ee:	00 9b       	sbis	0x00, 0	; 0
  f0:	18 c0       	rjmp	.+48     	; 0x122 <SM1Tick+0x5a>
  f2:	0c c0       	rjmp	.+24     	; 0x10c <SM1Tick+0x44>
  f4:	00 9b       	sbis	0x00, 0	; 0
  f6:	17 c0       	rjmp	.+46     	; 0x126 <SM1Tick+0x5e>
  f8:	03 c0       	rjmp	.+6      	; 0x100 <SM1Tick+0x38>
  fa:	00 99       	sbic	0x00, 0	; 0
  fc:	07 c0       	rjmp	.+14     	; 0x10c <SM1Tick+0x44>
  fe:	08 95       	ret
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <s>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret
 10c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <s>
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret

00000128 <SM2Tick>:
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	91 05       	cpc	r25, r1
 12c:	31 f0       	breq	.+12     	; 0x13a <SM2Tick+0x12>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	91 05       	cpc	r25, r1
 132:	41 f0       	breq	.+16     	; 0x144 <SM2Tick+0x1c>
 134:	89 2b       	or	r24, r25
 136:	a9 f4       	brne	.+42     	; 0x162 <SM2Tick+0x3a>
 138:	09 c0       	rjmp	.+18     	; 0x14c <SM2Tick+0x24>
 13a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <s>
 13e:	88 23       	and	r24, r24
 140:	59 f0       	breq	.+22     	; 0x158 <SM2Tick+0x30>
 142:	04 c0       	rjmp	.+8      	; 0x14c <SM2Tick+0x24>
 144:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <s>
 148:	81 11       	cpse	r24, r1
 14a:	06 c0       	rjmp	.+12     	; 0x158 <SM2Tick+0x30>
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <b_light>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
 158:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <b_light>
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret

00000168 <SM3Tick>:
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	91 05       	cpc	r25, r1
 16c:	51 f0       	breq	.+20     	; 0x182 <SM3Tick+0x1a>
 16e:	1c f4       	brge	.+6      	; 0x176 <SM3Tick+0xe>
 170:	89 2b       	or	r24, r25
 172:	a9 f0       	breq	.+42     	; 0x19e <SM3Tick+0x36>
 174:	26 c0       	rjmp	.+76     	; 0x1c2 <SM3Tick+0x5a>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	91 05       	cpc	r25, r1
 17a:	41 f0       	breq	.+16     	; 0x18c <SM3Tick+0x24>
 17c:	03 97       	sbiw	r24, 0x03	; 3
 17e:	59 f0       	breq	.+22     	; 0x196 <SM3Tick+0x2e>
 180:	20 c0       	rjmp	.+64     	; 0x1c2 <SM3Tick+0x5a>
 182:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <s>
 186:	88 23       	and	r24, r24
 188:	81 f0       	breq	.+32     	; 0x1aa <SM3Tick+0x42>
 18a:	09 c0       	rjmp	.+18     	; 0x19e <SM3Tick+0x36>
 18c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <s>
 190:	88 23       	and	r24, r24
 192:	89 f0       	breq	.+34     	; 0x1b6 <SM3Tick+0x4e>
 194:	0a c0       	rjmp	.+20     	; 0x1aa <SM3Tick+0x42>
 196:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <s>
 19a:	81 11       	cpse	r24, r1
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <SM3Tick+0x4e>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <t_light>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <t_light>
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <t_light>
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret

000001c8 <TimerSet>:
 1c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1d8:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <_avr_timer_cntcurr>
 1dc:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <_avr_timer_cntcurr+0x1>
 1e0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_cntcurr+0x2>
 1e4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_cntcurr+0x3>
 1e8:	08 95       	ret

000001ea <TimerOn>:
 1ea:	8b e0       	ldi	r24, 0x0B	; 11
 1ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1f0:	8d e7       	ldi	r24, 0x7D	; 125
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 202:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 206:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 212:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 216:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 21a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_avr_timer_cntcurr>
 21e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <_avr_timer_cntcurr+0x1>
 222:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <_avr_timer_cntcurr+0x2>
 226:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <_avr_timer_cntcurr+0x3>
 22a:	8f b7       	in	r24, 0x3f	; 63
 22c:	80 68       	ori	r24, 0x80	; 128
 22e:	8f bf       	out	0x3f, r24	; 63
 230:	08 95       	ret

00000232 <__vector_13>:
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_avr_timer_cntcurr>
 248:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <_avr_timer_cntcurr+0x1>
 24c:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <_avr_timer_cntcurr+0x2>
 250:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <_avr_timer_cntcurr+0x3>
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	a1 09       	sbc	r26, r1
 258:	b1 09       	sbc	r27, r1
 25a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_avr_timer_cntcurr>
 25e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <_avr_timer_cntcurr+0x1>
 262:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <_avr_timer_cntcurr+0x2>
 266:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <_avr_timer_cntcurr+0x3>
 26a:	89 2b       	or	r24, r25
 26c:	8a 2b       	or	r24, r26
 26e:	8b 2b       	or	r24, r27
 270:	99 f4       	brne	.+38     	; 0x298 <__vector_13+0x66>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <TimerFlag>
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 27c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 280:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 284:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 288:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_avr_timer_cntcurr>
 28c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <_avr_timer_cntcurr+0x1>
 290:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <_avr_timer_cntcurr+0x2>
 294:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <_avr_timer_cntcurr+0x3>
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <main>:
}
// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <main+0x6>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <main+0x8>
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <main+0xa>
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
DDRA = 0x00; PORTA = 0xFF;
 2b8:	11 b8       	out	0x01, r1	; 1
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	82 b9       	out	0x02, r24	; 2
DDRB = 0xFF; PORTB = 0x00;
 2be:	84 b9       	out	0x04, r24	; 4
 2c0:	15 b8       	out	0x05, r1	; 5
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f8 ee       	ldi	r31, 0xE8	; 232
 2c6:	df 2e       	mov	r13, r31
 2c8:	f0 2d       	mov	r31, r0
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f3 e0       	ldi	r31, 0x03	; 3
 2ce:	cf 2e       	mov	r12, r31
 2d0:	f0 2d       	mov	r31, r0
 2d2:	b1 2c       	mov	r11, r1
 2d4:	a1 2c       	mov	r10, r1
 2d6:	52 e3       	ldi	r21, 0x32	; 50
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <main+0x3e>
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
        a = b;
b = c;
 2e0:	d6 2e       	mov	r13, r22
 2e2:	c7 2e       	mov	r12, r23
 2e4:	b8 2e       	mov	r11, r24
 2e6:	a9 2e       	mov	r10, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 2e8:	65 2f       	mov	r22, r21
 2ea:	74 2f       	mov	r23, r20
 2ec:	83 2f       	mov	r24, r19
 2ee:	92 2f       	mov	r25, r18
 2f0:	2d 2d       	mov	r18, r13
 2f2:	3c 2d       	mov	r19, r12
 2f4:	4b 2d       	mov	r20, r11
 2f6:	5a 2d       	mov	r21, r10
 2f8:	cd d0       	rcall	.+410    	; 0x494 <__udivmodsi4>
 2fa:	5d 2d       	mov	r21, r13
 2fc:	4c 2d       	mov	r20, r12
 2fe:	3b 2d       	mov	r19, r11
 300:	2a 2d       	mov	r18, r10
        if(c==0){return b;}
 302:	61 15       	cp	r22, r1
 304:	71 05       	cpc	r23, r1
 306:	81 05       	cpc	r24, r1
 308:	91 05       	cpc	r25, r1
 30a:	51 f7       	brne	.-44     	; 0x2e0 <main+0x36>
 30c:	0f 2e       	mov	r0, r31
 30e:	f4 ef       	ldi	r31, 0xF4	; 244
 310:	ef 2e       	mov	r14, r31
 312:	f0 2d       	mov	r31, r0
 314:	ff 24       	eor	r15, r15
 316:	f3 94       	inc	r15
 318:	00 e0       	ldi	r16, 0x00	; 0
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	04 c0       	rjmp	.+8      	; 0x326 <main+0x7c>
        a = b;
b = c;
 31e:	e6 2e       	mov	r14, r22
 320:	f7 2e       	mov	r15, r23
 322:	08 2f       	mov	r16, r24
 324:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 326:	6d 2d       	mov	r22, r13
 328:	7c 2d       	mov	r23, r12
 32a:	8b 2d       	mov	r24, r11
 32c:	9a 2d       	mov	r25, r10
 32e:	2e 2d       	mov	r18, r14
 330:	3f 2d       	mov	r19, r15
 332:	40 2f       	mov	r20, r16
 334:	51 2f       	mov	r21, r17
 336:	ae d0       	rcall	.+348    	; 0x494 <__udivmodsi4>
 338:	de 2c       	mov	r13, r14
 33a:	cf 2c       	mov	r12, r15
 33c:	b0 2e       	mov	r11, r16
 33e:	a1 2e       	mov	r10, r17
        if(c==0){return b;}
 340:	61 15       	cp	r22, r1
 342:	71 05       	cpc	r23, r1
 344:	81 05       	cpc	r24, r1
 346:	91 05       	cpc	r25, r1
 348:	51 f7       	brne	.-44     	; 0x31e <main+0x74>

//Greatest common divisor for all tasks or smallest time unit for tasks.
unsigned long int GCD = tmpGCD;

//Recalculate GCD periods for scheduler
unsigned long int SMTick1_period = SMTick1_calc/GCD;
 34a:	62 e3       	ldi	r22, 0x32	; 50
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	2e 2d       	mov	r18, r14
 354:	3f 2d       	mov	r19, r15
 356:	40 2f       	mov	r20, r16
 358:	51 2f       	mov	r21, r17
 35a:	9c d0       	rcall	.+312    	; 0x494 <__udivmodsi4>
 35c:	29 01       	movw	r4, r18
 35e:	3a 01       	movw	r6, r20
unsigned long int SMTIck2_period = SMTick2_calc/GCD;
 360:	68 ee       	ldi	r22, 0xE8	; 232
 362:	73 e0       	ldi	r23, 0x03	; 3
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	2e 2d       	mov	r18, r14
 36a:	3f 2d       	mov	r19, r15
 36c:	40 2f       	mov	r20, r16
 36e:	51 2f       	mov	r21, r17
 370:	91 d0       	rcall	.+290    	; 0x494 <__udivmodsi4>
 372:	49 01       	movw	r8, r18
 374:	5a 01       	movw	r10, r20
unsigned long int SMTick3_period = SMTIck3_calc/GCD;
 376:	64 ef       	ldi	r22, 0xF4	; 244
 378:	71 e0       	ldi	r23, 0x01	; 1
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	2e 2d       	mov	r18, r14
 380:	3f 2d       	mov	r19, r15
 382:	40 2f       	mov	r20, r16
 384:	51 2f       	mov	r21, r17
 386:	86 d0       	rcall	.+268    	; 0x494 <__udivmodsi4>


//Declare an array of tasks 
static task task1, task2, task3;
task *tasks[] = {&task1, &task2, &task3};
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	e4 e0       	ldi	r30, 0x04	; 4
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	de 01       	movw	r26, r28
 390:	11 96       	adiw	r26, 0x01	; 1
 392:	01 90       	ld	r0, Z+
 394:	0d 92       	st	X+, r0
 396:	8a 95       	dec	r24
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0xe8>
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

// Task 1
task1.state = -1;//Task initial state.
 39a:	e0 e2       	ldi	r30, 0x20	; 32
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	6f ef       	ldi	r22, 0xFF	; 255
 3a0:	60 83       	st	Z, r22
task1.period = SMTick1_period;//Task Period.
 3a2:	41 82       	std	Z+1, r4	; 0x01
 3a4:	52 82       	std	Z+2, r5	; 0x02
 3a6:	63 82       	std	Z+3, r6	; 0x03
 3a8:	74 82       	std	Z+4, r7	; 0x04
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 3aa:	45 82       	std	Z+5, r4	; 0x05
 3ac:	56 82       	std	Z+6, r5	; 0x06
 3ae:	67 82       	std	Z+7, r6	; 0x07
 3b0:	70 86       	std	Z+8, r7	; 0x08
task1.TickFct = &SM1Tick;//Function pointer for the tick.
 3b2:	84 e6       	ldi	r24, 0x64	; 100
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	92 87       	std	Z+10, r25	; 0x0a
 3b8:	81 87       	std	Z+9, r24	; 0x09

// Task 2
task2.state = -1;
 3ba:	e5 e1       	ldi	r30, 0x15	; 21
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	60 83       	st	Z, r22
task2.period = SMTIck2_period;
 3c0:	81 82       	std	Z+1, r8	; 0x01
 3c2:	92 82       	std	Z+2, r9	; 0x02
 3c4:	a3 82       	std	Z+3, r10	; 0x03
 3c6:	b4 82       	std	Z+4, r11	; 0x04
task2.elapsedTime = SMTIck2_period;
 3c8:	85 82       	std	Z+5, r8	; 0x05
 3ca:	96 82       	std	Z+6, r9	; 0x06
 3cc:	a7 82       	std	Z+7, r10	; 0x07
 3ce:	b0 86       	std	Z+8, r11	; 0x08
task2.TickFct = &SM2Tick;
 3d0:	84 e9       	ldi	r24, 0x94	; 148
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	92 87       	std	Z+10, r25	; 0x0a
 3d6:	81 87       	std	Z+9, r24	; 0x09

//Task 3
task3.state = -1;
 3d8:	ea e0       	ldi	r30, 0x0A	; 10
 3da:	f1 e0       	ldi	r31, 0x01	; 1
 3dc:	60 83       	st	Z, r22
task3.period = SMTick3_period;
 3de:	21 83       	std	Z+1, r18	; 0x01
 3e0:	32 83       	std	Z+2, r19	; 0x02
 3e2:	43 83       	std	Z+3, r20	; 0x03
 3e4:	54 83       	std	Z+4, r21	; 0x04
task3.elapsedTime = SMTick3_period;
 3e6:	25 83       	std	Z+5, r18	; 0x05
 3e8:	36 83       	std	Z+6, r19	; 0x06
 3ea:	47 83       	std	Z+7, r20	; 0x07
 3ec:	50 87       	std	Z+8, r21	; 0x08
task3.TickFct = &SM3Tick;
 3ee:	84 eb       	ldi	r24, 0xB4	; 180
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	92 87       	std	Z+10, r25	; 0x0a

// Set the timer and turn it on
TimerSet(GCD);
 3f4:	81 87       	std	Z+9, r24	; 0x09
 3f6:	6e 2d       	mov	r22, r14
 3f8:	7f 2d       	mov	r23, r15
 3fa:	80 2f       	mov	r24, r16
 3fc:	91 2f       	mov	r25, r17
TimerOn();
 3fe:	e4 de       	rcall	.-568    	; 0x1c8 <TimerSet>
 400:	f4 de       	rcall	.-536    	; 0x1ea <TimerOn>
 402:	6e 01       	movw	r12, r28
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	c8 0e       	add	r12, r24
 408:	d1 1c       	adc	r13, r1
 40a:	de 01       	movw	r26, r28
 40c:	11 96       	adiw	r26, 0x01	; 1
 40e:	7d 01       	movw	r14, r26

unsigned short i;
while(1) {
    for ( i = 0; i < numTasks; i++ ) {   
        if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 410:	f7 01       	movw	r30, r14
 412:	01 91       	ld	r16, Z+
 414:	11 91       	ld	r17, Z+
 416:	7f 01       	movw	r14, r30
 418:	d8 01       	movw	r26, r16
 41a:	15 96       	adiw	r26, 0x05	; 5
 41c:	4d 91       	ld	r20, X+
 41e:	5d 91       	ld	r21, X+
 420:	6d 91       	ld	r22, X+
 422:	7c 91       	ld	r23, X
 424:	18 97       	sbiw	r26, 0x08	; 8
 426:	11 96       	adiw	r26, 0x01	; 1
 428:	8d 91       	ld	r24, X+
 42a:	9d 91       	ld	r25, X+
 42c:	0d 90       	ld	r0, X+
 42e:	bc 91       	ld	r27, X
 430:	a0 2d       	mov	r26, r0
 432:	48 17       	cp	r20, r24
 434:	59 07       	cpc	r21, r25
 436:	6a 07       	cpc	r22, r26
 438:	7b 07       	cpc	r23, r27
 43a:	81 f4       	brne	.+32     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
            tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 43c:	f8 01       	movw	r30, r16
 43e:	80 81       	ld	r24, Z
 440:	01 84       	ldd	r0, Z+9	; 0x09
 442:	f2 85       	ldd	r31, Z+10	; 0x0a
 444:	e0 2d       	mov	r30, r0
 446:	08 2e       	mov	r0, r24
 448:	00 0c       	add	r0, r0
 44a:	99 0b       	sbc	r25, r25
 44c:	09 95       	icall
 44e:	d8 01       	movw	r26, r16
 450:	8c 93       	st	X, r24
            tasks[i]->elapsedTime = 0;
 452:	f8 01       	movw	r30, r16
 454:	15 82       	std	Z+5, r1	; 0x05
 456:	16 82       	std	Z+6, r1	; 0x06
 458:	17 82       	std	Z+7, r1	; 0x07
 45a:	10 86       	std	Z+8, r1	; 0x08
        }
        tasks[i]->elapsedTime += 1;
 45c:	f8 01       	movw	r30, r16
 45e:	85 81       	ldd	r24, Z+5	; 0x05
 460:	96 81       	ldd	r25, Z+6	; 0x06
 462:	a7 81       	ldd	r26, Z+7	; 0x07
 464:	b0 85       	ldd	r27, Z+8	; 0x08
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	a1 1d       	adc	r26, r1
 46a:	b1 1d       	adc	r27, r1
 46c:	85 83       	std	Z+5, r24	; 0x05
 46e:	96 83       	std	Z+6, r25	; 0x06
 470:	a7 83       	std	Z+7, r26	; 0x07
 472:	b0 87       	std	Z+8, r27	; 0x08
		PORTB = b_light | t_light;
 474:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <b_light>
 478:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <t_light>
 47c:	89 2b       	or	r24, r25
 47e:	85 b9       	out	0x05, r24	; 5
TimerSet(GCD);
TimerOn();

unsigned short i;
while(1) {
    for ( i = 0; i < numTasks; i++ ) {   
 480:	ec 14       	cp	r14, r12
 482:	fd 04       	cpc	r15, r13
 484:	29 f6       	brne	.-118    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
            tasks[i]->elapsedTime = 0;
        }
        tasks[i]->elapsedTime += 1;
		PORTB = b_light | t_light;
    }
		while(!TimerFlag);
 486:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <TimerFlag>
 48a:	88 23       	and	r24, r24
 48c:	e1 f3       	breq	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	TimerFlag = 0;
 48e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <TimerFlag>
}
 492:	bb cf       	rjmp	.-138    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

00000494 <__udivmodsi4>:
 494:	a1 e2       	ldi	r26, 0x21	; 33
 496:	1a 2e       	mov	r1, r26
 498:	aa 1b       	sub	r26, r26
 49a:	bb 1b       	sub	r27, r27
 49c:	fd 01       	movw	r30, r26
 49e:	0d c0       	rjmp	.+26     	; 0x4ba <__udivmodsi4_ep>

000004a0 <__udivmodsi4_loop>:
 4a0:	aa 1f       	adc	r26, r26
 4a2:	bb 1f       	adc	r27, r27
 4a4:	ee 1f       	adc	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	a2 17       	cp	r26, r18
 4aa:	b3 07       	cpc	r27, r19
 4ac:	e4 07       	cpc	r30, r20
 4ae:	f5 07       	cpc	r31, r21
 4b0:	20 f0       	brcs	.+8      	; 0x4ba <__udivmodsi4_ep>
 4b2:	a2 1b       	sub	r26, r18
 4b4:	b3 0b       	sbc	r27, r19
 4b6:	e4 0b       	sbc	r30, r20
 4b8:	f5 0b       	sbc	r31, r21

000004ba <__udivmodsi4_ep>:
 4ba:	66 1f       	adc	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	1a 94       	dec	r1
 4c4:	69 f7       	brne	.-38     	; 0x4a0 <__udivmodsi4_loop>
 4c6:	60 95       	com	r22
 4c8:	70 95       	com	r23
 4ca:	80 95       	com	r24
 4cc:	90 95       	com	r25
 4ce:	9b 01       	movw	r18, r22
 4d0:	ac 01       	movw	r20, r24
 4d2:	bd 01       	movw	r22, r26
 4d4:	cf 01       	movw	r24, r30
 4d6:	08 95       	ret

000004d8 <_exit>:
 4d8:	f8 94       	cli

000004da <__stop_program>:
 4da:	ff cf       	rjmp	.-2      	; 0x4da <__stop_program>
