
clega001_jcent001_lab1_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800104  00800104  000004ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cfe  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000950  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050b  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f8  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	52 c1       	rjmp	.+676    	; 0x2da <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6a d1       	rcall	.+724    	; 0x398 <main>
  c4:	b6 c1       	rjmp	.+876    	; 0x432 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ToggleButton>:
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	b1 f0       	breq	.+44     	; 0xfa <ToggleButton+0x32>
  ce:	34 f4       	brge	.+12     	; 0xdc <ToggleButton+0x14>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	e1 f0       	breq	.+56     	; 0x10c <ToggleButton+0x44>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	91 05       	cpc	r25, r1
  d8:	69 f0       	breq	.+26     	; 0xf4 <ToggleButton+0x2c>
  da:	1d c0       	rjmp	.+58     	; 0x116 <ToggleButton+0x4e>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	19 f0       	breq	.+6      	; 0xe8 <ToggleButton+0x20>
  e2:	04 97       	sbiw	r24, 0x04	; 4
  e4:	21 f0       	breq	.+8      	; 0xee <ToggleButton+0x26>
  e6:	17 c0       	rjmp	.+46     	; 0x116 <ToggleButton+0x4e>
  e8:	00 9b       	sbis	0x00, 0	; 0
  ea:	18 c0       	rjmp	.+48     	; 0x11c <ToggleButton+0x54>
  ec:	09 c0       	rjmp	.+18     	; 0x100 <ToggleButton+0x38>
  ee:	00 99       	sbic	0x00, 0	; 0
  f0:	0d c0       	rjmp	.+26     	; 0x10c <ToggleButton+0x44>
  f2:	17 c0       	rjmp	.+46     	; 0x122 <ToggleButton+0x5a>
  f4:	00 99       	sbic	0x00, 0	; 0
  f6:	04 c0       	rjmp	.+8      	; 0x100 <ToggleButton+0x38>
  f8:	08 95       	ret
  fa:	00 99       	sbic	0x00, 0	; 0
  fc:	07 c0       	rjmp	.+14     	; 0x10c <ToggleButton+0x44>
  fe:	08 95       	ret
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <on_off>
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret
 10c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <on_off>
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret

00000128 <LightOn_OFF>:
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	91 05       	cpc	r25, r1
 12c:	31 f0       	breq	.+12     	; 0x13a <LightOn_OFF+0x12>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	91 05       	cpc	r25, r1
 132:	41 f0       	breq	.+16     	; 0x144 <LightOn_OFF+0x1c>
 134:	89 2b       	or	r24, r25
 136:	d1 f4       	brne	.+52     	; 0x16c <LightOn_OFF+0x44>
 138:	09 c0       	rjmp	.+18     	; 0x14c <LightOn_OFF+0x24>
 13a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <on_off>
 13e:	88 23       	and	r24, r24
 140:	69 f0       	breq	.+26     	; 0x15c <LightOn_OFF+0x34>
 142:	04 c0       	rjmp	.+8      	; 0x14c <LightOn_OFF+0x24>
 144:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <on_off>
 148:	81 11       	cpse	r24, r1
 14a:	08 c0       	rjmp	.+16     	; 0x15c <LightOn_OFF+0x34>
 14c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 150:	88 60       	ori	r24, 0x08	; 8
 152:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret
 15c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret
 16c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 170:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret

0000017a <LightStates>:
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	91 05       	cpc	r25, r1
 17e:	79 f0       	breq	.+30     	; 0x19e <LightStates+0x24>
 180:	1c f4       	brge	.+6      	; 0x188 <LightStates+0xe>
 182:	89 2b       	or	r24, r25
 184:	39 f0       	breq	.+14     	; 0x194 <LightStates+0x1a>
 186:	40 c0       	rjmp	.+128    	; 0x208 <LightStates+0x8e>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	91 05       	cpc	r25, r1
 18c:	69 f0       	breq	.+26     	; 0x1a8 <LightStates+0x2e>
 18e:	03 97       	sbiw	r24, 0x03	; 3
 190:	81 f0       	breq	.+32     	; 0x1b2 <LightStates+0x38>
 192:	3a c0       	rjmp	.+116    	; 0x208 <LightStates+0x8e>
 194:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <on_off>
 198:	81 11       	cpse	r24, r1
 19a:	36 c0       	rjmp	.+108    	; 0x208 <LightStates+0x8e>
 19c:	0e c0       	rjmp	.+28     	; 0x1ba <LightStates+0x40>
 19e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <on_off>
 1a2:	88 23       	and	r24, r24
 1a4:	b9 f0       	breq	.+46     	; 0x1d4 <LightStates+0x5a>
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <LightStates+0x40>
 1a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <on_off>
 1ac:	88 23       	and	r24, r24
 1ae:	f9 f0       	breq	.+62     	; 0x1ee <LightStates+0x74>
 1b0:	11 c0       	rjmp	.+34     	; 0x1d4 <LightStates+0x5a>
 1b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <on_off>
 1b6:	81 11       	cpse	r24, r1
 1b8:	1a c0       	rjmp	.+52     	; 0x1ee <LightStates+0x74>
 1ba:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 1be:	8b 7f       	andi	r24, 0xFB	; 251
 1c0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 1c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 1d8:	8e 7f       	andi	r24, 0xFE	; 254
 1da:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 1de:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 1f2:	8d 7f       	andi	r24, 0xFD	; 253
 1f4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 1f8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	08 95       	ret
 208:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
 20c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_B>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	08 95       	ret

00000216 <TimerOn>:
 216:	8b e0       	ldi	r24, 0x0B	; 11
 218:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 21c:	8d e7       	ldi	r24, 0x7D	; 125
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 224:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 22e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 232:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 242:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 246:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 24a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 24e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 252:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 256:	8f b7       	in	r24, 0x3f	; 63
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8f bf       	out	0x3f, r24	; 63
 25c:	08 95       	ret

0000025e <TimerISR>:
		port_B = port_B;
	}
	return state;
}
void TimerISR()
{
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ca e0       	ldi	r28, 0x0A	; 10
 26c:	d1 e0       	ldi	r29, 0x01	; 1
 26e:	0f 2e       	mov	r0, r31
 270:	fe e2       	ldi	r31, 0x2E	; 46
 272:	ef 2e       	mov	r14, r31
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	ff 2e       	mov	r15, r31
 278:	f0 2d       	mov	r31, r0
 27a:	8e 01       	movw	r16, r28
	unsigned char i;
	for (i = 0;i < tasksSize;++i)
	{
		if ((tasks[i].elapsedTime >= tasks[i].period))
 27c:	4e 81       	ldd	r20, Y+6	; 0x06
 27e:	5f 81       	ldd	r21, Y+7	; 0x07
 280:	68 85       	ldd	r22, Y+8	; 0x08
 282:	79 85       	ldd	r23, Y+9	; 0x09
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	9b 81       	ldd	r25, Y+3	; 0x03
 288:	ac 81       	ldd	r26, Y+4	; 0x04
 28a:	bd 81       	ldd	r27, Y+5	; 0x05
 28c:	48 17       	cp	r20, r24
 28e:	59 07       	cpc	r21, r25
 290:	6a 07       	cpc	r22, r26
 292:	7b 07       	cpc	r23, r27
 294:	58 f0       	brcs	.+22     	; 0x2ac <TimerISR+0x4e>
		{
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 296:	ea 85       	ldd	r30, Y+10	; 0x0a
 298:	fb 85       	ldd	r31, Y+11	; 0x0b
 29a:	88 81       	ld	r24, Y
 29c:	99 81       	ldd	r25, Y+1	; 0x01
 29e:	09 95       	icall
 2a0:	99 83       	std	Y+1, r25	; 0x01
 2a2:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 2a4:	1e 82       	std	Y+6, r1	; 0x06
 2a6:	1f 82       	std	Y+7, r1	; 0x07
 2a8:	18 86       	std	Y+8, r1	; 0x08
 2aa:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += PERIOD;
 2ac:	f8 01       	movw	r30, r16
 2ae:	86 81       	ldd	r24, Z+6	; 0x06
 2b0:	97 81       	ldd	r25, Z+7	; 0x07
 2b2:	a0 85       	ldd	r26, Z+8	; 0x08
 2b4:	b1 85       	ldd	r27, Z+9	; 0x09
 2b6:	c2 96       	adiw	r24, 0x32	; 50
 2b8:	a1 1d       	adc	r26, r1
 2ba:	b1 1d       	adc	r27, r1
 2bc:	86 83       	std	Z+6, r24	; 0x06
 2be:	97 83       	std	Z+7, r25	; 0x07
 2c0:	a0 87       	std	Z+8, r26	; 0x08
 2c2:	b1 87       	std	Z+9, r27	; 0x09
 2c4:	2c 96       	adiw	r28, 0x0c	; 12
	return state;
}
void TimerISR()
{
	unsigned char i;
	for (i = 0;i < tasksSize;++i)
 2c6:	ce 15       	cp	r28, r14
 2c8:	df 05       	cpc	r29, r15
 2ca:	b9 f6       	brne	.-82     	; 0x27a <TimerISR+0x1c>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += PERIOD;
	}
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	08 95       	ret

000002da <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 300:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 304:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 308:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 30c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	a1 09       	sbc	r26, r1
 314:	b1 09       	sbc	r27, r1
 316:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 31a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 31e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 322:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 326:	89 2b       	or	r24, r25
 328:	8a 2b       	or	r24, r26
 32a:	8b 2b       	or	r24, r27
 32c:	89 f4       	brne	.+34     	; 0x350 <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 32e:	97 df       	rcall	.-210    	; 0x25e <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 334:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 338:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 33c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 340:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 344:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 348:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 34c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	bf 91       	pop	r27
 356:	af 91       	pop	r26
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	7f 91       	pop	r23
 35e:	6f 91       	pop	r22
 360:	5f 91       	pop	r21
 362:	4f 91       	pop	r20
 364:	3f 91       	pop	r19
 366:	2f 91       	pop	r18
 368:	0f 90       	pop	r0
 36a:	0b be       	out	0x3b, r0	; 59
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 376:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 37a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 37e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 382:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 386:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 38a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 38e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 392:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 396:	08 95       	ret

00000398 <main>:
}


int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	84 b9       	out	0x04, r24	; 4
 39c:	15 b8       	out	0x05, r1	; 5
	DDRA = 0xF0; PORTA = 0x0F;
 39e:	90 ef       	ldi	r25, 0xF0	; 240
 3a0:	91 b9       	out	0x01, r25	; 1
 3a2:	9f e0       	ldi	r25, 0x0F	; 15
 3a4:	92 b9       	out	0x02, r25	; 2
	DDRC = 0xFF; PORTC = 0x00;
 3a6:	87 b9       	out	0x07, r24	; 7
 3a8:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 3aa:	8a b9       	out	0x0a, r24	; 10
 3ac:	1b b8       	out	0x0b, r1	; 11
	unsigned char i = 0;
	tasks[i].state = Start_one;
 3ae:	ea e0       	ldi	r30, 0x0A	; 10
 3b0:	f1 e0       	ldi	r31, 0x01	; 1
 3b2:	11 82       	std	Z+1, r1	; 0x01
 3b4:	10 82       	st	Z, r1
	tasks[i].period = 500;
 3b6:	84 ef       	ldi	r24, 0xF4	; 244
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	a0 e0       	ldi	r26, 0x00	; 0
 3bc:	b0 e0       	ldi	r27, 0x00	; 0
 3be:	82 83       	std	Z+2, r24	; 0x02
 3c0:	93 83       	std	Z+3, r25	; 0x03
 3c2:	a4 83       	std	Z+4, r26	; 0x04
 3c4:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].elapsedTime = 0;
 3c6:	16 82       	std	Z+6, r1	; 0x06
 3c8:	17 82       	std	Z+7, r1	; 0x07
 3ca:	10 86       	std	Z+8, r1	; 0x08
 3cc:	11 86       	std	Z+9, r1	; 0x09
	tasks[i].TickFct = &LightStates;
 3ce:	8d eb       	ldi	r24, 0xBD	; 189
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	93 87       	std	Z+11, r25	; 0x0b
 3d4:	82 87       	std	Z+10, r24	; 0x0a
	i++;
	tasks[i].state = Start;
 3d6:	15 86       	std	Z+13, r1	; 0x0d
 3d8:	14 86       	std	Z+12, r1	; 0x0c
	tasks[i].period = 1000;
 3da:	88 ee       	ldi	r24, 0xE8	; 232
 3dc:	93 e0       	ldi	r25, 0x03	; 3
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	86 87       	std	Z+14, r24	; 0x0e
 3e4:	97 87       	std	Z+15, r25	; 0x0f
 3e6:	a0 8b       	std	Z+16, r26	; 0x10
 3e8:	b1 8b       	std	Z+17, r27	; 0x11
	tasks[i].elapsedTime = 0;
 3ea:	12 8a       	std	Z+18, r1	; 0x12
 3ec:	13 8a       	std	Z+19, r1	; 0x13
 3ee:	14 8a       	std	Z+20, r1	; 0x14
 3f0:	15 8a       	std	Z+21, r1	; 0x15
	tasks[i].TickFct = &LightOn_OFF;
 3f2:	84 e9       	ldi	r24, 0x94	; 148
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	97 8b       	std	Z+23, r25	; 0x17
 3f8:	86 8b       	std	Z+22, r24	; 0x16
	i++;
	tasks[i].state = Start_On;
 3fa:	11 8e       	std	Z+25, r1	; 0x19
 3fc:	10 8e       	std	Z+24, r1	; 0x18
	tasks[i].period = 50;
 3fe:	82 e3       	ldi	r24, 0x32	; 50
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	a0 e0       	ldi	r26, 0x00	; 0
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	82 8f       	std	Z+26, r24	; 0x1a
 408:	93 8f       	std	Z+27, r25	; 0x1b
 40a:	a4 8f       	std	Z+28, r26	; 0x1c
 40c:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].elapsedTime = 0;
 40e:	16 8e       	std	Z+30, r1	; 0x1e
 410:	17 8e       	std	Z+31, r1	; 0x1f
 412:	10 a2       	std	Z+32, r1	; 0x20
 414:	11 a2       	std	Z+33, r1	; 0x21
	tasks[i].TickFct = &ToggleButton;
 416:	84 e6       	ldi	r24, 0x64	; 100
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	93 a3       	std	Z+35, r25	; 0x23
 41c:	82 a3       	std	Z+34, r24	; 0x22
	TimerSet(PERIOD);
 41e:	62 e3       	ldi	r22, 0x32	; 50
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	a7 df       	rcall	.-178    	; 0x376 <TimerSet>
	TimerOn();
 428:	f6 de       	rcall	.-532    	; 0x216 <TimerOn>
 42a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_B>
	while(1)
	{
		PORTB = port_B;
 42e:	85 b9       	out	0x05, r24	; 5
 430:	fc cf       	rjmp	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
