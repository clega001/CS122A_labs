
lab7_resistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000286  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b92  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009eb  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  00001985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000539  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000297  00000000  00000000  000023ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	92 c0       	rjmp	.+292    	; 0x15a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	92 d0       	rcall	.+292    	; 0x1e8 <main>
  c4:	de c0       	rjmp	.+444    	; 0x282 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SM1Tick>:
	SPDR = cData;
	/*Wait for transmission complete*/
	//while(!(SPSR & (1<<SPIF)))
	;

}
  c8:	02 97       	sbiw	r24, 0x02	; 2
  ca:	78 f4       	brcc	.+30     	; 0xea <SM1Tick+0x22>
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tmp+0x1>
  d8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmp>
  dc:	88 b9       	out	0x08, r24	; 8
  de:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmp>
  e2:	8e bd       	out	0x2e, r24	; 46
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

000000f0 <TimerSet>:
  f0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  f4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 100:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
 104:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
 108:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
 10c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
 110:	08 95       	ret

00000112 <TimerOn>:
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 118:	8d e7       	ldi	r24, 0x7D	; 125
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 13a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 13e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 142:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 146:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 14a:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 14e:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 152:	8f b7       	in	r24, 0x3f	; 63
 154:	80 68       	ori	r24, 0x80	; 128
 156:	8f bf       	out	0x3f, r24	; 63
 158:	08 95       	ret

0000015a <__vector_13>:
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 170:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 174:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 178:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	a1 09       	sbc	r26, r1
 180:	b1 09       	sbc	r27, r1
 182:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 186:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 18a:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 18e:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 192:	89 2b       	or	r24, r25
 194:	8a 2b       	or	r24, r26
 196:	8b 2b       	or	r24, r27
 198:	99 f4       	brne	.+38     	; 0x1c0 <__vector_13+0x66>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ac:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1b0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 1b4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 1b8:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 1bc:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <ADC_init>:
 1d2:	ea e7       	ldi	r30, 0x7A	; 122
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 6e       	ori	r24, 0xE0	; 224
 1da:	80 83       	st	Z, r24
 1dc:	08 95       	ret

000001de <SPI_SlaveInit>:
 1de:	80 e5       	ldi	r24, 0x50	; 80
 1e0:	85 b9       	out	0x05, r24	; 5
 1e2:	80 e4       	ldi	r24, 0x40	; 64
 1e4:	8c bd       	out	0x2c, r24	; 44
 1e6:	08 95       	ret

000001e8 <main>:
// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
	DDRA = 0x00; PORTA = 0xFF;
 1e8:	11 b8       	out	0x01, r1	; 1
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 1ee:	87 b9       	out	0x07, r24	; 7
 1f0:	18 b8       	out	0x08, r1	; 8
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 1f2:	e4 e0       	ldi	r30, 0x04	; 4
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	80 83       	st	Z, r24
	task1.period = SMTick1_period;//Task Period.
 1f8:	88 ee       	ldi	r24, 0xE8	; 232
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	a0 e0       	ldi	r26, 0x00	; 0
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	81 83       	std	Z+1, r24	; 0x01
 202:	92 83       	std	Z+2, r25	; 0x02
 204:	a3 83       	std	Z+3, r26	; 0x03
 206:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 208:	85 83       	std	Z+5, r24	; 0x05
 20a:	96 83       	std	Z+6, r25	; 0x06
 20c:	a7 83       	std	Z+7, r26	; 0x07
 20e:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SM1Tick;//Function pointer for the tick.
 210:	84 e6       	ldi	r24, 0x64	; 100
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	92 87       	std	Z+10, r25	; 0x0a
 216:	81 87       	std	Z+9, r24	; 0x09


	// Set the timer and turn it on
	TimerSet(GCD);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	67 df       	rcall	.-306    	; 0xf0 <TimerSet>
	TimerOn();
 222:	77 df       	rcall	.-274    	; 0x112 <TimerOn>
	
	ADC_init();
 224:	d6 df       	rcall	.-84     	; 0x1d2 <ADC_init>
 226:	db df       	rcall	.-74     	; 0x1de <SPI_SlaveInit>
	SPI_SlaveInit();
 228:	c4 e0       	ldi	r28, 0x04	; 4
 22a:	d1 e0       	ldi	r29, 0x01	; 1
		
	unsigned short i;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 22c:	4d 81       	ldd	r20, Y+5	; 0x05
 22e:	5e 81       	ldd	r21, Y+6	; 0x06
 230:	6f 81       	ldd	r22, Y+7	; 0x07
 232:	78 85       	ldd	r23, Y+8	; 0x08
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	9a 81       	ldd	r25, Y+2	; 0x02
 238:	ab 81       	ldd	r26, Y+3	; 0x03
 23a:	bc 81       	ldd	r27, Y+4	; 0x04
 23c:	48 17       	cp	r20, r24
 23e:	59 07       	cpc	r21, r25
 240:	6a 07       	cpc	r22, r26
 242:	7b 07       	cpc	r23, r27
 244:	61 f4       	brne	.+24     	; 0x25e <main+0x76>
 246:	88 81       	ld	r24, Y
 248:	e9 85       	ldd	r30, Y+9	; 0x09
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 24a:	fa 85       	ldd	r31, Y+10	; 0x0a
 24c:	08 2e       	mov	r0, r24
 24e:	00 0c       	add	r0, r0
 250:	99 0b       	sbc	r25, r25
 252:	09 95       	icall
 254:	88 83       	st	Y, r24
 256:	1d 82       	std	Y+5, r1	; 0x05
 258:	1e 82       	std	Y+6, r1	; 0x06
				tasks[i]->elapsedTime = 0;
 25a:	1f 82       	std	Y+7, r1	; 0x07
 25c:	18 86       	std	Y+8, r1	; 0x08
 25e:	8d 81       	ldd	r24, Y+5	; 0x05
 260:	9e 81       	ldd	r25, Y+6	; 0x06
			}
			tasks[i]->elapsedTime += 1;
 262:	af 81       	ldd	r26, Y+7	; 0x07
 264:	b8 85       	ldd	r27, Y+8	; 0x08
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	a1 1d       	adc	r26, r1
 26a:	b1 1d       	adc	r27, r1
 26c:	8d 83       	std	Y+5, r24	; 0x05
 26e:	9e 83       	std	Y+6, r25	; 0x06
 270:	af 83       	std	Y+7, r26	; 0x07
 272:	b8 87       	std	Y+8, r27	; 0x08
 274:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
		}
		while(!TimerFlag);
 278:	88 23       	and	r24, r24
 27a:	e1 f3       	breq	.-8      	; 0x274 <main+0x8c>
 27c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
		TimerFlag = 0;
 280:	d5 cf       	rjmp	.-86     	; 0x22c <main+0x44>

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
	}
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
