
clega001_jcent001_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000684  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080011c  0080011c  00000734  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108f  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2e  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b3  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000682  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006df  00000000  00000000  00003412  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003af1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 34       	cpi	r26, 0x41	; 65
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	df d1       	rcall	.+958    	; 0x482 <main>
  c4:	dd c2       	rjmp	.+1466   	; 0x680 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
        if(c==0){return b;}
        a = b;
b = c;
    }
    return 0;
}
  c8:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
  cc:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
  d0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
  d4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
  d8:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <_avr_timer_cntcurr>
  dc:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <_avr_timer_cntcurr+0x1>
  e0:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_avr_timer_cntcurr+0x2>
  e4:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 10e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 112:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 116:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 11a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_avr_timer_cntcurr>
 11e:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <_avr_timer_cntcurr+0x1>
 122:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <_avr_timer_cntcurr+0x2>
 126:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <_avr_timer_cntcurr>
 148:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <_avr_timer_cntcurr+0x1>
 14c:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <_avr_timer_cntcurr+0x2>
 150:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_avr_timer_cntcurr>
 15e:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <_avr_timer_cntcurr+0x1>
 162:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <_avr_timer_cntcurr+0x2>
 166:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <TimerFlag>
 178:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 17c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 180:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 184:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 188:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_avr_timer_cntcurr>
 18c:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <_avr_timer_cntcurr+0x1>
 190:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <_avr_timer_cntcurr+0x2>
 194:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <GetKeypadKey>:
 1aa:	8f ee       	ldi	r24, 0xEF	; 239
 1ac:	82 b9       	out	0x02, r24	; 2
 1ae:	00 00       	nop
 1b0:	00 9b       	sbis	0x00, 0	; 0
 1b2:	29 c0       	rjmp	.+82     	; 0x206 <GetKeypadKey+0x5c>
 1b4:	01 9b       	sbis	0x00, 1	; 0
 1b6:	29 c0       	rjmp	.+82     	; 0x20a <GetKeypadKey+0x60>
 1b8:	02 9b       	sbis	0x00, 2	; 0
 1ba:	29 c0       	rjmp	.+82     	; 0x20e <GetKeypadKey+0x64>
 1bc:	03 9b       	sbis	0x00, 3	; 0
 1be:	29 c0       	rjmp	.+82     	; 0x212 <GetKeypadKey+0x68>
 1c0:	8f ed       	ldi	r24, 0xDF	; 223
 1c2:	82 b9       	out	0x02, r24	; 2
 1c4:	00 00       	nop
 1c6:	00 9b       	sbis	0x00, 0	; 0
 1c8:	26 c0       	rjmp	.+76     	; 0x216 <GetKeypadKey+0x6c>
 1ca:	01 9b       	sbis	0x00, 1	; 0
 1cc:	26 c0       	rjmp	.+76     	; 0x21a <GetKeypadKey+0x70>
 1ce:	02 9b       	sbis	0x00, 2	; 0
 1d0:	26 c0       	rjmp	.+76     	; 0x21e <GetKeypadKey+0x74>
 1d2:	03 9b       	sbis	0x00, 3	; 0
 1d4:	26 c0       	rjmp	.+76     	; 0x222 <GetKeypadKey+0x78>
 1d6:	8f eb       	ldi	r24, 0xBF	; 191
 1d8:	82 b9       	out	0x02, r24	; 2
 1da:	00 00       	nop
 1dc:	00 9b       	sbis	0x00, 0	; 0
 1de:	23 c0       	rjmp	.+70     	; 0x226 <GetKeypadKey+0x7c>
 1e0:	01 9b       	sbis	0x00, 1	; 0
 1e2:	23 c0       	rjmp	.+70     	; 0x22a <GetKeypadKey+0x80>
 1e4:	02 9b       	sbis	0x00, 2	; 0
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <GetKeypadKey+0x84>
 1e8:	03 9b       	sbis	0x00, 3	; 0
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <GetKeypadKey+0x88>
 1ec:	8f e7       	ldi	r24, 0x7F	; 127
 1ee:	82 b9       	out	0x02, r24	; 2
 1f0:	00 00       	nop
 1f2:	00 9b       	sbis	0x00, 0	; 0
 1f4:	20 c0       	rjmp	.+64     	; 0x236 <GetKeypadKey+0x8c>
 1f6:	01 9b       	sbis	0x00, 1	; 0
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <GetKeypadKey+0x90>
 1fa:	02 9b       	sbis	0x00, 2	; 0
 1fc:	20 c0       	rjmp	.+64     	; 0x23e <GetKeypadKey+0x94>
 1fe:	03 9b       	sbis	0x00, 3	; 0
 200:	20 c0       	rjmp	.+64     	; 0x242 <GetKeypadKey+0x98>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	08 95       	ret
 20a:	84 e3       	ldi	r24, 0x34	; 52
 20c:	08 95       	ret
 20e:	87 e3       	ldi	r24, 0x37	; 55
 210:	08 95       	ret
 212:	8a e2       	ldi	r24, 0x2A	; 42
 214:	08 95       	ret
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	08 95       	ret
 21a:	85 e3       	ldi	r24, 0x35	; 53
 21c:	08 95       	ret
 21e:	88 e3       	ldi	r24, 0x38	; 56
 220:	08 95       	ret
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	08 95       	ret
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	08 95       	ret
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	08 95       	ret
 22e:	89 e3       	ldi	r24, 0x39	; 57
 230:	08 95       	ret
 232:	83 e2       	ldi	r24, 0x23	; 35
 234:	08 95       	ret
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	08 95       	ret
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	08 95       	ret
 23e:	83 e4       	ldi	r24, 0x43	; 67
 240:	08 95       	ret
 242:	84 e4       	ldi	r24, 0x44	; 68
 244:	08 95       	ret

00000246 <delay_ms>:
 246:	18 16       	cp	r1, r24
 248:	19 06       	cpc	r1, r25
 24a:	5c f0       	brlt	.+22     	; 0x262 <delay_ms+0x1c>
 24c:	08 95       	ret
 24e:	00 00       	nop
 250:	21 50       	subi	r18, 0x01	; 1
 252:	31 09       	sbc	r19, r1
 254:	e1 f7       	brne	.-8      	; 0x24e <delay_ms+0x8>
 256:	4f 5f       	subi	r20, 0xFF	; 255
 258:	5f 4f       	sbci	r21, 0xFF	; 255
 25a:	84 17       	cp	r24, r20
 25c:	95 07       	cpc	r25, r21
 25e:	19 f4       	brne	.+6      	; 0x266 <delay_ms+0x20>
 260:	08 95       	ret
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	27 e0       	ldi	r18, 0x07	; 7
 268:	33 e0       	ldi	r19, 0x03	; 3
 26a:	f1 cf       	rjmp	.-30     	; 0x24e <delay_ms+0x8>

0000026c <LCD_WriteCommand>:
 26c:	5e 98       	cbi	0x0b, 6	; 11
 26e:	88 b9       	out	0x08, r24	; 8
 270:	5f 9a       	sbi	0x0b, 7	; 11
 272:	00 00       	nop
 274:	5f 98       	cbi	0x0b, 7	; 11
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	e5 cf       	rjmp	.-54     	; 0x246 <delay_ms>
 27c:	08 95       	ret

0000027e <LCD_ClearScreen>:
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	f5 cf       	rjmp	.-22     	; 0x26c <LCD_WriteCommand>
 282:	08 95       	ret

00000284 <LCD_Cursor>:
 284:	81 31       	cpi	r24, 0x11	; 17
 286:	18 f4       	brcc	.+6      	; 0x28e <LCD_Cursor+0xa>
 288:	81 58       	subi	r24, 0x81	; 129
 28a:	f0 cf       	rjmp	.-32     	; 0x26c <LCD_WriteCommand>
 28c:	08 95       	ret
 28e:	81 55       	subi	r24, 0x51	; 81
 290:	ed cf       	rjmp	.-38     	; 0x26c <LCD_WriteCommand>
 292:	08 95       	ret

00000294 <LCD_init>:
 294:	84 e6       	ldi	r24, 0x64	; 100
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	d6 df       	rcall	.-84     	; 0x246 <delay_ms>
 29a:	88 e3       	ldi	r24, 0x38	; 56
 29c:	e7 df       	rcall	.-50     	; 0x26c <LCD_WriteCommand>
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	e5 df       	rcall	.-54     	; 0x26c <LCD_WriteCommand>
 2a2:	8f e0       	ldi	r24, 0x0F	; 15
 2a4:	e3 df       	rcall	.-58     	; 0x26c <LCD_WriteCommand>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	e1 df       	rcall	.-62     	; 0x26c <LCD_WriteCommand>
 2aa:	8a e0       	ldi	r24, 0x0A	; 10
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	cb cf       	rjmp	.-106    	; 0x246 <delay_ms>
 2b0:	08 95       	ret

000002b2 <LCD_WriteData>:
 2b2:	5e 9a       	sbi	0x0b, 6	; 11
 2b4:	88 b9       	out	0x08, r24	; 8
 2b6:	5f 9a       	sbi	0x0b, 7	; 11
 2b8:	00 00       	nop
 2ba:	5f 98       	cbi	0x0b, 7	; 11
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	c2 cf       	rjmp	.-124    	; 0x246 <delay_ms>
 2c2:	08 95       	ret

000002c4 <LCD_DisplayString>:
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	18 2f       	mov	r17, r24
 2ce:	eb 01       	movw	r28, r22
 2d0:	d6 df       	rcall	.-84     	; 0x27e <LCD_ClearScreen>
 2d2:	88 81       	ld	r24, Y
 2d4:	88 23       	and	r24, r24
 2d6:	51 f0       	breq	.+20     	; 0x2ec <LCD_DisplayString+0x28>
 2d8:	01 e0       	ldi	r16, 0x01	; 1
 2da:	01 0f       	add	r16, r17
 2dc:	81 2f       	mov	r24, r17
 2de:	d2 df       	rcall	.-92     	; 0x284 <LCD_Cursor>
 2e0:	89 91       	ld	r24, Y+
 2e2:	e7 df       	rcall	.-50     	; 0x2b2 <LCD_WriteData>
 2e4:	10 2f       	mov	r17, r16
 2e6:	88 81       	ld	r24, Y
 2e8:	81 11       	cpse	r24, r1
 2ea:	f6 cf       	rjmp	.-20     	; 0x2d8 <LCD_DisplayString+0x14>
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	08 95       	ret

000002f6 <TickFct_LCD>:
 2f6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <l_state>
 2fa:	88 23       	and	r24, r24
 2fc:	19 f0       	breq	.+6      	; 0x304 <TickFct_LCD+0xe>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	59 f0       	breq	.+22     	; 0x318 <TickFct_LCD+0x22>
 302:	04 c0       	rjmp	.+8      	; 0x30c <TickFct_LCD+0x16>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <l_state>
 30a:	06 c0       	rjmp	.+12     	; 0x318 <TickFct_LCD+0x22>
 30c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <l_state>
 310:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <l_state>
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	08 95       	ret
 318:	65 e0       	ldi	r22, 0x05	; 5
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	d2 df       	rcall	.-92     	; 0x2c4 <LCD_DisplayString>
 320:	87 e0       	ldi	r24, 0x07	; 7
 322:	b0 df       	rcall	.-160    	; 0x284 <LCD_Cursor>
 324:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <dis_pat>
 328:	80 5d       	subi	r24, 0xD0	; 208
 32a:	c3 df       	rcall	.-122    	; 0x2b2 <LCD_WriteData>
 32c:	8f e0       	ldi	r24, 0x0F	; 15
 32e:	aa df       	rcall	.-172    	; 0x284 <LCD_Cursor>
 330:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <dis_spd>
 334:	80 5d       	subi	r24, 0xD0	; 208
 336:	bd df       	rcall	.-134    	; 0x2b2 <LCD_WriteData>
 338:	87 e1       	ldi	r24, 0x17	; 23
 33a:	a4 df       	rcall	.-184    	; 0x284 <LCD_Cursor>
 33c:	81 e3       	ldi	r24, 0x31	; 49
 33e:	b9 df       	rcall	.-142    	; 0x2b2 <LCD_WriteData>
 340:	e7 cf       	rjmp	.-50     	; 0x310 <TickFct_LCD+0x1a>

00000342 <SPI_MasterInit>:
//Master
void SPI_MasterInit(void){
	/* Set MOSI and SCK output, all others input */
	
	/*DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK); */
	DDRB = (1<<DDRB4)|(1<<DDRB5)|(1<<DDRB7);
 342:	80 eb       	ldi	r24, 0xB0	; 176
 344:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 346:	81 e5       	ldi	r24, 0x51	; 81
 348:	8c bd       	out	0x2c, r24	; 44
 34a:	08 95       	ret

0000034c <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData){
	/* Start transmission */
	SPDR = cData;
 34c:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 34e:	0d b4       	in	r0, 0x2d	; 45
 350:	07 fe       	sbrs	r0, 7
 352:	fd cf       	rjmp	.-6      	; 0x34e <SPI_MasterTransmit+0x2>
	;
}
 354:	08 95       	ret

00000356 <TickFct_Keypad>:
//--------User defined FSMs---------------------------------------------------
enum Master_States{m_start} m_state;

enum Keypad_States{k_start, wait, Key_In} k_state;
int TickFct_Keypad(int state){
	x = GetKeypadKey();
 356:	29 df       	rcall	.-430    	; 0x1aa <GetKeypadKey>
 358:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <x>
	
	switch(k_state){
 35c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <k_state>
 360:	91 30       	cpi	r25, 0x01	; 1
 362:	41 f0       	breq	.+16     	; 0x374 <TickFct_Keypad+0x1e>
 364:	18 f0       	brcs	.+6      	; 0x36c <TickFct_Keypad+0x16>
 366:	92 30       	cpi	r25, 0x02	; 2
 368:	91 f0       	breq	.+36     	; 0x38e <TickFct_Keypad+0x38>
 36a:	15 c0       	rjmp	.+42     	; 0x396 <TickFct_Keypad+0x40>
		case k_start:
			k_state = wait;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <k_state>
			break;
 372:	83 c0       	rjmp	.+262    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		case wait:
			if(x != 0x1F){
 374:	8f 31       	cpi	r24, 0x1F	; 31
 376:	09 f4       	brne	.+2      	; 0x37a <TickFct_Keypad+0x24>
 378:	80 c0       	rjmp	.+256    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				k_state = Key_In;
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <k_state>
		case k_start:
			break;
		case wait:
			break;
		case Key_In:
			key = x;
 380:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <key>
			x = 0;
 384:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <x>
			
			//Set upper and lower bits
			if(key == '1'){
 388:	81 33       	cpi	r24, 0x31	; 49
 38a:	71 f4       	brne	.+28     	; 0x3a8 <TickFct_Keypad+0x52>
 38c:	07 c0       	rjmp	.+14     	; 0x39c <TickFct_Keypad+0x46>
			else{
				k_state = wait;
				break;
			}
		case Key_In:
			k_state = wait;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <k_state>
			break;
 394:	72 c0       	rjmp	.+228    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		default:
			k_state = k_start;
 396:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <k_state>
			break;
 39a:	6f c0       	rjmp	.+222    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			key = x;
			x = 0;
			
			//Set upper and lower bits
			if(key == '1'){
				dis_spd = 1;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dis_spd>
				speed = 0x01;
 3a2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <speed>
 3a6:	5d c0       	rjmp	.+186    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == '2'){
 3a8:	82 33       	cpi	r24, 0x32	; 50
 3aa:	31 f4       	brne	.+12     	; 0x3b8 <TickFct_Keypad+0x62>
				dis_spd = 2;
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dis_spd>
				speed = 0x02;
 3b2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <speed>
 3b6:	55 c0       	rjmp	.+170    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == '3'){
 3b8:	83 33       	cpi	r24, 0x33	; 51
 3ba:	31 f4       	brne	.+12     	; 0x3c8 <TickFct_Keypad+0x72>
				dis_spd = 3;
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dis_spd>
				speed = 0x03;
 3c2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <speed>
 3c6:	4d c0       	rjmp	.+154    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == '4'){
 3c8:	84 33       	cpi	r24, 0x34	; 52
 3ca:	31 f4       	brne	.+12     	; 0x3d8 <TickFct_Keypad+0x82>
				dis_spd = 4;
 3cc:	84 e0       	ldi	r24, 0x04	; 4
 3ce:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dis_spd>
				speed = 0x04;
 3d2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <speed>
 3d6:	45 c0       	rjmp	.+138    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == '5'){
 3d8:	85 33       	cpi	r24, 0x35	; 53
 3da:	31 f4       	brne	.+12     	; 0x3e8 <TickFct_Keypad+0x92>
				dis_spd = 5;
 3dc:	85 e0       	ldi	r24, 0x05	; 5
 3de:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dis_spd>
				speed = 0x05;
 3e2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <speed>
 3e6:	3d c0       	rjmp	.+122    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == '6'){
 3e8:	86 33       	cpi	r24, 0x36	; 54
 3ea:	31 f4       	brne	.+12     	; 0x3f8 <TickFct_Keypad+0xa2>
				dis_spd = 6;
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dis_spd>
				speed = 0x06;
 3f2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <speed>
 3f6:	35 c0       	rjmp	.+106    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == '7'){
 3f8:	87 33       	cpi	r24, 0x37	; 55
 3fa:	21 f4       	brne	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
				dis_uC = 1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 402:	2f c0       	rjmp	.+94     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == '8'){
 404:	88 33       	cpi	r24, 0x38	; 56
 406:	21 f4       	brne	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				dis_uC = 2;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 40e:	29 c0       	rjmp	.+82     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == '9'){
 410:	89 33       	cpi	r24, 0x39	; 57
 412:	21 f4       	brne	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				dis_uC = 3;
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 41a:	23 c0       	rjmp	.+70     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == 'A'){
 41c:	81 34       	cpi	r24, 0x41	; 65
 41e:	39 f4       	brne	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				dis_pat = 1;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <dis_pat>
				pattern = 0x0A;
 426:	8a e0       	ldi	r24, 0x0A	; 10
 428:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <pattern>
 42c:	1a c0       	rjmp	.+52     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == 'B'){
 42e:	82 34       	cpi	r24, 0x42	; 66
 430:	39 f4       	brne	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				dis_pat = 2;
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <dis_pat>
				pattern = 0x0B;
 438:	8b e0       	ldi	r24, 0x0B	; 11
 43a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <pattern>
 43e:	11 c0       	rjmp	.+34     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == 'C'){
 440:	83 34       	cpi	r24, 0x43	; 67
 442:	39 f4       	brne	.+14     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				dis_pat = 3;
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <dis_pat>
				pattern = 0x0C;
 44a:	8c e0       	ldi	r24, 0x0C	; 12
 44c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <pattern>
 450:	08 c0       	rjmp	.+16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else if(key == 'D'){
 452:	84 34       	cpi	r24, 0x44	; 68
 454:	31 f4       	brne	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				dis_pat = 4;
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <dis_pat>
				pattern = 0x0D;
 45c:	8d e0       	ldi	r24, 0x0D	; 13
 45e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <pattern>
			}
			
			//Test
			tmp = (pattern << 4) | speed;
 462:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <pattern>
 466:	20 e1       	ldi	r18, 0x10	; 16
 468:	82 9f       	mul	r24, r18
 46a:	c0 01       	movw	r24, r0
 46c:	11 24       	eor	r1, r1
 46e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <speed>
 472:	89 2b       	or	r24, r25
 474:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <tmp>
			SPI_MasterTransmit(tmp);
 478:	69 df       	rcall	.-302    	; 0x34c <SPI_MasterTransmit>
			break;
	}
	return k_state;
 47a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <k_state>
}
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	08 95       	ret

00000482 <main>:
}
// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	00 d0       	rcall	.+0      	; 0x488 <main+0x6>
 488:	00 d0       	rcall	.+0      	; 0x48a <main+0x8>
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
// Set Data Direction Registers
// Buttons PORTA[0-7], set AVR PORTA to pull down logic
DDRA = 0xF0; PORTA = 0x0F;
 48e:	90 ef       	ldi	r25, 0xF0	; 240
 490:	91 b9       	out	0x01, r25	; 1
 492:	8f e0       	ldi	r24, 0x0F	; 15
 494:	82 b9       	out	0x02, r24	; 2
DDRB = 0xFF; PORTB = 0x00;
 496:	2f ef       	ldi	r18, 0xFF	; 255
 498:	24 b9       	out	0x04, r18	; 4
 49a:	15 b8       	out	0x05, r1	; 5
DDRC = 0xFF; PORTC = 0x00;
 49c:	27 b9       	out	0x07, r18	; 7
 49e:	18 b8       	out	0x08, r1	; 8
DDRD = 0xF0; PORTD = 0x0F;
 4a0:	9a b9       	out	0x0a, r25	; 10
 4a2:	8b b9       	out	0x0b, r24	; 11
 4a4:	0f 2e       	mov	r0, r31
 4a6:	fa e0       	ldi	r31, 0x0A	; 10
 4a8:	cf 2e       	mov	r12, r31
 4aa:	d1 2c       	mov	r13, r1
 4ac:	e1 2c       	mov	r14, r1
 4ae:	f1 2c       	mov	r15, r1
 4b0:	f0 2d       	mov	r31, r0
 4b2:	31 e0       	ldi	r19, 0x01	; 1
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 4ba:	63 2f       	mov	r22, r19
 4bc:	72 2f       	mov	r23, r18
 4be:	a7 01       	movw	r20, r14
 4c0:	96 01       	movw	r18, r12
 4c2:	bc d0       	rcall	.+376    	; 0x63c <__udivmodsi4>
 4c4:	58 2f       	mov	r21, r24
 4c6:	49 2f       	mov	r20, r25
        if(c==0){return b;}
        a = b;
 4c8:	3c 2d       	mov	r19, r12
 4ca:	2d 2d       	mov	r18, r13
 4cc:	8e 2d       	mov	r24, r14
 4ce:	9f 2d       	mov	r25, r15
b = c;
 4d0:	c6 2e       	mov	r12, r22
 4d2:	d7 2e       	mov	r13, r23
 4d4:	e5 2e       	mov	r14, r21
 4d6:	f4 2e       	mov	r15, r20
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
 4d8:	c1 14       	cp	r12, r1
 4da:	d1 04       	cpc	r13, r1
 4dc:	e1 04       	cpc	r14, r1
 4de:	f1 04       	cpc	r15, r1
 4e0:	61 f7       	brne	.-40     	; 0x4ba <main+0x38>
 4e2:	0f 2e       	mov	r0, r31
 4e4:	f8 ee       	ldi	r31, 0xE8	; 232
 4e6:	ef 2e       	mov	r14, r31
 4e8:	f0 2d       	mov	r31, r0
 4ea:	0f 2e       	mov	r0, r31
 4ec:	f3 e0       	ldi	r31, 0x03	; 3
 4ee:	ff 2e       	mov	r15, r31
 4f0:	f0 2d       	mov	r31, r0
 4f2:	00 e0       	ldi	r16, 0x00	; 0
 4f4:	10 e0       	ldi	r17, 0x00	; 0
 4f6:	5a e0       	ldi	r21, 0x0A	; 10
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <main+0x86>
        a = b;
b = c;
 500:	e6 2e       	mov	r14, r22
 502:	f7 2e       	mov	r15, r23
 504:	08 2f       	mov	r16, r24
 506:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 508:	65 2f       	mov	r22, r21
 50a:	74 2f       	mov	r23, r20
 50c:	83 2f       	mov	r24, r19
 50e:	92 2f       	mov	r25, r18
 510:	2e 2d       	mov	r18, r14
 512:	3f 2d       	mov	r19, r15
 514:	40 2f       	mov	r20, r16
 516:	51 2f       	mov	r21, r17
 518:	91 d0       	rcall	.+290    	; 0x63c <__udivmodsi4>
 51a:	5e 2d       	mov	r21, r14
 51c:	4f 2d       	mov	r20, r15
 51e:	30 2f       	mov	r19, r16
 520:	21 2f       	mov	r18, r17
        if(c==0){return b;}
 522:	61 15       	cp	r22, r1
 524:	71 05       	cpc	r23, r1
 526:	81 05       	cpc	r24, r1
 528:	91 05       	cpc	r25, r1
 52a:	51 f7       	brne	.-44     	; 0x500 <main+0x7e>

//Greatest common divisor for all tasks or smallest time unit for tasks.
unsigned long int GCD = tmpGCD;

//Recalculate GCD periods for scheduler
unsigned long int SMTick1_period = SMTick1_calc/GCD;
 52c:	6a e0       	ldi	r22, 0x0A	; 10
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	2e 2d       	mov	r18, r14
 536:	3f 2d       	mov	r19, r15
 538:	40 2f       	mov	r20, r16
 53a:	51 2f       	mov	r21, r17
 53c:	7f d0       	rcall	.+254    	; 0x63c <__udivmodsi4>
 53e:	49 01       	movw	r8, r18
 540:	5a 01       	movw	r10, r20
unsigned long int SMTick2_period = SMTick2_calc/GCD;
 542:	68 ee       	ldi	r22, 0xE8	; 232
 544:	73 e0       	ldi	r23, 0x03	; 3
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	2e 2d       	mov	r18, r14
 54c:	3f 2d       	mov	r19, r15
 54e:	40 2f       	mov	r20, r16
 550:	51 2f       	mov	r21, r17
 552:	74 d0       	rcall	.+232    	; 0x63c <__udivmodsi4>

//Declare an array of tasks 
static task task1, task2;
task *tasks[] = {&task1, &task2};
 554:	a7 e2       	ldi	r26, 0x27	; 39
 556:	b1 e0       	ldi	r27, 0x01	; 1
 558:	ba 83       	std	Y+2, r27	; 0x02
 55a:	a9 83       	std	Y+1, r26	; 0x01
 55c:	ec e1       	ldi	r30, 0x1C	; 28
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	fc 83       	std	Y+4, r31	; 0x04
 562:	eb 83       	std	Y+3, r30	; 0x03
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

// Task 1
task1.state = -1;//Task initial state.
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	8c 93       	st	X, r24
task1.period = SMTick1_period;//Task Period.
 568:	11 96       	adiw	r26, 0x01	; 1
 56a:	8d 92       	st	X+, r8
 56c:	9d 92       	st	X+, r9
 56e:	ad 92       	st	X+, r10
 570:	bc 92       	st	X, r11
 572:	14 97       	sbiw	r26, 0x04	; 4
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 574:	15 96       	adiw	r26, 0x05	; 5
 576:	8d 92       	st	X+, r8
 578:	9d 92       	st	X+, r9
 57a:	ad 92       	st	X+, r10
 57c:	bc 92       	st	X, r11
 57e:	18 97       	sbiw	r26, 0x08	; 8
task1.TickFct = &TickFct_Keypad;//Function pointer for the tick.
 580:	6b ea       	ldi	r22, 0xAB	; 171
 582:	71 e0       	ldi	r23, 0x01	; 1
 584:	1a 96       	adiw	r26, 0x0a	; 10
 586:	7c 93       	st	X, r23
 588:	6e 93       	st	-X, r22
 58a:	19 97       	sbiw	r26, 0x09	; 9

// Task 2
task2.state = -1;
 58c:	80 83       	st	Z, r24
task2.period = SMTick2_period;
 58e:	21 83       	std	Z+1, r18	; 0x01
 590:	32 83       	std	Z+2, r19	; 0x02
 592:	43 83       	std	Z+3, r20	; 0x03
 594:	54 83       	std	Z+4, r21	; 0x04
task2.elapsedTime = SMTick2_period;
 596:	25 83       	std	Z+5, r18	; 0x05
 598:	36 83       	std	Z+6, r19	; 0x06
 59a:	47 83       	std	Z+7, r20	; 0x07
 59c:	50 87       	std	Z+8, r21	; 0x08
task2.TickFct = &TickFct_LCD;
 59e:	8b e7       	ldi	r24, 0x7B	; 123
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	92 87       	std	Z+10, r25	; 0x0a
 5a4:	81 87       	std	Z+9, r24	; 0x09

// Set the timer and turn it on
TimerSet(GCD);
 5a6:	6e 2d       	mov	r22, r14
 5a8:	7f 2d       	mov	r23, r15
 5aa:	80 2f       	mov	r24, r16
TimerOn();
 5ac:	91 2f       	mov	r25, r17
 5ae:	8c dd       	rcall	.-1256   	; 0xc8 <TimerSet>

LCD_init();
 5b0:	9c dd       	rcall	.-1224   	; 0xea <TimerOn>
 5b2:	70 de       	rcall	.-800    	; 0x294 <LCD_init>

SPI_MasterInit();
 5b4:	c6 de       	rcall	.-628    	; 0x342 <SPI_MasterInit>
 5b6:	7e 01       	movw	r14, r28
 5b8:	85 e0       	ldi	r24, 0x05	; 5
 5ba:	e8 0e       	add	r14, r24
 5bc:	f1 1c       	adc	r15, r1
 5be:	de 01       	movw	r26, r28
 5c0:	11 96       	adiw	r26, 0x01	; 1
 5c2:	6d 01       	movw	r12, r26
 5c4:	f6 01       	movw	r30, r12
unsigned short i; // Scheduler for-loop iterator
while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
        // Task is ready to tick
        if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 5c6:	01 91       	ld	r16, Z+
 5c8:	11 91       	ld	r17, Z+
 5ca:	6f 01       	movw	r12, r30
 5cc:	d8 01       	movw	r26, r16
 5ce:	15 96       	adiw	r26, 0x05	; 5
 5d0:	4d 91       	ld	r20, X+
 5d2:	5d 91       	ld	r21, X+
 5d4:	6d 91       	ld	r22, X+
 5d6:	7c 91       	ld	r23, X
 5d8:	18 97       	sbiw	r26, 0x08	; 8
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	8d 91       	ld	r24, X+
 5de:	9d 91       	ld	r25, X+
 5e0:	0d 90       	ld	r0, X+
 5e2:	bc 91       	ld	r27, X
 5e4:	a0 2d       	mov	r26, r0
 5e6:	48 17       	cp	r20, r24
 5e8:	59 07       	cpc	r21, r25
 5ea:	6a 07       	cpc	r22, r26
 5ec:	7b 07       	cpc	r23, r27
 5ee:	81 f4       	brne	.+32     	; 0x610 <main+0x18e>
 5f0:	f8 01       	movw	r30, r16
            // Setting next state for task
            tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 5f2:	80 81       	ld	r24, Z
 5f4:	01 84       	ldd	r0, Z+9	; 0x09
 5f6:	f2 85       	ldd	r31, Z+10	; 0x0a
 5f8:	e0 2d       	mov	r30, r0
 5fa:	08 2e       	mov	r0, r24
 5fc:	00 0c       	add	r0, r0
 5fe:	99 0b       	sbc	r25, r25
 600:	09 95       	icall
 602:	d8 01       	movw	r26, r16
 604:	8c 93       	st	X, r24
 606:	f8 01       	movw	r30, r16
            // Reset the elapsed time for next tick.
            tasks[i]->elapsedTime = 0;
 608:	15 82       	std	Z+5, r1	; 0x05
 60a:	16 82       	std	Z+6, r1	; 0x06
 60c:	17 82       	std	Z+7, r1	; 0x07
 60e:	10 86       	std	Z+8, r1	; 0x08
 610:	f8 01       	movw	r30, r16
        }
        tasks[i]->elapsedTime += 1;
 612:	85 81       	ldd	r24, Z+5	; 0x05
 614:	96 81       	ldd	r25, Z+6	; 0x06
 616:	a7 81       	ldd	r26, Z+7	; 0x07
 618:	b0 85       	ldd	r27, Z+8	; 0x08
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	a1 1d       	adc	r26, r1
 61e:	b1 1d       	adc	r27, r1
 620:	85 83       	std	Z+5, r24	; 0x05
 622:	96 83       	std	Z+6, r25	; 0x06
 624:	a7 83       	std	Z+7, r26	; 0x07
 626:	b0 87       	std	Z+8, r27	; 0x08
 628:	ce 14       	cp	r12, r14
SPI_MasterInit();

unsigned short i; // Scheduler for-loop iterator
while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
 62a:	df 04       	cpc	r13, r15
 62c:	59 f6       	brne	.-106    	; 0x5c4 <main+0x142>
 62e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <TimerFlag>
            tasks[i]->elapsedTime = 0;
        }
        tasks[i]->elapsedTime += 1;
    }

	while(!TimerFlag);
 632:	88 23       	and	r24, r24
 634:	e1 f3       	breq	.-8      	; 0x62e <main+0x1ac>
 636:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <TimerFlag>
	TimerFlag = 0;
 63a:	c1 cf       	rjmp	.-126    	; 0x5be <main+0x13c>

0000063c <__udivmodsi4>:
}
 63c:	a1 e2       	ldi	r26, 0x21	; 33
 63e:	1a 2e       	mov	r1, r26
 640:	aa 1b       	sub	r26, r26
 642:	bb 1b       	sub	r27, r27
 644:	fd 01       	movw	r30, r26
 646:	0d c0       	rjmp	.+26     	; 0x662 <__udivmodsi4_ep>

00000648 <__udivmodsi4_loop>:
 648:	aa 1f       	adc	r26, r26
 64a:	bb 1f       	adc	r27, r27
 64c:	ee 1f       	adc	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	a2 17       	cp	r26, r18
 652:	b3 07       	cpc	r27, r19
 654:	e4 07       	cpc	r30, r20
 656:	f5 07       	cpc	r31, r21
 658:	20 f0       	brcs	.+8      	; 0x662 <__udivmodsi4_ep>
 65a:	a2 1b       	sub	r26, r18
 65c:	b3 0b       	sbc	r27, r19
 65e:	e4 0b       	sbc	r30, r20
 660:	f5 0b       	sbc	r31, r21

00000662 <__udivmodsi4_ep>:
 662:	66 1f       	adc	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	1a 94       	dec	r1
 66c:	69 f7       	brne	.-38     	; 0x648 <__udivmodsi4_loop>
 66e:	60 95       	com	r22
 670:	70 95       	com	r23
 672:	80 95       	com	r24
 674:	90 95       	com	r25
 676:	9b 01       	movw	r18, r22
 678:	ac 01       	movw	r20, r24
 67a:	bd 01       	movw	r22, r26
 67c:	cf 01       	movw	r24, r30
 67e:	08 95       	ret

00000680 <_exit>:
 680:	f8 94       	cli

00000682 <__stop_program>:
 682:	ff cf       	rjmp	.-2      	; 0x682 <__stop_program>
