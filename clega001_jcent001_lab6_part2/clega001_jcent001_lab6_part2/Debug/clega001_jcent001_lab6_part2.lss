
clega001_jcent001_lab6_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000062a  000006be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  0080010c  0080010c  000006ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ea  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a24  00000000  00000000  000018ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fe  00000000  00000000  00002312  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d4  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000941  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003d0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	be c1       	rjmp	.+892    	; 0x38e <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	97 c0       	rjmp	.+302    	; 0x164 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 33       	cpi	r26, 0x3A	; 58
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7f d1       	rcall	.+766    	; 0x3c2 <main>
  c4:	b0 c2       	rjmp	.+1376   	; 0x626 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Wake_tick>:
}

void interrupt(task* Trigger){
	PCICR |= (1 << PCIE0);
	PCMSK0 |= (1 << PCINT2);
	trigger = Trigger;
  c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <w_state>
  cc:	88 23       	and	r24, r24
  ce:	19 f0       	breq	.+6      	; 0xd6 <Wake_tick+0xe>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	81 f0       	breq	.+32     	; 0xf4 <Wake_tick+0x2c>
  d4:	04 c0       	rjmp	.+8      	; 0xde <Wake_tick+0x16>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <w_state>
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <Wake_tick+0x2c>
  de:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <w_state>
  e2:	04 c0       	rjmp	.+8      	; 0xec <Wake_tick+0x24>
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
  ec:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <w_state>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret
  f4:	02 9b       	sbis	0x00, 2	; 0
  f6:	f6 cf       	rjmp	.-20     	; 0xe4 <Wake_tick+0x1c>
  f8:	f9 cf       	rjmp	.-14     	; 0xec <Wake_tick+0x24>

000000fa <TimerSet>:
  fa:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
  fe:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 102:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 106:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
 10a:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <_avr_timer_cntcurr>
 10e:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <_avr_timer_cntcurr+0x1>
 112:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_avr_timer_cntcurr+0x2>
 116:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <_avr_timer_cntcurr+0x3>
 11a:	08 95       	ret

0000011c <TimerOn>:
 11c:	8b e0       	ldi	r24, 0x0B	; 11
 11e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 122:	8d e7       	ldi	r24, 0x7D	; 125
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 12a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 134:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 138:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 13c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 140:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 144:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 148:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 14c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr>
 150:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x1>
 154:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <_avr_timer_cntcurr+0x2>
 158:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <_avr_timer_cntcurr+0x3>
 15c:	8f b7       	in	r24, 0x3f	; 63
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	8f bf       	out	0x3f, r24	; 63
 162:	08 95       	ret

00000164 <__vector_13>:
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <_avr_timer_cntcurr>
 17a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <_avr_timer_cntcurr+0x1>
 17e:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x2>
 182:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <_avr_timer_cntcurr+0x3>
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	a1 09       	sbc	r26, r1
 18a:	b1 09       	sbc	r27, r1
 18c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr>
 190:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x1>
 194:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <_avr_timer_cntcurr+0x2>
 198:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <_avr_timer_cntcurr+0x3>
 19c:	89 2b       	or	r24, r25
 19e:	8a 2b       	or	r24, r26
 1a0:	8b 2b       	or	r24, r27
 1a2:	99 f4       	brne	.+38     	; 0x1ca <__vector_13+0x66>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <TimerFlag>
 1aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 1ae:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 1b2:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 1b6:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 1ba:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr>
 1be:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x1>
 1c2:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <_avr_timer_cntcurr+0x2>
 1c6:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <_avr_timer_cntcurr+0x3>
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <delay_ms>:
 1dc:	18 16       	cp	r1, r24
 1de:	19 06       	cpc	r1, r25
 1e0:	5c f0       	brlt	.+22     	; 0x1f8 <delay_ms+0x1c>
 1e2:	08 95       	ret
 1e4:	00 00       	nop
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	31 09       	sbc	r19, r1
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <delay_ms+0x8>
 1ec:	4f 5f       	subi	r20, 0xFF	; 255
 1ee:	5f 4f       	sbci	r21, 0xFF	; 255
 1f0:	84 17       	cp	r24, r20
 1f2:	95 07       	cpc	r25, r21
 1f4:	19 f4       	brne	.+6      	; 0x1fc <delay_ms+0x20>
 1f6:	08 95       	ret
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	27 e0       	ldi	r18, 0x07	; 7
 1fe:	33 e0       	ldi	r19, 0x03	; 3
 200:	f1 cf       	rjmp	.-30     	; 0x1e4 <delay_ms+0x8>

00000202 <LCD_WriteCommand>:
 202:	5e 98       	cbi	0x0b, 6	; 11
 204:	88 b9       	out	0x08, r24	; 8
 206:	5f 9a       	sbi	0x0b, 7	; 11
 208:	00 00       	nop
 20a:	5f 98       	cbi	0x0b, 7	; 11
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	e5 cf       	rjmp	.-54     	; 0x1dc <delay_ms>
 212:	08 95       	ret

00000214 <LCD_ClearScreen>:
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	f5 cf       	rjmp	.-22     	; 0x202 <LCD_WriteCommand>
 218:	08 95       	ret

0000021a <LCD_Cursor>:
 21a:	81 31       	cpi	r24, 0x11	; 17
 21c:	18 f4       	brcc	.+6      	; 0x224 <LCD_Cursor+0xa>
 21e:	81 58       	subi	r24, 0x81	; 129
 220:	f0 cf       	rjmp	.-32     	; 0x202 <LCD_WriteCommand>
 222:	08 95       	ret
 224:	81 55       	subi	r24, 0x51	; 81
 226:	ed cf       	rjmp	.-38     	; 0x202 <LCD_WriteCommand>
 228:	08 95       	ret

0000022a <LCD_init>:
 22a:	84 e6       	ldi	r24, 0x64	; 100
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	d6 df       	rcall	.-84     	; 0x1dc <delay_ms>
 230:	88 e3       	ldi	r24, 0x38	; 56
 232:	e7 df       	rcall	.-50     	; 0x202 <LCD_WriteCommand>
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	e5 df       	rcall	.-54     	; 0x202 <LCD_WriteCommand>
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	e3 df       	rcall	.-58     	; 0x202 <LCD_WriteCommand>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	e1 df       	rcall	.-62     	; 0x202 <LCD_WriteCommand>
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	cb cf       	rjmp	.-106    	; 0x1dc <delay_ms>
 246:	08 95       	ret

00000248 <LCD_WriteData>:
 248:	5e 9a       	sbi	0x0b, 6	; 11
 24a:	88 b9       	out	0x08, r24	; 8
 24c:	5f 9a       	sbi	0x0b, 7	; 11
 24e:	00 00       	nop
 250:	5f 98       	cbi	0x0b, 7	; 11
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	c2 cf       	rjmp	.-124    	; 0x1dc <delay_ms>
 258:	08 95       	ret

0000025a <LCD_tick>:
 25a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <lcd_state>
 25e:	88 23       	and	r24, r24
 260:	19 f0       	breq	.+6      	; 0x268 <LCD_tick+0xe>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	f9 f0       	breq	.+62     	; 0x2a4 <LCD_tick+0x4a>
 266:	04 c0       	rjmp	.+8      	; 0x270 <LCD_tick+0x16>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <lcd_state>
 26e:	1a c0       	rjmp	.+52     	; 0x2a4 <LCD_tick+0x4a>
 270:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <lcd_state>
 274:	13 c0       	rjmp	.+38     	; 0x29c <LCD_tick+0x42>
 276:	ce df       	rcall	.-100    	; 0x214 <LCD_ClearScreen>
 278:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <trigger>
 27c:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <trigger+0x1>
 280:	11 86       	std	Z+9, r1	; 0x09
 282:	15 b8       	out	0x05, r1	; 5
 284:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 288:	09 c0       	rjmp	.+18     	; 0x29c <LCD_tick+0x42>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	c3 df       	rcall	.-122    	; 0x21a <LCD_Cursor>
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 298:	80 5d       	subi	r24, 0xD0	; 208
 29a:	d6 df       	rcall	.-84     	; 0x248 <LCD_WriteData>
 29c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <lcd_state>
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	08 95       	ret
 2a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	78 f3       	brcs	.-34     	; 0x28a <LCD_tick+0x30>
 2ac:	e4 cf       	rjmp	.-56     	; 0x276 <LCD_tick+0x1c>

000002ae <updateCount>:
 2ae:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 2b2:	89 0f       	add	r24, r25
 2b4:	8a 30       	cpi	r24, 0x0A	; 10
 2b6:	10 f4       	brcc	.+4      	; 0x2bc <updateCount+0xe>
 2b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2bc:	08 95       	ret

000002be <IncDec_tick>:
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	91 05       	cpc	r25, r1
 2c2:	91 f1       	breq	.+100    	; 0x328 <IncDec_tick+0x6a>
 2c4:	34 f4       	brge	.+12     	; 0x2d2 <IncDec_tick+0x14>
 2c6:	00 97       	sbiw	r24, 0x00	; 0
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <IncDec_tick+0x24>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	91 05       	cpc	r25, r1
 2ce:	79 f0       	breq	.+30     	; 0x2ee <IncDec_tick+0x30>
 2d0:	49 c0       	rjmp	.+146    	; 0x364 <IncDec_tick+0xa6>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	91 05       	cpc	r25, r1
 2d6:	b1 f1       	breq	.+108    	; 0x344 <IncDec_tick+0x86>
 2d8:	84 30       	cpi	r24, 0x04	; 4
 2da:	91 05       	cpc	r25, r1
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <IncDec_tick+0x22>
 2de:	3d c0       	rjmp	.+122    	; 0x35a <IncDec_tick+0x9c>
 2e0:	41 c0       	rjmp	.+130    	; 0x364 <IncDec_tick+0xa6>
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	08 95       	ret
 2ee:	00 99       	sbic	0x00, 0	; 0
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <IncDec_tick+0x44>
 2f2:	01 9b       	sbis	0x00, 1	; 0
 2f4:	06 c0       	rjmp	.+12     	; 0x302 <IncDec_tick+0x44>
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	d9 df       	rcall	.-78     	; 0x2ae <updateCount>
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	08 95       	ret
 302:	00 9b       	sbis	0x00, 0	; 0
 304:	08 c0       	rjmp	.+16     	; 0x316 <IncDec_tick+0x58>
 306:	01 99       	sbic	0x00, 1	; 0
 308:	06 c0       	rjmp	.+12     	; 0x316 <IncDec_tick+0x58>
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	9f ef       	ldi	r25, 0xFF	; 255
 30e:	cf df       	rcall	.-98     	; 0x2ae <updateCount>
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	08 95       	ret
 316:	00 99       	sbic	0x00, 0	; 0
 318:	39 c0       	rjmp	.+114    	; 0x38c <IncDec_tick+0xce>
 31a:	01 99       	sbic	0x00, 1	; 0
 31c:	37 c0       	rjmp	.+110    	; 0x38c <IncDec_tick+0xce>
 31e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	08 95       	ret
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <task2+0x9>
 32e:	00 99       	sbic	0x00, 0	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <IncDec_tick+0x78>
 332:	01 99       	sbic	0x00, 1	; 0
 334:	2b c0       	rjmp	.+86     	; 0x38c <IncDec_tick+0xce>
 336:	00 99       	sbic	0x00, 0	; 0
 338:	18 c0       	rjmp	.+48     	; 0x36a <IncDec_tick+0xac>
 33a:	01 99       	sbic	0x00, 1	; 0
 33c:	19 c0       	rjmp	.+50     	; 0x370 <IncDec_tick+0xb2>
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	8b b9       	out	0x0b, r24	; 11
 342:	ff cf       	rjmp	.-2      	; 0x342 <IncDec_tick+0x84>
 344:	00 9b       	sbis	0x00, 0	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <IncDec_tick+0x8e>
 348:	01 9b       	sbis	0x00, 1	; 0
 34a:	20 c0       	rjmp	.+64     	; 0x38c <IncDec_tick+0xce>
 34c:	00 99       	sbic	0x00, 0	; 0
 34e:	13 c0       	rjmp	.+38     	; 0x376 <IncDec_tick+0xb8>
 350:	01 99       	sbic	0x00, 1	; 0
 352:	14 c0       	rjmp	.+40     	; 0x37c <IncDec_tick+0xbe>
 354:	84 e0       	ldi	r24, 0x04	; 4
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret
 35a:	00 99       	sbic	0x00, 0	; 0
 35c:	12 c0       	rjmp	.+36     	; 0x382 <IncDec_tick+0xc4>
 35e:	01 9b       	sbis	0x00, 1	; 0
 360:	15 c0       	rjmp	.+42     	; 0x38c <IncDec_tick+0xce>
 362:	12 c0       	rjmp	.+36     	; 0x388 <IncDec_tick+0xca>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	08 95       	ret
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	08 95       	ret
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	08 95       	ret
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	08 95       	ret
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	08 95       	ret
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	08 95       	ret
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	08 95       	ret

0000038e <__vector_4>:
}

ISR(PCINT0_vect){
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	0b b6       	in	r0, 0x3b	; 59
 39a:	0f 92       	push	r0
 39c:	8f 93       	push	r24
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
	trigger->active = 0x01;
 3a2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <trigger>
 3a6:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <trigger+0x1>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	81 87       	std	Z+9, r24	; 0x09
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0b be       	out	0x3b, r0	; 59
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <main>:

// Implement scheduler code from PES.
int main()
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <main+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x8>
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <main+0xa>
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 3d0:	11 b8       	out	0x01, r1	; 1
 3d2:	1f ef       	ldi	r17, 0xFF	; 255
 3d4:	12 b9       	out	0x02, r17	; 2
	DDRB = 0xFF; PORTB = 0x00;
 3d6:	14 b9       	out	0x04, r17	; 4
 3d8:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 3da:	17 b9       	out	0x07, r17	; 7
 3dc:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 3de:	1a b9       	out	0x0a, r17	; 10
 3e0:	1b b8       	out	0x0b, r1	; 11
	
	LCD_init();
 3e2:	23 df       	rcall	.-442    	; 0x22a <LCD_init>
	LCD_ClearScreen();
 3e4:	17 df       	rcall	.-466    	; 0x214 <LCD_ClearScreen>
 3e6:	15 b9       	out	0x05, r17	; 5
	
	//LCD_DisplayString(1, "Hello World!");
	
	PORTB = 0xFF;
 3e8:	12 e3       	ldi	r17, 0x32	; 50
 3ea:	00 e0       	ldi	r16, 0x00	; 0
 3ec:	f1 2c       	mov	r15, r1
 3ee:	e1 2c       	mov	r14, r1
 3f0:	51 e0       	ldi	r21, 0x01	; 1
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	16 2f       	mov	r17, r22
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 3fc:	07 2f       	mov	r16, r23
 3fe:	f8 2e       	mov	r15, r24
 400:	e9 2e       	mov	r14, r25
 402:	65 2f       	mov	r22, r21
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 404:	74 2f       	mov	r23, r20
 406:	83 2f       	mov	r24, r19
 408:	92 2f       	mov	r25, r18
 40a:	21 2f       	mov	r18, r17
 40c:	30 2f       	mov	r19, r16
 40e:	4f 2d       	mov	r20, r15
 410:	5e 2d       	mov	r21, r14
 412:	e7 d0       	rcall	.+462    	; 0x5e2 <__udivmodsi4>
 414:	51 2f       	mov	r21, r17
 416:	40 2f       	mov	r20, r16
 418:	3f 2d       	mov	r19, r15
 41a:	2e 2d       	mov	r18, r14
 41c:	61 15       	cp	r22, r1
		if(c==0){return b;}
 41e:	71 05       	cpc	r23, r1
 420:	81 05       	cpc	r24, r1
 422:	91 05       	cpc	r25, r1
 424:	51 f7       	brne	.-44     	; 0x3fa <main+0x38>
 426:	0f 2e       	mov	r0, r31
 428:	f8 ee       	ldi	r31, 0xE8	; 232
 42a:	df 2e       	mov	r13, r31
 42c:	f0 2d       	mov	r31, r0
 42e:	0f 2e       	mov	r0, r31
 430:	f3 e0       	ldi	r31, 0x03	; 3
 432:	cf 2e       	mov	r12, r31
 434:	f0 2d       	mov	r31, r0
 436:	b1 2c       	mov	r11, r1
 438:	a1 2c       	mov	r10, r1
 43a:	04 c0       	rjmp	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43c:	d6 2e       	mov	r13, r22
		a = b;
		b = c;
 43e:	c7 2e       	mov	r12, r23
 440:	b8 2e       	mov	r11, r24
 442:	a9 2e       	mov	r10, r25
 444:	61 2f       	mov	r22, r17
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 446:	70 2f       	mov	r23, r16
 448:	8f 2d       	mov	r24, r15
 44a:	9e 2d       	mov	r25, r14
 44c:	2d 2d       	mov	r18, r13
 44e:	3c 2d       	mov	r19, r12
 450:	4b 2d       	mov	r20, r11
 452:	5a 2d       	mov	r21, r10
 454:	c6 d0       	rcall	.+396    	; 0x5e2 <__udivmodsi4>
 456:	1d 2d       	mov	r17, r13
 458:	0c 2d       	mov	r16, r12
 45a:	fb 2c       	mov	r15, r11
 45c:	ea 2c       	mov	r14, r10
 45e:	61 15       	cp	r22, r1
		if(c==0){return b;}
 460:	71 05       	cpc	r23, r1
 462:	81 05       	cpc	r24, r1
 464:	91 05       	cpc	r25, r1
 466:	51 f7       	brne	.-44     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 468:	0f 2e       	mov	r0, r31
 46a:	f2 e3       	ldi	r31, 0x32	; 50
 46c:	ef 2e       	mov	r14, r31
 46e:	f0 2d       	mov	r31, r0
 470:	f1 2c       	mov	r15, r1
 472:	00 e0       	ldi	r16, 0x00	; 0
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	04 c0       	rjmp	.+8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 478:	e6 2e       	mov	r14, r22
		a = b;
		b = c;
 47a:	f7 2e       	mov	r15, r23
 47c:	08 2f       	mov	r16, r24
 47e:	19 2f       	mov	r17, r25
 480:	6d 2d       	mov	r22, r13
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 482:	7c 2d       	mov	r23, r12
 484:	8b 2d       	mov	r24, r11
 486:	9a 2d       	mov	r25, r10
 488:	2e 2d       	mov	r18, r14
 48a:	3f 2d       	mov	r19, r15
 48c:	40 2f       	mov	r20, r16
 48e:	51 2f       	mov	r21, r17
 490:	a8 d0       	rcall	.+336    	; 0x5e2 <__udivmodsi4>
 492:	de 2c       	mov	r13, r14
 494:	cf 2c       	mov	r12, r15
 496:	b0 2e       	mov	r11, r16
 498:	a1 2e       	mov	r10, r17
 49a:	61 15       	cp	r22, r1
		if(c==0){return b;}
 49c:	71 05       	cpc	r23, r1
 49e:	81 05       	cpc	r24, r1
 4a0:	91 05       	cpc	r25, r1
 4a2:	51 f7       	brne	.-44     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 4a4:	62 e3       	ldi	r22, 0x32	; 50

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	2e 2d       	mov	r18, r14
 4ae:	3f 2d       	mov	r19, r15
 4b0:	40 2f       	mov	r20, r16
 4b2:	51 2f       	mov	r21, r17
 4b4:	96 d0       	rcall	.+300    	; 0x5e2 <__udivmodsi4>
 4b6:	49 01       	movw	r8, r18
 4b8:	5a 01       	movw	r10, r20
 4ba:	68 ee       	ldi	r22, 0xE8	; 232
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 4bc:	73 e0       	ldi	r23, 0x03	; 3
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	2e 2d       	mov	r18, r14
 4c4:	3f 2d       	mov	r19, r15
 4c6:	40 2f       	mov	r20, r16
 4c8:	51 2f       	mov	r21, r17
 4ca:	8b d0       	rcall	.+278    	; 0x5e2 <__udivmodsi4>
 4cc:	86 e0       	ldi	r24, 0x06	; 6
	unsigned long int SMTick3_period = SMTick3_calc/GCD;

	//Declare an array of tasks
	//static task task1, task2;
	task *tasks[] = {&task1, &task2, &task3};
 4ce:	e5 e0       	ldi	r30, 0x05	; 5
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	de 01       	movw	r26, r28
 4d4:	11 96       	adiw	r26, 0x01	; 1
 4d6:	01 90       	ld	r0, Z+
 4d8:	0d 92       	st	X+, r0
 4da:	8a 95       	dec	r24
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4de:	e5 e2       	ldi	r30, 0x25	; 37
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	80 83       	st	Z, r24
 4e6:	81 82       	std	Z+1, r8	; 0x01
	task1.period = SMTick1_period;//Task Period.
 4e8:	92 82       	std	Z+2, r9	; 0x02
 4ea:	a3 82       	std	Z+3, r10	; 0x03
 4ec:	b4 82       	std	Z+4, r11	; 0x04
 4ee:	85 82       	std	Z+5, r8	; 0x05
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 4f0:	96 82       	std	Z+6, r9	; 0x06
 4f2:	a7 82       	std	Z+7, r10	; 0x07
 4f4:	b0 86       	std	Z+8, r11	; 0x08
 4f6:	dd 24       	eor	r13, r13
	task1.active = 0x01;
 4f8:	d3 94       	inc	r13
 4fa:	d1 86       	std	Z+9, r13	; 0x09
 4fc:	6f e5       	ldi	r22, 0x5F	; 95
	task1.TickFct = &IncDec_tick;//Function pointer for the tick.
 4fe:	71 e0       	ldi	r23, 0x01	; 1
 500:	73 87       	std	Z+11, r23	; 0x0b
 502:	62 87       	std	Z+10, r22	; 0x0a
 504:	e9 e1       	ldi	r30, 0x19	; 25
	
	// Task 2
	task2.state = -1;
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	80 83       	st	Z, r24
 50a:	21 83       	std	Z+1, r18	; 0x01
	task2.period = SMTick2_period;
 50c:	32 83       	std	Z+2, r19	; 0x02
 50e:	43 83       	std	Z+3, r20	; 0x03
 510:	54 83       	std	Z+4, r21	; 0x04
 512:	25 83       	std	Z+5, r18	; 0x05
	task2.elapsedTime = SMTick2_period;
 514:	36 83       	std	Z+6, r19	; 0x06
 516:	47 83       	std	Z+7, r20	; 0x07
 518:	50 87       	std	Z+8, r21	; 0x08
 51a:	d1 86       	std	Z+9, r13	; 0x09
	task2.active = 0x01;
 51c:	2d e2       	ldi	r18, 0x2D	; 45
	task2.TickFct = &LCD_tick;
 51e:	31 e0       	ldi	r19, 0x01	; 1
 520:	33 87       	std	Z+11, r19	; 0x0b
 522:	22 87       	std	Z+10, r18	; 0x0a
 524:	ed e0       	ldi	r30, 0x0D	; 13
	
	// Task 3
	task3.state = -1;
 526:	f1 e0       	ldi	r31, 0x01	; 1
 528:	80 83       	st	Z, r24
 52a:	81 82       	std	Z+1, r8	; 0x01
	task3.period = SMTick3_period;
 52c:	92 82       	std	Z+2, r9	; 0x02
 52e:	a3 82       	std	Z+3, r10	; 0x03
 530:	b4 82       	std	Z+4, r11	; 0x04
 532:	85 82       	std	Z+5, r8	; 0x05
	task3.elapsedTime = SMTick3_period;
 534:	96 82       	std	Z+6, r9	; 0x06
 536:	a7 82       	std	Z+7, r10	; 0x07
 538:	b0 86       	std	Z+8, r11	; 0x08
 53a:	d1 86       	std	Z+9, r13	; 0x09
	task3.active = 0x01;
 53c:	84 e6       	ldi	r24, 0x64	; 100
	task3.TickFct = &Wake_tick;
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	93 87       	std	Z+11, r25	; 0x0b

	// Set the timer and turn it on
	TimerSet(GCD);
 542:	82 87       	std	Z+10, r24	; 0x0a
 544:	6e 2d       	mov	r22, r14
 546:	7f 2d       	mov	r23, r15
 548:	80 2f       	mov	r24, r16
 54a:	91 2f       	mov	r25, r17
 54c:	d6 dd       	rcall	.-1108   	; 0xfa <TimerSet>
	TimerOn();
 54e:	e6 dd       	rcall	.-1076   	; 0x11c <TimerOn>
 550:	d5 b8       	out	0x05, r13	; 5
	
	PORTB = 0x01;
 552:	7e 01       	movw	r14, r28
 554:	87 e0       	ldi	r24, 0x07	; 7
 556:	e8 0e       	add	r14, r24
 558:	f1 1c       	adc	r15, r1
 55a:	de 01       	movw	r26, r28
 55c:	11 96       	adiw	r26, 0x01	; 1
 55e:	6d 01       	movw	r12, r26
 560:	f6 01       	movw	r30, r12
	//interrupt(&tasks[2]);

	unsigned short i;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
			if(tasks[i]->active){
 562:	01 91       	ld	r16, Z+
 564:	11 91       	ld	r17, Z+
 566:	6f 01       	movw	r12, r30
 568:	d8 01       	movw	r26, r16
 56a:	19 96       	adiw	r26, 0x09	; 9
 56c:	8c 91       	ld	r24, X
 56e:	19 97       	sbiw	r26, 0x09	; 9
 570:	88 23       	and	r24, r24
 572:	09 f1       	breq	.+66     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 574:	15 96       	adiw	r26, 0x05	; 5
				if ( tasks[i]->elapsedTime >= tasks[i]->period ) {
 576:	4d 91       	ld	r20, X+
 578:	5d 91       	ld	r21, X+
 57a:	6d 91       	ld	r22, X+
 57c:	7c 91       	ld	r23, X
 57e:	18 97       	sbiw	r26, 0x08	; 8
 580:	11 96       	adiw	r26, 0x01	; 1
 582:	8d 91       	ld	r24, X+
 584:	9d 91       	ld	r25, X+
 586:	0d 90       	ld	r0, X+
 588:	bc 91       	ld	r27, X
 58a:	a0 2d       	mov	r26, r0
 58c:	48 17       	cp	r20, r24
 58e:	59 07       	cpc	r21, r25
 590:	6a 07       	cpc	r22, r26
 592:	7b 07       	cpc	r23, r27
 594:	80 f0       	brcs	.+32     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 596:	f8 01       	movw	r30, r16
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 598:	80 81       	ld	r24, Z
 59a:	02 84       	ldd	r0, Z+10	; 0x0a
 59c:	f3 85       	ldd	r31, Z+11	; 0x0b
 59e:	e0 2d       	mov	r30, r0
 5a0:	08 2e       	mov	r0, r24
 5a2:	00 0c       	add	r0, r0
 5a4:	99 0b       	sbc	r25, r25
 5a6:	09 95       	icall
 5a8:	d8 01       	movw	r26, r16
 5aa:	8c 93       	st	X, r24
 5ac:	f8 01       	movw	r30, r16
					tasks[i]->elapsedTime = 0;
 5ae:	15 82       	std	Z+5, r1	; 0x05
 5b0:	16 82       	std	Z+6, r1	; 0x06
 5b2:	17 82       	std	Z+7, r1	; 0x07
 5b4:	10 86       	std	Z+8, r1	; 0x08
 5b6:	f8 01       	movw	r30, r16
				}
			}
			tasks[i]->elapsedTime += 1;
 5b8:	85 81       	ldd	r24, Z+5	; 0x05
 5ba:	96 81       	ldd	r25, Z+6	; 0x06
 5bc:	a7 81       	ldd	r26, Z+7	; 0x07
 5be:	b0 85       	ldd	r27, Z+8	; 0x08
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	a1 1d       	adc	r26, r1
 5c4:	b1 1d       	adc	r27, r1
 5c6:	85 83       	std	Z+5, r24	; 0x05
 5c8:	96 83       	std	Z+6, r25	; 0x06
 5ca:	a7 83       	std	Z+7, r26	; 0x07
 5cc:	b0 87       	std	Z+8, r27	; 0x08
 5ce:	ce 14       	cp	r12, r14

	//interrupt(&tasks[2]);

	unsigned short i;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
 5d0:	df 04       	cpc	r13, r15
 5d2:	31 f6       	brne	.-116    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 5d4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <TimerFlag>
					tasks[i]->elapsedTime = 0;
				}
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 5d8:	88 23       	and	r24, r24
 5da:	e1 f3       	breq	.-8      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5dc:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <TimerFlag>
		TimerFlag = 0;
 5e0:	bc cf       	rjmp	.-136    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>

000005e2 <__udivmodsi4>:
	}
 5e2:	a1 e2       	ldi	r26, 0x21	; 33
 5e4:	1a 2e       	mov	r1, r26
 5e6:	aa 1b       	sub	r26, r26
 5e8:	bb 1b       	sub	r27, r27
 5ea:	fd 01       	movw	r30, r26
 5ec:	0d c0       	rjmp	.+26     	; 0x608 <__udivmodsi4_ep>

000005ee <__udivmodsi4_loop>:
 5ee:	aa 1f       	adc	r26, r26
 5f0:	bb 1f       	adc	r27, r27
 5f2:	ee 1f       	adc	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	a2 17       	cp	r26, r18
 5f8:	b3 07       	cpc	r27, r19
 5fa:	e4 07       	cpc	r30, r20
 5fc:	f5 07       	cpc	r31, r21
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__udivmodsi4_ep>
 600:	a2 1b       	sub	r26, r18
 602:	b3 0b       	sbc	r27, r19
 604:	e4 0b       	sbc	r30, r20
 606:	f5 0b       	sbc	r31, r21

00000608 <__udivmodsi4_ep>:
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	1a 94       	dec	r1
 612:	69 f7       	brne	.-38     	; 0x5ee <__udivmodsi4_loop>
 614:	60 95       	com	r22
 616:	70 95       	com	r23
 618:	80 95       	com	r24
 61a:	90 95       	com	r25
 61c:	9b 01       	movw	r18, r22
 61e:	ac 01       	movw	r20, r24
 620:	bd 01       	movw	r22, r26
 622:	cf 01       	movw	r24, r30
 624:	08 95       	ret

00000626 <_exit>:
 626:	f8 94       	cli

00000628 <__stop_program>:
 628:	ff cf       	rjmp	.-2      	; 0x628 <__stop_program>
