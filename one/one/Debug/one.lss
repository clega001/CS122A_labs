
one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000388  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800104  00800104  00000420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7d  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096b  00000000  00000000  0000127d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063b  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004de  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a3  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002b9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	69 d0       	rcall	.+210    	; 0x196 <main>
  c4:	5f c1       	rjmp	.+702    	; 0x384 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_13>:
	set_PWM(0);
}

void PWM_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
  e2:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
  e6:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	a1 09       	sbc	r26, r1
  ee:	b1 09       	sbc	r27, r1
  f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  f4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
  f8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
  fc:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 100:	89 2b       	or	r24, r25
 102:	8a 2b       	or	r24, r26
 104:	8b 2b       	or	r24, r27
 106:	99 f4       	brne	.+38     	; 0x12e <__vector_13+0x66>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 116:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 11a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 122:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 126:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 12a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <ADC_init>:
//---------------------------------------------------------------------------

//taken from http://extremeelectronics.co.in/avr-tutorials/using-adc-of-avr-microcontroller/
void ADC_init()
{
	ADMUX=(1<<REFS1)|(1<<REFS0);                         // For Aref=AVcc;
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
 146:	8f e8       	ldi	r24, 0x8F	; 143
 148:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 14c:	08 95       	ret

0000014e <ReadADC>:
}
uint16_t ReadADC(uint8_t ch){//I added the small delays
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX|=ch;
 14e:	ec e7       	ldi	r30, 0x7C	; 124
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	87 70       	andi	r24, 0x07	; 7
 156:	98 2b       	or	r25, r24
 158:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <ReadADC+0x10>
 162:	00 c0       	rjmp	.+0      	; 0x164 <ReadADC+0x16>
 164:	00 00       	nop
	_delay_ms(1);
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 166:	ea e7       	ldi	r30, 0x7A	; 122
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <ReadADC+0x26>
 178:	00 c0       	rjmp	.+0      	; 0x17a <ReadADC+0x2c>
 17a:	00 00       	nop
	_delay_ms(1);
	
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 17c:	80 81       	ld	r24, Z
 17e:	84 ff       	sbrs	r24, 4
 180:	fd cf       	rjmp	.-6      	; 0x17c <ReadADC+0x2e>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!
	ADCSRA|=(1<<ADIF);
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	80 83       	st	Z, r24
	return(ADC);
 18c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 190:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 194:	08 95       	ret

00000196 <main>:

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int main(){
	DDRA = 0x00; PORTA = 0xFF;
 196:	11 b8       	out	0x01, r1	; 1
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 19c:	87 b9       	out	0x07, r24	; 7
 19e:	18 b8       	out	0x08, r1	; 8

	ADC_init();
 1a0:	cf df       	rcall	.-98     	; 0x140 <ADC_init>
// 	ADMUX = 0xC0;
// 	ADCSRA |= (1<<ADSC); //Start ADC Conversion
// 	_delay_ms(5); 
	
	while(1) {
		ADMUX = 0xC0;
 1a2:	0c e7       	ldi	r16, 0x7C	; 124
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	0f 2e       	mov	r0, r31
 1a8:	f0 ec       	ldi	r31, 0xC0	; 192
 1aa:	9f 2e       	mov	r9, r31
 1ac:	f0 2d       	mov	r31, r0
		ADCSRA |= (1<<ADSC);
 1ae:	ca e7       	ldi	r28, 0x7A	; 122
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
		a = ReadADC(0);
			if(a > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0xE0;
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f0 ee       	ldi	r31, 0xE0	; 224
 1b6:	4f 2e       	mov	r4, r31
 1b8:	f0 2d       	mov	r31, r0
			}	
			
		ADMUX = 0xC1;
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f1 ec       	ldi	r31, 0xC1	; 193
 1be:	af 2e       	mov	r10, r31
 1c0:	f0 2d       	mov	r31, r0
		b = ReadADC(1);
			if(b > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0x70;
 1c2:	0f 2e       	mov	r0, r31
 1c4:	f0 e7       	ldi	r31, 0x70	; 112
 1c6:	5f 2e       	mov	r5, r31
 1c8:	f0 2d       	mov	r31, r0
			}

		ADMUX = 0xC2;
 1ca:	0f 2e       	mov	r0, r31
 1cc:	f2 ec       	ldi	r31, 0xC2	; 194
 1ce:	bf 2e       	mov	r11, r31
 1d0:	f0 2d       	mov	r31, r0
		c = ReadADC(2);
			if(c > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0x38;
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f8 e3       	ldi	r31, 0x38	; 56
 1d6:	6f 2e       	mov	r6, r31
 1d8:	f0 2d       	mov	r31, r0
			}

		ADMUX = 0xC3;
 1da:	0f 2e       	mov	r0, r31
 1dc:	f3 ec       	ldi	r31, 0xC3	; 195
 1de:	cf 2e       	mov	r12, r31
 1e0:	f0 2d       	mov	r31, r0
		d = ReadADC(3);
			if(d > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0x1C;
 1e2:	0f 2e       	mov	r0, r31
 1e4:	fc e1       	ldi	r31, 0x1C	; 28
 1e6:	7f 2e       	mov	r7, r31
 1e8:	f0 2d       	mov	r31, r0
			}

		ADMUX = 0xC4;
 1ea:	0f 2e       	mov	r0, r31
 1ec:	f4 ec       	ldi	r31, 0xC4	; 196
 1ee:	df 2e       	mov	r13, r31
 1f0:	f0 2d       	mov	r31, r0
		e = ReadADC(4);
			if(e > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0x0E;
 1f2:	0f 2e       	mov	r0, r31
 1f4:	fe e0       	ldi	r31, 0x0E	; 14
 1f6:	8f 2e       	mov	r8, r31
 1f8:	f0 2d       	mov	r31, r0
			}
			
		ADMUX = 0xC5;
 1fa:	0f 2e       	mov	r0, r31
 1fc:	f5 ec       	ldi	r31, 0xC5	; 197
 1fe:	ef 2e       	mov	r14, r31
 200:	f0 2d       	mov	r31, r0
		f = ReadADC(5);
			if(f > 150){
				PORTC = 0x00;
			}
			else{
				PORTC = 0x07;
 202:	0f 2e       	mov	r0, r31
 204:	f7 e0       	ldi	r31, 0x07	; 7
 206:	ff 2e       	mov	r15, r31
 208:	f0 2d       	mov	r31, r0
// 	ADMUX = 0xC0;
// 	ADCSRA |= (1<<ADSC); //Start ADC Conversion
// 	_delay_ms(5); 
	
	while(1) {
		ADMUX = 0xC0;
 20a:	f8 01       	movw	r30, r16
 20c:	90 82       	st	Z, r9
		ADCSRA |= (1<<ADSC);
 20e:	88 81       	ld	r24, Y
 210:	80 64       	ori	r24, 0x40	; 64
 212:	88 83       	st	Y, r24
 214:	81 ee       	ldi	r24, 0xE1	; 225
 216:	94 e0       	ldi	r25, 0x04	; 4
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x82>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x88>
 21e:	00 00       	nop
		_delay_ms(5);
		
		a = ReadADC(0);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	95 df       	rcall	.-214    	; 0x14e <ReadADC>
 224:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <a+0x1>
 228:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <a>
			if(a > 150){
 22c:	87 39       	cpi	r24, 0x97	; 151
 22e:	91 05       	cpc	r25, r1
 230:	10 f0       	brcs	.+4      	; 0x236 <main+0xa0>
				PORTC = 0x00;
 232:	18 b8       	out	0x08, r1	; 8
 234:	01 c0       	rjmp	.+2      	; 0x238 <main+0xa2>
			}
			else{
				PORTC = 0xE0;
 236:	48 b8       	out	0x08, r4	; 8
			}	
			
		ADMUX = 0xC1;
 238:	f8 01       	movw	r30, r16
 23a:	a0 82       	st	Z, r10
		ADCSRA |= (1<<ADSC);
 23c:	88 81       	ld	r24, Y
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	88 83       	st	Y, r24
 242:	81 ee       	ldi	r24, 0xE1	; 225
 244:	94 e0       	ldi	r25, 0x04	; 4
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <main+0xb0>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0xb6>
		_delay_ms(5);
		
		b = ReadADC(1);
 24c:	00 00       	nop
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	7e df       	rcall	.-260    	; 0x14e <ReadADC>
 252:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <b+0x1>
 256:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <b>
			if(b > 150){
 25a:	87 39       	cpi	r24, 0x97	; 151
 25c:	91 05       	cpc	r25, r1
 25e:	10 f0       	brcs	.+4      	; 0x264 <main+0xce>
				PORTC = 0x00;
 260:	18 b8       	out	0x08, r1	; 8
 262:	01 c0       	rjmp	.+2      	; 0x266 <main+0xd0>
			}
			else{
				PORTC = 0x70;
 264:	58 b8       	out	0x08, r5	; 8
			}

		ADMUX = 0xC2;
 266:	f8 01       	movw	r30, r16
 268:	b0 82       	st	Z, r11
		ADCSRA |= (1<<ADSC);
 26a:	88 81       	ld	r24, Y
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	88 83       	st	Y, r24
 270:	81 ee       	ldi	r24, 0xE1	; 225
 272:	94 e0       	ldi	r25, 0x04	; 4
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0xde>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0xe4>
		_delay_ms(5);
		
		c = ReadADC(2);
 27a:	00 00       	nop
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	67 df       	rcall	.-306    	; 0x14e <ReadADC>
 280:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <c+0x1>
 284:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <c>
			if(c > 150){
 288:	87 39       	cpi	r24, 0x97	; 151
 28a:	91 05       	cpc	r25, r1
 28c:	10 f0       	brcs	.+4      	; 0x292 <main+0xfc>
				PORTC = 0x00;
 28e:	18 b8       	out	0x08, r1	; 8
 290:	01 c0       	rjmp	.+2      	; 0x294 <main+0xfe>
			}
			else{
				PORTC = 0x38;
 292:	68 b8       	out	0x08, r6	; 8
			}

		ADMUX = 0xC3;
 294:	f8 01       	movw	r30, r16
 296:	c0 82       	st	Z, r12
		ADCSRA |= (1<<ADSC);
 298:	88 81       	ld	r24, Y
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	88 83       	st	Y, r24
 29e:	81 ee       	ldi	r24, 0xE1	; 225
 2a0:	94 e0       	ldi	r25, 0x04	; 4
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x10c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x112>
		_delay_ms(5);
		
		d = ReadADC(3);
 2a8:	00 00       	nop
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	50 df       	rcall	.-352    	; 0x14e <ReadADC>
 2ae:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <d+0x1>
 2b2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <d>
			if(d > 150){
 2b6:	87 39       	cpi	r24, 0x97	; 151
 2b8:	91 05       	cpc	r25, r1
 2ba:	10 f0       	brcs	.+4      	; 0x2c0 <main+0x12a>
				PORTC = 0x00;
 2bc:	18 b8       	out	0x08, r1	; 8
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <main+0x12c>
			}
			else{
				PORTC = 0x1C;
 2c0:	78 b8       	out	0x08, r7	; 8
			}

		ADMUX = 0xC4;
 2c2:	f8 01       	movw	r30, r16
 2c4:	d0 82       	st	Z, r13
		ADCSRA |= (1<<ADSC);
 2c6:	88 81       	ld	r24, Y
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	88 83       	st	Y, r24
 2cc:	81 ee       	ldi	r24, 0xE1	; 225
 2ce:	94 e0       	ldi	r25, 0x04	; 4
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x13a>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x140>
		_delay_ms(5);
		
		e = ReadADC(4);
 2d6:	00 00       	nop
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	39 df       	rcall	.-398    	; 0x14e <ReadADC>
 2dc:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <e+0x1>
 2e0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <e>
			if(e > 150){
 2e4:	87 39       	cpi	r24, 0x97	; 151
 2e6:	91 05       	cpc	r25, r1
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <main+0x158>
				PORTC = 0x00;
 2ea:	18 b8       	out	0x08, r1	; 8
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <main+0x15a>
			}
			else{
				PORTC = 0x0E;
 2ee:	88 b8       	out	0x08, r8	; 8
			}
			
		ADMUX = 0xC5;
 2f0:	f8 01       	movw	r30, r16
 2f2:	e0 82       	st	Z, r14
		ADCSRA |= (1<<ADSC);
 2f4:	88 81       	ld	r24, Y
 2f6:	80 64       	ori	r24, 0x40	; 64
 2f8:	88 83       	st	Y, r24
 2fa:	81 ee       	ldi	r24, 0xE1	; 225
 2fc:	94 e0       	ldi	r25, 0x04	; 4
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0x168>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x16e>
		_delay_ms(5);
		
		f = ReadADC(5);
 304:	00 00       	nop
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	22 df       	rcall	.-444    	; 0x14e <ReadADC>
 30a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <f+0x1>
 30e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <f>
			if(f > 150){
 312:	87 39       	cpi	r24, 0x97	; 151
 314:	91 05       	cpc	r25, r1
 316:	10 f0       	brcs	.+4      	; 0x31c <main+0x186>
				PORTC = 0x00;
 318:	18 b8       	out	0x08, r1	; 8
 31a:	01 c0       	rjmp	.+2      	; 0x31e <main+0x188>
			}
			else{
				PORTC = 0x07;
 31c:	f8 b8       	out	0x08, r15	; 8
			}
			
		ADMUX = 0xC6;
 31e:	86 ec       	ldi	r24, 0xC6	; 198
 320:	f8 01       	movw	r30, r16
 322:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
 324:	88 81       	ld	r24, Y
 326:	80 64       	ori	r24, 0x40	; 64
 328:	88 83       	st	Y, r24
 32a:	81 ee       	ldi	r24, 0xE1	; 225
 32c:	94 e0       	ldi	r25, 0x04	; 4
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0x198>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x19e>
		_delay_ms(5);
		
		g = ReadADC(6);
 334:	00 00       	nop
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	0a df       	rcall	.-492    	; 0x14e <ReadADC>
 33a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <g+0x1>
 33e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g>
			if(g > 150){
 342:	87 39       	cpi	r24, 0x97	; 151
 344:	91 05       	cpc	r25, r1
 346:	10 f0       	brcs	.+4      	; 0x34c <main+0x1b6>
				PORTC = 0x00;
 348:	18 b8       	out	0x08, r1	; 8
 34a:	02 c0       	rjmp	.+4      	; 0x350 <main+0x1ba>
			}
			else{
				PORTC = 0x03;
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	88 b9       	out	0x08, r24	; 8
			}
			
		ADMUX = 0xC7;
 350:	87 ec       	ldi	r24, 0xC7	; 199
 352:	f8 01       	movw	r30, r16
 354:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
 356:	88 81       	ld	r24, Y
 358:	80 64       	ori	r24, 0x40	; 64
 35a:	88 83       	st	Y, r24
 35c:	81 ee       	ldi	r24, 0xE1	; 225
 35e:	94 e0       	ldi	r25, 0x04	; 4
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x1ca>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x1d0>
		_delay_ms(5);
		
		h = ReadADC(7);
 366:	00 00       	nop
 368:	8f 2d       	mov	r24, r15
 36a:	f1 de       	rcall	.-542    	; 0x14e <ReadADC>
 36c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <h+0x1>
 370:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <h>
		if(h > 150){
 374:	87 39       	cpi	r24, 0x97	; 151
 376:	91 05       	cpc	r25, r1
 378:	10 f0       	brcs	.+4      	; 0x37e <main+0x1e8>
			PORTC = 0x00;
 37a:	18 b8       	out	0x08, r1	; 8
 37c:	46 cf       	rjmp	.-372    	; 0x20a <main+0x74>
		}
		else{
			PORTC = 0x01;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	88 b9       	out	0x08, r24	; 8
 382:	43 cf       	rjmp	.-378    	; 0x20a <main+0x74>

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
