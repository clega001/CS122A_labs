
one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000278  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c00  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096b  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000539  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004de  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000245  00000000  00000000  0000246a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000026af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	69 d0       	rcall	.+210    	; 0x196 <main>
  c4:	d7 c0       	rjmp	.+430    	; 0x274 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_13>:
	set_PWM(0);
}

void PWM_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_cntcurr>
  de:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x1>
  e2:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x2>
  e6:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x3>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	a1 09       	sbc	r26, r1
  ee:	b1 09       	sbc	r27, r1
  f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
  f4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
  f8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
  fc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 100:	89 2b       	or	r24, r25
 102:	8a 2b       	or	r24, r26
 104:	8b 2b       	or	r24, r27
 106:	99 f4       	brne	.+38     	; 0x12e <__vector_13+0x66>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <TimerFlag>
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 116:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 11a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 122:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 126:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 12a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <ADC_init>:
//---------------------------------------------------------------------------

//taken from http://extremeelectronics.co.in/avr-tutorials/using-adc-of-avr-microcontroller/
void ADC_init()
{
	ADMUX=(1<<REFS1)|(1<<REFS0);                         // For Aref=AVcc;
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
 146:	8f e8       	ldi	r24, 0x8F	; 143
 148:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 14c:	08 95       	ret

0000014e <ReadADC>:
uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	
	ADMUX|=ch;
 14e:	ec e7       	ldi	r30, 0x7C	; 124
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	87 70       	andi	r24, 0x07	; 7
 156:	98 2b       	or	r25, r24
 158:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <ReadADC+0x10>
 162:	00 c0       	rjmp	.+0      	; 0x164 <ReadADC+0x16>
 164:	00 00       	nop
	
	// I added here: allows time to switch between analog channels
	_delay_ms(1);

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 166:	ea e7       	ldi	r30, 0x7A	; 122
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <ReadADC+0x26>
 178:	00 c0       	rjmp	.+0      	; 0x17a <ReadADC+0x2c>
 17a:	00 00       	nop
	
	_delay_ms(1);

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 17c:	80 81       	ld	r24, Z
 17e:	84 ff       	sbrs	r24, 4
 180:	fd cf       	rjmp	.-6      	; 0x17c <ReadADC+0x2e>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	80 83       	st	Z, r24

	return(ADC);
 18c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 190:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 194:	08 95       	ret

00000196 <main>:

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// Implement scheduler code from PES.
int main(){
	DDRA = 0x00; PORTA = 0xFF;
 196:	11 b8       	out	0x01, r1	; 1
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 19c:	84 b9       	out	0x04, r24	; 4
 19e:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 1a0:	8a b9       	out	0x0a, r24	; 10
 1a2:	1b b8       	out	0x0b, r1	; 11
// 	sei();
// 	
// 	ADCSRA |= (1<<ADSC); //Start ADC Conversion 
	
	
	ADC_init();
 1a4:	cd df       	rcall	.-102    	; 0x140 <ADC_init>
	ADMUX = 0xC1;
 1a6:	81 ec       	ldi	r24, 0xC1	; 193
 1a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC); //Start ADC Conversion
 1ac:	ea e7       	ldi	r30, 0x7A	; 122
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	80 83       	st	Z, r24
 1b6:	81 ee       	ldi	r24, 0xE1	; 225
 1b8:	94 e0       	ldi	r25, 0x04	; 4
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x24>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x2a>
 1c0:	00 00       	nop
			}
			else if(t > 100){
				PORTB = 0x02;
			}
			else{
				PORTB = 0x04;
 1c2:	68 94       	set
 1c4:	cc 24       	eor	r12, r12
 1c6:	c2 f8       	bld	r12, 2
		//t = ADC;
			if(t > 240){
				PORTB = 0x01;
			}
			else if(t > 100){
				PORTB = 0x02;
 1c8:	68 94       	set
 1ca:	ff 24       	eor	r15, r15
 1cc:	f1 f8       	bld	r15, 1
			else{
				PORTB = 0x04;
			}	
			
		_delay_ms(10);
		ADMUX = 0xC2;
 1ce:	0c e7       	ldi	r16, 0x7C	; 124
 1d0:	10 e0       	ldi	r17, 0x00	; 0
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f2 ec       	ldi	r31, 0xC2	; 194
 1d6:	df 2e       	mov	r13, r31
 1d8:	f0 2d       	mov	r31, r0
		ADCSRA |= (1<<ADSC);
 1da:	ca e7       	ldi	r28, 0x7A	; 122
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
			else{
				PORTD = 0x04;
			}

		_delay_ms(10);
		ADMUX = 0xC1;
 1de:	0f 2e       	mov	r0, r31
 1e0:	f1 ec       	ldi	r31, 0xC1	; 193
 1e2:	ef 2e       	mov	r14, r31
 1e4:	f0 2d       	mov	r31, r0
	ADCSRA |= (1<<ADSC); //Start ADC Conversion
	_delay_ms(5); 
	

	while(1) {
		t = ReadADC(1);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	b2 df       	rcall	.-156    	; 0x14e <ReadADC>
 1ea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <t+0x1>
 1ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <t>
		//t = ADC;
			if(t > 240){
 1f2:	81 3f       	cpi	r24, 0xF1	; 241
 1f4:	91 05       	cpc	r25, r1
 1f6:	18 f0       	brcs	.+6      	; 0x1fe <main+0x68>
				PORTB = 0x01;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <main+0x74>
			}
			else if(t > 100){
 1fe:	85 36       	cpi	r24, 0x65	; 101
 200:	91 05       	cpc	r25, r1
 202:	10 f0       	brcs	.+4      	; 0x208 <main+0x72>
				PORTB = 0x02;
 204:	f5 b8       	out	0x05, r15	; 5
 206:	01 c0       	rjmp	.+2      	; 0x20a <main+0x74>
			}
			else{
				PORTB = 0x04;
 208:	c5 b8       	out	0x05, r12	; 5
 20a:	e3 ec       	ldi	r30, 0xC3	; 195
 20c:	f9 e0       	ldi	r31, 0x09	; 9
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0x78>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x7e>
 214:	00 00       	nop
			}	
			
		_delay_ms(10);
		ADMUX = 0xC2;
 216:	f8 01       	movw	r30, r16
 218:	d0 82       	st	Z, r13
		ADCSRA |= (1<<ADSC);
 21a:	88 81       	ld	r24, Y
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	88 83       	st	Y, r24
 220:	81 ee       	ldi	r24, 0xE1	; 225
 222:	94 e0       	ldi	r25, 0x04	; 4
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x8e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x94>
		_delay_ms(5);
		
		k = ReadADC(2);
 22a:	00 00       	nop
 22c:	8f 2d       	mov	r24, r15
 22e:	8f df       	rcall	.-226    	; 0x14e <ReadADC>
 230:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 234:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		//k = ADC;
			if(k > 240){
 238:	81 3f       	cpi	r24, 0xF1	; 241
 23a:	91 05       	cpc	r25, r1
 23c:	18 f0       	brcs	.+6      	; 0x244 <main+0xae>
				PORTD = 0x01;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	8b b9       	out	0x0b, r24	; 11
 242:	06 c0       	rjmp	.+12     	; 0x250 <main+0xba>
			}
			else if(k > 100){
 244:	85 36       	cpi	r24, 0x65	; 101
 246:	91 05       	cpc	r25, r1
 248:	10 f0       	brcs	.+4      	; 0x24e <main+0xb8>
				PORTD = 0x02;
 24a:	fb b8       	out	0x0b, r15	; 11
 24c:	01 c0       	rjmp	.+2      	; 0x250 <main+0xba>
			}
			else{
				PORTD = 0x04;
 24e:	cb b8       	out	0x0b, r12	; 11
 250:	e3 ec       	ldi	r30, 0xC3	; 195
 252:	f9 e0       	ldi	r31, 0x09	; 9
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0xbe>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0xc4>
 25a:	00 00       	nop
			}

		_delay_ms(10);
		ADMUX = 0xC1;
 25c:	f8 01       	movw	r30, r16
 25e:	e0 82       	st	Z, r14
		ADCSRA |= (1<<ADSC);
 260:	88 81       	ld	r24, Y
 262:	80 64       	ori	r24, 0x40	; 64
 264:	88 83       	st	Y, r24
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0xd4>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0xda>
 270:	00 00       	nop
 272:	b9 cf       	rjmp	.-142    	; 0x1e6 <main+0x50>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
