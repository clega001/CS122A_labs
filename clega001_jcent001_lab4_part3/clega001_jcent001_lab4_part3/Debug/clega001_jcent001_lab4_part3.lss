
clega001_jcent001_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c70  00000d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063e  00800110  00800110  00000d14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028a9  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ee  00000000  00000000  00004737  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f69  00000000  00000000  000064dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  00007445  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b4 c2       	rjmp	.+1384   	; 0x59e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0b d1       	rcall	.+534    	; 0x2da <main>
  c4:	d3 c5       	rjmp	.+2982   	; 0xc6c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	22 d4       	rcall	.+2116   	; 0x914 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
  ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 108:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	b4 d4       	rcall	.+2408   	; 0xa8e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LEDS_Tick>:
	led_state = INIT;
}

void LEDS_Tick(){
	//Actions
	switch(led_state){
 246:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	39 f0       	breq	.+14     	; 0x25c <LEDS_Tick+0x16>
 24e:	18 f0       	brcs	.+6      	; 0x256 <LEDS_Tick+0x10>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	41 f0       	breq	.+16     	; 0x264 <LEDS_Tick+0x1e>
 254:	0b c0       	rjmp	.+22     	; 0x26c <LEDS_Tick+0x26>
		case INIT:
		PORTD = 0x01;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	8b b9       	out	0x0b, r24	; 11
		break;
 25a:	09 c0       	rjmp	.+18     	; 0x26e <LEDS_Tick+0x28>
		case L0:
		PORTD = PORTD << 1;
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	88 0f       	add	r24, r24
 260:	8b b9       	out	0x0b, r24	; 11
		break;
 262:	05 c0       	rjmp	.+10     	; 0x26e <LEDS_Tick+0x28>
		case L1:
		PORTD = PORTD >> 1;
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	86 95       	lsr	r24
 268:	8b b9       	out	0x0b, r24	; 11
		break;
 26a:	01 c0       	rjmp	.+2      	; 0x26e <LEDS_Tick+0x28>
		default:
		PORTD = 0;
 26c:	1b b8       	out	0x0b, r1	; 11
		break;
	}
	//Transitions
	switch(led_state){
 26e:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	41 f0       	breq	.+16     	; 0x286 <LEDS_Tick+0x40>
 276:	18 f0       	brcs	.+6      	; 0x27e <LEDS_Tick+0x38>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	61 f0       	breq	.+24     	; 0x294 <LEDS_Tick+0x4e>
 27c:	11 c0       	rjmp	.+34     	; 0x2a0 <LEDS_Tick+0x5a>
		case INIT:
		led_state = L0;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
		break;
 284:	08 95       	ret
		case L0:
		if(PORTD != 0x80){
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	80 38       	cpi	r24, 0x80	; 128
 28a:	61 f4       	brne	.+24     	; 0x2a4 <LEDS_Tick+0x5e>
			led_state = L0;
			break;
		}
		else{
			led_state = L1;
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
			break;
 292:	08 95       	ret
		}
		case L1:
		if(PORTD != 0x01){
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	29 f4       	brne	.+10     	; 0x2a4 <LEDS_Tick+0x5e>
			led_state = L1;
			break;
		}
		else{
			led_state = L0;
 29a:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
			break;
 29e:	08 95       	ret
		}
		default:
		led_state = INIT;
 2a0:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
 2a4:	08 95       	ret

000002a6 <LedSecTask>:
#include "task.h"
#include "croutine.h"
enum LEDState {INIT,L0,L1} led_state;

void LEDS_Init(){
	led_state = INIT;
 2a6:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
}

void LedSecTask() {
	LEDS_Init();
	for(;;) {
		LEDS_Tick();
 2aa:	cd df       	rcall	.-102    	; 0x246 <LEDS_Tick>
		vTaskDelay(100);
 2ac:	84 e6       	ldi	r24, 0x64	; 100
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	67 d4       	rcall	.+2254   	; 0xb80 <vTaskDelay>
 2b2:	fb cf       	rjmp	.-10     	; 0x2aa <LedSecTask+0x4>

000002b4 <StartSecPulse>:
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
	xTaskCreate(LedSecTask,
 2ba:	e1 2c       	mov	r14, r1
 2bc:	f1 2c       	mov	r15, r1
 2be:	08 2f       	mov	r16, r24
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	45 e5       	ldi	r20, 0x55	; 85
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	71 e0       	ldi	r23, 0x01	; 1
 2cc:	83 e5       	ldi	r24, 0x53	; 83
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	fc d1       	rcall	.+1016   	; 0x6ca <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	08 95       	ret

000002da <main>:

int main(void) {
	DDRA = 0x00; PORTA=0xFF;
 2da:	11 b8       	out	0x01, r1	; 1
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;
 2e0:	8a b9       	out	0x0a, r24	; 10
	//Start Tasks
	StartSecPulse(1);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	e7 df       	rcall	.-50     	; 0x2b4 <StartSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 2e6:	ee d2       	rcall	.+1500   	; 0x8c4 <vTaskStartScheduler>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	08 95       	ret

000002ee <pxPortInitialiseStack>:
 2ee:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2f0:	fc 01       	movw	r30, r24
 2f2:	30 83       	st	Z, r19
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	22 e2       	ldi	r18, 0x22	; 34
 2f8:	20 83       	st	Z, r18
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	a3 e3       	ldi	r26, 0x33	; 51
 2fe:	a0 83       	st	Z, r26
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	60 83       	st	Z, r22
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	70 83       	st	Z, r23
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	10 82       	st	Z, r1
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	60 e8       	ldi	r22, 0x80	; 128
 310:	60 83       	st	Z, r22
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	10 82       	st	Z, r1
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	60 83       	st	Z, r22
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	60 83       	st	Z, r22
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	64 e0       	ldi	r22, 0x04	; 4
 326:	60 83       	st	Z, r22
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	60 83       	st	Z, r22
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	66 e0       	ldi	r22, 0x06	; 6
 332:	60 83       	st	Z, r22
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	67 e0       	ldi	r22, 0x07	; 7
 338:	60 83       	st	Z, r22
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	68 e0       	ldi	r22, 0x08	; 8
 33e:	60 83       	st	Z, r22
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	69 e0       	ldi	r22, 0x09	; 9
 344:	60 83       	st	Z, r22
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	60 e1       	ldi	r22, 0x10	; 16
 34a:	60 83       	st	Z, r22
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	30 83       	st	Z, r19
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	32 e1       	ldi	r19, 0x12	; 18
 354:	30 83       	st	Z, r19
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	33 e1       	ldi	r19, 0x13	; 19
 35a:	30 83       	st	Z, r19
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	34 e1       	ldi	r19, 0x14	; 20
 360:	30 83       	st	Z, r19
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	35 e1       	ldi	r19, 0x15	; 21
 366:	30 83       	st	Z, r19
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	36 e1       	ldi	r19, 0x16	; 22
 36c:	30 83       	st	Z, r19
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	37 e1       	ldi	r19, 0x17	; 23
 372:	30 83       	st	Z, r19
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	38 e1       	ldi	r19, 0x18	; 24
 378:	30 83       	st	Z, r19
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	39 e1       	ldi	r19, 0x19	; 25
 37e:	30 83       	st	Z, r19
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	30 e2       	ldi	r19, 0x20	; 32
 384:	30 83       	st	Z, r19
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	31 e2       	ldi	r19, 0x21	; 33
 38a:	30 83       	st	Z, r19
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	20 83       	st	Z, r18
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	23 e2       	ldi	r18, 0x23	; 35
 394:	20 83       	st	Z, r18
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	40 83       	st	Z, r20
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	50 83       	st	Z, r21
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	26 e2       	ldi	r18, 0x26	; 38
 3a2:	20 83       	st	Z, r18
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	27 e2       	ldi	r18, 0x27	; 39
 3a8:	20 83       	st	Z, r18
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	28 e2       	ldi	r18, 0x28	; 40
 3ae:	20 83       	st	Z, r18
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	29 e2       	ldi	r18, 0x29	; 41
 3b4:	20 83       	st	Z, r18
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	20 e3       	ldi	r18, 0x30	; 48
 3ba:	20 83       	st	Z, r18
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	21 e3       	ldi	r18, 0x31	; 49
 3c0:	20 83       	st	Z, r18
 3c2:	86 97       	sbiw	r24, 0x26	; 38
 3c4:	08 95       	ret

000003c6 <xPortStartScheduler>:
 3c6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3ca:	8c e7       	ldi	r24, 0x7C	; 124
 3cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3d0:	8b e0       	ldi	r24, 0x0B	; 11
 3d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3d6:	ef e6       	ldi	r30, 0x6F	; 111
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
 3e0:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 3e4:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 3e8:	cd 91       	ld	r28, X+
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	dd 91       	ld	r29, X+
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	bf 90       	pop	r11
 41a:	af 90       	pop	r10
 41c:	9f 90       	pop	r9
 41e:	8f 90       	pop	r8
 420:	7f 90       	pop	r7
 422:	6f 90       	pop	r6
 424:	5f 90       	pop	r5
 426:	4f 90       	pop	r4
 428:	3f 90       	pop	r3
 42a:	2f 90       	pop	r2
 42c:	1f 90       	pop	r1
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	08 95       	ret
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	08 95       	ret

0000043a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	0f 92       	push	r0
 442:	1f 92       	push	r1
 444:	11 24       	eor	r1, r1
 446:	2f 92       	push	r2
 448:	3f 92       	push	r3
 44a:	4f 92       	push	r4
 44c:	5f 92       	push	r5
 44e:	6f 92       	push	r6
 450:	7f 92       	push	r7
 452:	8f 92       	push	r8
 454:	9f 92       	push	r9
 456:	af 92       	push	r10
 458:	bf 92       	push	r11
 45a:	cf 92       	push	r12
 45c:	df 92       	push	r13
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
 482:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 486:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 48a:	0d b6       	in	r0, 0x3d	; 61
 48c:	0d 92       	st	X+, r0
 48e:	0e b6       	in	r0, 0x3e	; 62
 490:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 492:	86 d3       	rcall	.+1804   	; 0xba0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 494:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 498:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 49c:	cd 91       	ld	r28, X+
 49e:	cd bf       	out	0x3d, r28	; 61
 4a0:	dd 91       	ld	r29, X+
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	df 90       	pop	r13
 4ca:	cf 90       	pop	r12
 4cc:	bf 90       	pop	r11
 4ce:	af 90       	pop	r10
 4d0:	9f 90       	pop	r9
 4d2:	8f 90       	pop	r8
 4d4:	7f 90       	pop	r7
 4d6:	6f 90       	pop	r6
 4d8:	5f 90       	pop	r5
 4da:	4f 90       	pop	r4
 4dc:	3f 90       	pop	r3
 4de:	2f 90       	pop	r2
 4e0:	1f 90       	pop	r1
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4e8:	08 95       	ret

000004ea <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	0f 92       	push	r0
 4f2:	1f 92       	push	r1
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 92       	push	r2
 4f8:	3f 92       	push	r3
 4fa:	4f 92       	push	r4
 4fc:	5f 92       	push	r5
 4fe:	6f 92       	push	r6
 500:	7f 92       	push	r7
 502:	8f 92       	push	r8
 504:	9f 92       	push	r9
 506:	af 92       	push	r10
 508:	bf 92       	push	r11
 50a:	cf 92       	push	r12
 50c:	df 92       	push	r13
 50e:	ef 92       	push	r14
 510:	ff 92       	push	r15
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	6f 93       	push	r22
 520:	7f 93       	push	r23
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
 532:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 536:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 53a:	0d b6       	in	r0, 0x3d	; 61
 53c:	0d 92       	st	X+, r0
 53e:	0e b6       	in	r0, 0x3e	; 62
 540:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 542:	ee d1       	rcall	.+988    	; 0x920 <xTaskIncrementTick>
 544:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 546:	2c d3       	rcall	.+1624   	; 0xba0 <vTaskSwitchContext>
 548:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 54c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 550:	cd 91       	ld	r28, X+
 552:	cd bf       	out	0x3d, r28	; 61
 554:	dd 91       	ld	r29, X+
 556:	de bf       	out	0x3e, r29	; 62
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	df 90       	pop	r13
 57e:	cf 90       	pop	r12
 580:	bf 90       	pop	r11
 582:	af 90       	pop	r10
 584:	9f 90       	pop	r9
 586:	8f 90       	pop	r8
 588:	7f 90       	pop	r7
 58a:	6f 90       	pop	r6
 58c:	5f 90       	pop	r5
 58e:	4f 90       	pop	r4
 590:	3f 90       	pop	r3
 592:	2f 90       	pop	r2
 594:	1f 90       	pop	r1
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	08 95       	ret

0000059e <__vector_13>:

	asm volatile ( "ret" );
 59e:	a5 df       	rcall	.-182    	; 0x4ea <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 5a0:	18 95       	reti

000005a2 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 5a2:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5a6:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5aa:	80 81       	ld	r24, Z
 5ac:	81 11       	cpse	r24, r1
 5ae:	07 c0       	rjmp	.+14     	; 0x5be <prvResetNextTaskUnblockTime+0x1c>
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	9f ef       	ldi	r25, 0xFF	; 255
 5b4:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5b8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5bc:	08 95       	ret
 5be:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5c2:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5c6:	05 80       	ldd	r0, Z+5	; 0x05
 5c8:	f6 81       	ldd	r31, Z+6	; 0x06
 5ca:	e0 2d       	mov	r30, r0
 5cc:	06 80       	ldd	r0, Z+6	; 0x06
 5ce:	f7 81       	ldd	r31, Z+7	; 0x07
 5d0:	e0 2d       	mov	r30, r0
 5d2:	82 81       	ldd	r24, Z+2	; 0x02
 5d4:	93 81       	ldd	r25, Z+3	; 0x03
 5d6:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5da:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5de:	08 95       	ret

000005e0 <prvIdleTask>:
 5e0:	0f ef       	ldi	r16, 0xFF	; 255
 5e2:	16 e0       	ldi	r17, 0x06	; 6
 5e4:	0f 2e       	mov	r0, r31
 5e6:	f7 e2       	ldi	r31, 0x27	; 39
 5e8:	ef 2e       	mov	r14, r31
 5ea:	f7 e0       	ldi	r31, 0x07	; 7
 5ec:	ff 2e       	mov	r15, r31
 5ee:	f0 2d       	mov	r31, r0
 5f0:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5f4:	88 23       	and	r24, r24
 5f6:	11 f1       	breq	.+68     	; 0x63c <prvIdleTask+0x5c>
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	f8 94       	cli
 5fc:	0f 92       	push	r0
 5fe:	d8 01       	movw	r26, r16
 600:	15 96       	adiw	r26, 0x05	; 5
 602:	ed 91       	ld	r30, X+
 604:	fc 91       	ld	r31, X
 606:	16 97       	sbiw	r26, 0x06	; 6
 608:	c6 81       	ldd	r28, Z+6	; 0x06
 60a:	d7 81       	ldd	r29, Z+7	; 0x07
 60c:	ce 01       	movw	r24, r28
 60e:	02 96       	adiw	r24, 0x02	; 2
 610:	f3 dd       	rcall	.-1050   	; 0x1f8 <uxListRemove>
 612:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 616:	81 50       	subi	r24, 0x01	; 1
 618:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 61c:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 620:	81 50       	subi	r24, 0x01	; 1
 622:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	8f 89       	ldd	r24, Y+23	; 0x17
 62c:	98 8d       	ldd	r25, Y+24	; 0x18
 62e:	7f dd       	rcall	.-1282   	; 0x12e <vPortFree>
 630:	ce 01       	movw	r24, r28
 632:	7d dd       	rcall	.-1286   	; 0x12e <vPortFree>
 634:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 638:	81 11       	cpse	r24, r1
 63a:	de cf       	rjmp	.-68     	; 0x5f8 <prvIdleTask+0x18>
 63c:	f7 01       	movw	r30, r14
 63e:	80 81       	ld	r24, Z
 640:	82 30       	cpi	r24, 0x02	; 2
 642:	b0 f2       	brcs	.-84     	; 0x5f0 <prvIdleTask+0x10>
 644:	fa de       	rcall	.-524    	; 0x43a <vPortYield>
 646:	d4 cf       	rjmp	.-88     	; 0x5f0 <prvIdleTask+0x10>

00000648 <prvAddCurrentTaskToDelayedList>:
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	ec 01       	movw	r28, r24
 652:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 656:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 65a:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 65e:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 662:	02 96       	adiw	r24, 0x02	; 2
 664:	c9 dd       	rcall	.-1134   	; 0x1f8 <uxListRemove>
 666:	c0 0f       	add	r28, r16
 668:	d1 1f       	adc	r29, r17
 66a:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 66e:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 672:	d3 83       	std	Z+3, r29	; 0x03
 674:	c2 83       	std	Z+2, r28	; 0x02
 676:	c0 17       	cp	r28, r16
 678:	d1 07       	cpc	r29, r17
 67a:	60 f4       	brcc	.+24     	; 0x694 <prvAddCurrentTaskToDelayedList+0x4c>
 67c:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 680:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 684:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 688:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 68c:	6e 5f       	subi	r22, 0xFE	; 254
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	82 dd       	rcall	.-1276   	; 0x196 <vListInsert>
 692:	16 c0       	rjmp	.+44     	; 0x6c0 <prvAddCurrentTaskToDelayedList+0x78>
 694:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 698:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 69c:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 6a0:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 6a4:	6e 5f       	subi	r22, 0xFE	; 254
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	76 dd       	rcall	.-1300   	; 0x196 <vListInsert>
 6aa:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 6ae:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6b2:	c8 17       	cp	r28, r24
 6b4:	d9 07       	cpc	r29, r25
 6b6:	20 f4       	brcc	.+8      	; 0x6c0 <prvAddCurrentTaskToDelayedList+0x78>
 6b8:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6bc:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	08 95       	ret

000006ca <xTaskCreate>:
 6ca:	4f 92       	push	r4
 6cc:	5f 92       	push	r5
 6ce:	6f 92       	push	r6
 6d0:	7f 92       	push	r7
 6d2:	8f 92       	push	r8
 6d4:	9f 92       	push	r9
 6d6:	af 92       	push	r10
 6d8:	bf 92       	push	r11
 6da:	cf 92       	push	r12
 6dc:	df 92       	push	r13
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	4c 01       	movw	r8, r24
 6ea:	6b 01       	movw	r12, r22
 6ec:	5a 01       	movw	r10, r20
 6ee:	29 01       	movw	r4, r18
 6f0:	ca 01       	movw	r24, r20
 6f2:	ea dc       	rcall	.-1580   	; 0xc8 <pvPortMalloc>
 6f4:	3c 01       	movw	r6, r24
 6f6:	89 2b       	or	r24, r25
 6f8:	09 f4       	brne	.+2      	; 0x6fc <xTaskCreate+0x32>
 6fa:	d3 c0       	rjmp	.+422    	; 0x8a2 <xTaskCreate+0x1d8>
 6fc:	86 e2       	ldi	r24, 0x26	; 38
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	e3 dc       	rcall	.-1594   	; 0xc8 <pvPortMalloc>
 702:	ec 01       	movw	r28, r24
 704:	89 2b       	or	r24, r25
 706:	59 f0       	breq	.+22     	; 0x71e <xTaskCreate+0x54>
 708:	78 8e       	std	Y+24, r7	; 0x18
 70a:	6f 8a       	std	Y+23, r6	; 0x17
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	a8 1a       	sub	r10, r24
 710:	b1 08       	sbc	r11, r1
 712:	a6 0c       	add	r10, r6
 714:	b7 1c       	adc	r11, r7
 716:	c1 14       	cp	r12, r1
 718:	d1 04       	cpc	r13, r1
 71a:	21 f4       	brne	.+8      	; 0x724 <xTaskCreate+0x5a>
 71c:	1f c0       	rjmp	.+62     	; 0x75c <xTaskCreate+0x92>
 71e:	c3 01       	movw	r24, r6
 720:	06 dd       	rcall	.-1524   	; 0x12e <vPortFree>
 722:	bf c0       	rjmp	.+382    	; 0x8a2 <xTaskCreate+0x1d8>
 724:	d6 01       	movw	r26, r12
 726:	8c 91       	ld	r24, X
 728:	89 8f       	std	Y+25, r24	; 0x19
 72a:	8c 91       	ld	r24, X
 72c:	88 23       	and	r24, r24
 72e:	a1 f0       	breq	.+40     	; 0x758 <xTaskCreate+0x8e>
 730:	ae 01       	movw	r20, r28
 732:	46 5e       	subi	r20, 0xE6	; 230
 734:	5f 4f       	sbci	r21, 0xFF	; 255
 736:	f6 01       	movw	r30, r12
 738:	31 96       	adiw	r30, 0x01	; 1
 73a:	b8 e0       	ldi	r27, 0x08	; 8
 73c:	cb 0e       	add	r12, r27
 73e:	d1 1c       	adc	r13, r1
 740:	cf 01       	movw	r24, r30
 742:	21 91       	ld	r18, Z+
 744:	da 01       	movw	r26, r20
 746:	2d 93       	st	X+, r18
 748:	ad 01       	movw	r20, r26
 74a:	dc 01       	movw	r26, r24
 74c:	8c 91       	ld	r24, X
 74e:	88 23       	and	r24, r24
 750:	19 f0       	breq	.+6      	; 0x758 <xTaskCreate+0x8e>
 752:	ec 15       	cp	r30, r12
 754:	fd 05       	cpc	r31, r13
 756:	a1 f7       	brne	.-24     	; 0x740 <xTaskCreate+0x76>
 758:	18 a2       	std	Y+32, r1	; 0x20
 75a:	01 c0       	rjmp	.+2      	; 0x75e <xTaskCreate+0x94>
 75c:	19 8e       	std	Y+25, r1	; 0x19
 75e:	04 30       	cpi	r16, 0x04	; 4
 760:	08 f0       	brcs	.+2      	; 0x764 <xTaskCreate+0x9a>
 762:	03 e0       	ldi	r16, 0x03	; 3
 764:	0e 8b       	std	Y+22, r16	; 0x16
 766:	6e 01       	movw	r12, r28
 768:	b2 e0       	ldi	r27, 0x02	; 2
 76a:	cb 0e       	add	r12, r27
 76c:	d1 1c       	adc	r13, r1
 76e:	c6 01       	movw	r24, r12
 770:	ed dc       	rcall	.-1574   	; 0x14c <vListInitialiseItem>
 772:	ce 01       	movw	r24, r28
 774:	0c 96       	adiw	r24, 0x0c	; 12
 776:	ea dc       	rcall	.-1580   	; 0x14c <vListInitialiseItem>
 778:	d9 87       	std	Y+9, r29	; 0x09
 77a:	c8 87       	std	Y+8, r28	; 0x08
 77c:	84 e0       	ldi	r24, 0x04	; 4
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	80 1b       	sub	r24, r16
 782:	91 09       	sbc	r25, r1
 784:	9d 87       	std	Y+13, r25	; 0x0d
 786:	8c 87       	std	Y+12, r24	; 0x0c
 788:	db 8b       	std	Y+19, r29	; 0x13
 78a:	ca 8b       	std	Y+18, r28	; 0x12
 78c:	19 a2       	std	Y+33, r1	; 0x21
 78e:	1a a2       	std	Y+34, r1	; 0x22
 790:	1b a2       	std	Y+35, r1	; 0x23
 792:	1c a2       	std	Y+36, r1	; 0x24
 794:	1d a2       	std	Y+37, r1	; 0x25
 796:	a2 01       	movw	r20, r4
 798:	b4 01       	movw	r22, r8
 79a:	c5 01       	movw	r24, r10
 79c:	a8 dd       	rcall	.-1200   	; 0x2ee <pxPortInitialiseStack>
 79e:	99 83       	std	Y+1, r25	; 0x01
 7a0:	88 83       	st	Y, r24
 7a2:	e1 14       	cp	r14, r1
 7a4:	f1 04       	cpc	r15, r1
 7a6:	19 f0       	breq	.+6      	; 0x7ae <xTaskCreate+0xe4>
 7a8:	f7 01       	movw	r30, r14
 7aa:	d1 83       	std	Z+1, r29	; 0x01
 7ac:	c0 83       	st	Z, r28
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	0f 92       	push	r0
 7b4:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7b8:	8f 5f       	subi	r24, 0xFF	; 255
 7ba:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 7be:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 7c2:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 7c6:	89 2b       	or	r24, r25
 7c8:	69 f5       	brne	.+90     	; 0x824 <xTaskCreate+0x15a>
 7ca:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 7ce:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7d2:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	a9 f5       	brne	.+106    	; 0x844 <xTaskCreate+0x17a>
 7da:	87 e2       	ldi	r24, 0x27	; 39
 7dc:	97 e0       	ldi	r25, 0x07	; 7
 7de:	a8 dc       	rcall	.-1712   	; 0x130 <vListInitialise>
 7e0:	80 e3       	ldi	r24, 0x30	; 48
 7e2:	97 e0       	ldi	r25, 0x07	; 7
 7e4:	a5 dc       	rcall	.-1718   	; 0x130 <vListInitialise>
 7e6:	89 e3       	ldi	r24, 0x39	; 57
 7e8:	97 e0       	ldi	r25, 0x07	; 7
 7ea:	a2 dc       	rcall	.-1724   	; 0x130 <vListInitialise>
 7ec:	82 e4       	ldi	r24, 0x42	; 66
 7ee:	97 e0       	ldi	r25, 0x07	; 7
 7f0:	9f dc       	rcall	.-1730   	; 0x130 <vListInitialise>
 7f2:	8e e1       	ldi	r24, 0x1E	; 30
 7f4:	97 e0       	ldi	r25, 0x07	; 7
 7f6:	9c dc       	rcall	.-1736   	; 0x130 <vListInitialise>
 7f8:	85 e1       	ldi	r24, 0x15	; 21
 7fa:	97 e0       	ldi	r25, 0x07	; 7
 7fc:	99 dc       	rcall	.-1742   	; 0x130 <vListInitialise>
 7fe:	88 e0       	ldi	r24, 0x08	; 8
 800:	97 e0       	ldi	r25, 0x07	; 7
 802:	96 dc       	rcall	.-1748   	; 0x130 <vListInitialise>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	96 e0       	ldi	r25, 0x06	; 6
 808:	93 dc       	rcall	.-1754   	; 0x130 <vListInitialise>
 80a:	8e e1       	ldi	r24, 0x1E	; 30
 80c:	97 e0       	ldi	r25, 0x07	; 7
 80e:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 812:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 816:	85 e1       	ldi	r24, 0x15	; 21
 818:	97 e0       	ldi	r25, 0x07	; 7
 81a:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 81e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 822:	10 c0       	rjmp	.+32     	; 0x844 <xTaskCreate+0x17a>
 824:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 828:	81 11       	cpse	r24, r1
 82a:	0c c0       	rjmp	.+24     	; 0x844 <xTaskCreate+0x17a>
 82c:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 830:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 834:	96 89       	ldd	r25, Z+22	; 0x16
 836:	8e 89       	ldd	r24, Y+22	; 0x16
 838:	89 17       	cp	r24, r25
 83a:	20 f0       	brcs	.+8      	; 0x844 <xTaskCreate+0x17a>
 83c:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 840:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 844:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 848:	8f 5f       	subi	r24, 0xFF	; 255
 84a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 84e:	8e 89       	ldd	r24, Y+22	; 0x16
 850:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 854:	98 17       	cp	r25, r24
 856:	10 f4       	brcc	.+4      	; 0x85c <xTaskCreate+0x192>
 858:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	9c 01       	movw	r18, r24
 860:	22 0f       	add	r18, r18
 862:	33 1f       	adc	r19, r19
 864:	22 0f       	add	r18, r18
 866:	33 1f       	adc	r19, r19
 868:	22 0f       	add	r18, r18
 86a:	33 1f       	adc	r19, r19
 86c:	82 0f       	add	r24, r18
 86e:	93 1f       	adc	r25, r19
 870:	b6 01       	movw	r22, r12
 872:	89 5d       	subi	r24, 0xD9	; 217
 874:	98 4f       	sbci	r25, 0xF8	; 248
 876:	6e dc       	rcall	.-1828   	; 0x154 <vListInsertEnd>
 878:	0f 90       	pop	r0
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 880:	88 23       	and	r24, r24
 882:	59 f0       	breq	.+22     	; 0x89a <xTaskCreate+0x1d0>
 884:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 888:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 88c:	96 89       	ldd	r25, Z+22	; 0x16
 88e:	8e 89       	ldd	r24, Y+22	; 0x16
 890:	98 17       	cp	r25, r24
 892:	28 f4       	brcc	.+10     	; 0x89e <xTaskCreate+0x1d4>
 894:	d2 dd       	rcall	.-1116   	; 0x43a <vPortYield>
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	05 c0       	rjmp	.+10     	; 0x8a4 <xTaskCreate+0x1da>
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <xTaskCreate+0x1da>
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <xTaskCreate+0x1da>
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	0f 91       	pop	r16
 8aa:	ff 90       	pop	r15
 8ac:	ef 90       	pop	r14
 8ae:	df 90       	pop	r13
 8b0:	cf 90       	pop	r12
 8b2:	bf 90       	pop	r11
 8b4:	af 90       	pop	r10
 8b6:	9f 90       	pop	r9
 8b8:	8f 90       	pop	r8
 8ba:	7f 90       	pop	r7
 8bc:	6f 90       	pop	r6
 8be:	5f 90       	pop	r5
 8c0:	4f 90       	pop	r4
 8c2:	08 95       	ret

000008c4 <vTaskStartScheduler>:
 8c4:	ef 92       	push	r14
 8c6:	ff 92       	push	r15
 8c8:	0f 93       	push	r16
 8ca:	0f 2e       	mov	r0, r31
 8cc:	f1 ef       	ldi	r31, 0xF1	; 241
 8ce:	ef 2e       	mov	r14, r31
 8d0:	f6 e0       	ldi	r31, 0x06	; 6
 8d2:	ff 2e       	mov	r15, r31
 8d4:	f0 2d       	mov	r31, r0
 8d6:	00 e0       	ldi	r16, 0x00	; 0
 8d8:	20 e0       	ldi	r18, 0x00	; 0
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	45 e5       	ldi	r20, 0x55	; 85
 8de:	50 e0       	ldi	r21, 0x00	; 0
 8e0:	6b e0       	ldi	r22, 0x0B	; 11
 8e2:	71 e0       	ldi	r23, 0x01	; 1
 8e4:	80 ef       	ldi	r24, 0xF0	; 240
 8e6:	92 e0       	ldi	r25, 0x02	; 2
 8e8:	f0 de       	rcall	.-544    	; 0x6ca <xTaskCreate>
 8ea:	81 30       	cpi	r24, 0x01	; 1
 8ec:	79 f4       	brne	.+30     	; 0x90c <vTaskStartScheduler+0x48>
 8ee:	f8 94       	cli
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	9f ef       	ldi	r25, 0xFF	; 255
 8f4:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 8f8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 902:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 906:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 90a:	5d dd       	rcall	.-1350   	; 0x3c6 <xPortStartScheduler>
 90c:	0f 91       	pop	r16
 90e:	ff 90       	pop	r15
 910:	ef 90       	pop	r14
 912:	08 95       	ret

00000914 <vTaskSuspendAll>:
 914:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 918:	8f 5f       	subi	r24, 0xFF	; 255
 91a:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 91e:	08 95       	ret

00000920 <xTaskIncrementTick>:
 920:	cf 92       	push	r12
 922:	df 92       	push	r13
 924:	ef 92       	push	r14
 926:	ff 92       	push	r15
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 934:	81 11       	cpse	r24, r1
 936:	95 c0       	rjmp	.+298    	; 0xa62 <xTaskIncrementTick+0x142>
 938:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 93c:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	e8 1a       	sub	r14, r24
 944:	f8 0a       	sbc	r15, r24
 946:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 94a:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 94e:	e1 14       	cp	r14, r1
 950:	f1 04       	cpc	r15, r1
 952:	b1 f4       	brne	.+44     	; 0x980 <xTaskIncrementTick+0x60>
 954:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 958:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 95c:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 960:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 964:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 968:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 96c:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 970:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 974:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 978:	8f 5f       	subi	r24, 0xFF	; 255
 97a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 97e:	11 de       	rcall	.-990    	; 0x5a2 <prvResetNextTaskUnblockTime>
 980:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 984:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 988:	e8 16       	cp	r14, r24
 98a:	f9 06       	cpc	r15, r25
 98c:	10 f4       	brcc	.+4      	; 0x992 <xTaskIncrementTick+0x72>
 98e:	d1 2c       	mov	r13, r1
 990:	50 c0       	rjmp	.+160    	; 0xa32 <xTaskIncrementTick+0x112>
 992:	d1 2c       	mov	r13, r1
 994:	cc 24       	eor	r12, r12
 996:	c3 94       	inc	r12
 998:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 99c:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9a0:	80 81       	ld	r24, Z
 9a2:	81 11       	cpse	r24, r1
 9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <xTaskIncrementTick+0x94>
 9a6:	8f ef       	ldi	r24, 0xFF	; 255
 9a8:	9f ef       	ldi	r25, 0xFF	; 255
 9aa:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9ae:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9b2:	3f c0       	rjmp	.+126    	; 0xa32 <xTaskIncrementTick+0x112>
 9b4:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9b8:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9bc:	05 80       	ldd	r0, Z+5	; 0x05
 9be:	f6 81       	ldd	r31, Z+6	; 0x06
 9c0:	e0 2d       	mov	r30, r0
 9c2:	c6 81       	ldd	r28, Z+6	; 0x06
 9c4:	d7 81       	ldd	r29, Z+7	; 0x07
 9c6:	8a 81       	ldd	r24, Y+2	; 0x02
 9c8:	9b 81       	ldd	r25, Y+3	; 0x03
 9ca:	e8 16       	cp	r14, r24
 9cc:	f9 06       	cpc	r15, r25
 9ce:	28 f4       	brcc	.+10     	; 0x9da <xTaskIncrementTick+0xba>
 9d0:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9d4:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9d8:	2c c0       	rjmp	.+88     	; 0xa32 <xTaskIncrementTick+0x112>
 9da:	8e 01       	movw	r16, r28
 9dc:	0e 5f       	subi	r16, 0xFE	; 254
 9de:	1f 4f       	sbci	r17, 0xFF	; 255
 9e0:	c8 01       	movw	r24, r16
 9e2:	0a dc       	rcall	.-2028   	; 0x1f8 <uxListRemove>
 9e4:	8c 89       	ldd	r24, Y+20	; 0x14
 9e6:	9d 89       	ldd	r25, Y+21	; 0x15
 9e8:	89 2b       	or	r24, r25
 9ea:	19 f0       	breq	.+6      	; 0x9f2 <xTaskIncrementTick+0xd2>
 9ec:	ce 01       	movw	r24, r28
 9ee:	0c 96       	adiw	r24, 0x0c	; 12
 9f0:	03 dc       	rcall	.-2042   	; 0x1f8 <uxListRemove>
 9f2:	8e 89       	ldd	r24, Y+22	; 0x16
 9f4:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 9f8:	98 17       	cp	r25, r24
 9fa:	10 f4       	brcc	.+4      	; 0xa00 <xTaskIncrementTick+0xe0>
 9fc:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	9c 01       	movw	r18, r24
 a04:	22 0f       	add	r18, r18
 a06:	33 1f       	adc	r19, r19
 a08:	22 0f       	add	r18, r18
 a0a:	33 1f       	adc	r19, r19
 a0c:	22 0f       	add	r18, r18
 a0e:	33 1f       	adc	r19, r19
 a10:	82 0f       	add	r24, r18
 a12:	93 1f       	adc	r25, r19
 a14:	b8 01       	movw	r22, r16
 a16:	89 5d       	subi	r24, 0xD9	; 217
 a18:	98 4f       	sbci	r25, 0xF8	; 248
 a1a:	9c db       	rcall	.-2248   	; 0x154 <vListInsertEnd>
 a1c:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a20:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a24:	9e 89       	ldd	r25, Y+22	; 0x16
 a26:	86 89       	ldd	r24, Z+22	; 0x16
 a28:	98 17       	cp	r25, r24
 a2a:	08 f4       	brcc	.+2      	; 0xa2e <xTaskIncrementTick+0x10e>
 a2c:	b5 cf       	rjmp	.-150    	; 0x998 <xTaskIncrementTick+0x78>
 a2e:	dc 2c       	mov	r13, r12
 a30:	b3 cf       	rjmp	.-154    	; 0x998 <xTaskIncrementTick+0x78>
 a32:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a36:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a3a:	86 89       	ldd	r24, Z+22	; 0x16
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	fc 01       	movw	r30, r24
 a40:	ee 0f       	add	r30, r30
 a42:	ff 1f       	adc	r31, r31
 a44:	ee 0f       	add	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	8e 0f       	add	r24, r30
 a4e:	9f 1f       	adc	r25, r31
 a50:	fc 01       	movw	r30, r24
 a52:	e9 5d       	subi	r30, 0xD9	; 217
 a54:	f8 4f       	sbci	r31, 0xF8	; 248
 a56:	80 81       	ld	r24, Z
 a58:	82 30       	cpi	r24, 0x02	; 2
 a5a:	48 f0       	brcs	.+18     	; 0xa6e <xTaskIncrementTick+0x14e>
 a5c:	dd 24       	eor	r13, r13
 a5e:	d3 94       	inc	r13
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <xTaskIncrementTick+0x14e>
 a62:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 a66:	8f 5f       	subi	r24, 0xFF	; 255
 a68:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 a6c:	d1 2c       	mov	r13, r1
 a6e:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 a72:	88 23       	and	r24, r24
 a74:	11 f0       	breq	.+4      	; 0xa7a <xTaskIncrementTick+0x15a>
 a76:	dd 24       	eor	r13, r13
 a78:	d3 94       	inc	r13
 a7a:	8d 2d       	mov	r24, r13
 a7c:	df 91       	pop	r29
 a7e:	cf 91       	pop	r28
 a80:	1f 91       	pop	r17
 a82:	0f 91       	pop	r16
 a84:	ff 90       	pop	r15
 a86:	ef 90       	pop	r14
 a88:	df 90       	pop	r13
 a8a:	cf 90       	pop	r12
 a8c:	08 95       	ret

00000a8e <xTaskResumeAll>:
 a8e:	df 92       	push	r13
 a90:	ef 92       	push	r14
 a92:	ff 92       	push	r15
 a94:	0f 93       	push	r16
 a96:	1f 93       	push	r17
 a98:	cf 93       	push	r28
 a9a:	df 93       	push	r29
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	0f 92       	push	r0
 aa2:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 aa6:	81 50       	subi	r24, 0x01	; 1
 aa8:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 aac:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 ab0:	81 11       	cpse	r24, r1
 ab2:	59 c0       	rjmp	.+178    	; 0xb66 <xTaskResumeAll+0xd8>
 ab4:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 ab8:	81 11       	cpse	r24, r1
 aba:	30 c0       	rjmp	.+96     	; 0xb1c <xTaskResumeAll+0x8e>
 abc:	57 c0       	rjmp	.+174    	; 0xb6c <xTaskResumeAll+0xde>
 abe:	d7 01       	movw	r26, r14
 ac0:	15 96       	adiw	r26, 0x05	; 5
 ac2:	ed 91       	ld	r30, X+
 ac4:	fc 91       	ld	r31, X
 ac6:	16 97       	sbiw	r26, 0x06	; 6
 ac8:	c6 81       	ldd	r28, Z+6	; 0x06
 aca:	d7 81       	ldd	r29, Z+7	; 0x07
 acc:	ce 01       	movw	r24, r28
 ace:	0c 96       	adiw	r24, 0x0c	; 12
 ad0:	93 db       	rcall	.-2266   	; 0x1f8 <uxListRemove>
 ad2:	8e 01       	movw	r16, r28
 ad4:	0e 5f       	subi	r16, 0xFE	; 254
 ad6:	1f 4f       	sbci	r17, 0xFF	; 255
 ad8:	c8 01       	movw	r24, r16
 ada:	8e db       	rcall	.-2276   	; 0x1f8 <uxListRemove>
 adc:	8e 89       	ldd	r24, Y+22	; 0x16
 ade:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ae2:	98 17       	cp	r25, r24
 ae4:	10 f4       	brcc	.+4      	; 0xaea <xTaskResumeAll+0x5c>
 ae6:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	9c 01       	movw	r18, r24
 aee:	22 0f       	add	r18, r18
 af0:	33 1f       	adc	r19, r19
 af2:	22 0f       	add	r18, r18
 af4:	33 1f       	adc	r19, r19
 af6:	22 0f       	add	r18, r18
 af8:	33 1f       	adc	r19, r19
 afa:	82 0f       	add	r24, r18
 afc:	93 1f       	adc	r25, r19
 afe:	b8 01       	movw	r22, r16
 b00:	89 5d       	subi	r24, 0xD9	; 217
 b02:	98 4f       	sbci	r25, 0xF8	; 248
 b04:	27 db       	rcall	.-2482   	; 0x154 <vListInsertEnd>
 b06:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 b0a:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 b0e:	9e 89       	ldd	r25, Y+22	; 0x16
 b10:	86 89       	ldd	r24, Z+22	; 0x16
 b12:	98 17       	cp	r25, r24
 b14:	68 f0       	brcs	.+26     	; 0xb30 <xTaskResumeAll+0xa2>
 b16:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 b1a:	0a c0       	rjmp	.+20     	; 0xb30 <xTaskResumeAll+0xa2>
 b1c:	c0 e0       	ldi	r28, 0x00	; 0
 b1e:	d0 e0       	ldi	r29, 0x00	; 0
 b20:	0f 2e       	mov	r0, r31
 b22:	f8 e0       	ldi	r31, 0x08	; 8
 b24:	ef 2e       	mov	r14, r31
 b26:	f7 e0       	ldi	r31, 0x07	; 7
 b28:	ff 2e       	mov	r15, r31
 b2a:	f0 2d       	mov	r31, r0
 b2c:	dd 24       	eor	r13, r13
 b2e:	d3 94       	inc	r13
 b30:	f7 01       	movw	r30, r14
 b32:	80 81       	ld	r24, Z
 b34:	81 11       	cpse	r24, r1
 b36:	c3 cf       	rjmp	.-122    	; 0xabe <xTaskResumeAll+0x30>
 b38:	cd 2b       	or	r28, r29
 b3a:	09 f0       	breq	.+2      	; 0xb3e <xTaskResumeAll+0xb0>
 b3c:	32 dd       	rcall	.-1436   	; 0x5a2 <prvResetNextTaskUnblockTime>
 b3e:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b42:	cc 23       	and	r28, r28
 b44:	49 f0       	breq	.+18     	; 0xb58 <xTaskResumeAll+0xca>
 b46:	d1 e0       	ldi	r29, 0x01	; 1
 b48:	eb de       	rcall	.-554    	; 0x920 <xTaskIncrementTick>
 b4a:	81 11       	cpse	r24, r1
 b4c:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 b50:	c1 50       	subi	r28, 0x01	; 1
 b52:	d1 f7       	brne	.-12     	; 0xb48 <xTaskResumeAll+0xba>
 b54:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 b58:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b5c:	88 23       	and	r24, r24
 b5e:	29 f0       	breq	.+10     	; 0xb6a <xTaskResumeAll+0xdc>
 b60:	6c dc       	rcall	.-1832   	; 0x43a <vPortYield>
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <xTaskResumeAll+0xde>
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	01 c0       	rjmp	.+2      	; 0xb6c <xTaskResumeAll+0xde>
 b6a:	80 e0       	ldi	r24, 0x00	; 0
 b6c:	0f 90       	pop	r0
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	1f 91       	pop	r17
 b76:	0f 91       	pop	r16
 b78:	ff 90       	pop	r15
 b7a:	ef 90       	pop	r14
 b7c:	df 90       	pop	r13
 b7e:	08 95       	ret

00000b80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b86:	89 2b       	or	r24, r25
 b88:	39 f0       	breq	.+14     	; 0xb98 <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 b8a:	c4 de       	rcall	.-632    	; 0x914 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 b8c:	60 e0       	ldi	r22, 0x00	; 0
 b8e:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 b90:	5b dd       	rcall	.-1354   	; 0x648 <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b92:	7d df       	rcall	.-262    	; 0xa8e <xTaskResumeAll>
 b94:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 b96:	01 c0       	rjmp	.+2      	; 0xb9a <vTaskDelay+0x1a>
 b98:	50 dc       	rcall	.-1888   	; 0x43a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 b9a:	df 91       	pop	r29
 b9c:	cf 91       	pop	r28
 b9e:	08 95       	ret

00000ba0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 ba0:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 ba4:	88 23       	and	r24, r24
 ba6:	21 f0       	breq	.+8      	; 0xbb0 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 ba8:	81 e0       	ldi	r24, 0x01	; 1
 baa:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 bae:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 bb0:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 bb4:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 bb8:	82 2f       	mov	r24, r18
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	fc 01       	movw	r30, r24
 bbe:	ee 0f       	add	r30, r30
 bc0:	ff 1f       	adc	r31, r31
 bc2:	ee 0f       	add	r30, r30
 bc4:	ff 1f       	adc	r31, r31
 bc6:	ee 0f       	add	r30, r30
 bc8:	ff 1f       	adc	r31, r31
 bca:	e8 0f       	add	r30, r24
 bcc:	f9 1f       	adc	r31, r25
 bce:	e9 5d       	subi	r30, 0xD9	; 217
 bd0:	f8 4f       	sbci	r31, 0xF8	; 248
 bd2:	30 81       	ld	r19, Z
 bd4:	31 11       	cpse	r19, r1
 bd6:	11 c0       	rjmp	.+34     	; 0xbfa <vTaskSwitchContext+0x5a>
 bd8:	21 50       	subi	r18, 0x01	; 1
 bda:	82 2f       	mov	r24, r18
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	fc 01       	movw	r30, r24
 be0:	ee 0f       	add	r30, r30
 be2:	ff 1f       	adc	r31, r31
 be4:	ee 0f       	add	r30, r30
 be6:	ff 1f       	adc	r31, r31
 be8:	ee 0f       	add	r30, r30
 bea:	ff 1f       	adc	r31, r31
 bec:	e8 0f       	add	r30, r24
 bee:	f9 1f       	adc	r31, r25
 bf0:	e9 5d       	subi	r30, 0xD9	; 217
 bf2:	f8 4f       	sbci	r31, 0xF8	; 248
 bf4:	30 81       	ld	r19, Z
 bf6:	33 23       	and	r19, r19
 bf8:	79 f3       	breq	.-34     	; 0xbd8 <vTaskSwitchContext+0x38>
 bfa:	ac 01       	movw	r20, r24
 bfc:	44 0f       	add	r20, r20
 bfe:	55 1f       	adc	r21, r21
 c00:	44 0f       	add	r20, r20
 c02:	55 1f       	adc	r21, r21
 c04:	44 0f       	add	r20, r20
 c06:	55 1f       	adc	r21, r21
 c08:	48 0f       	add	r20, r24
 c0a:	59 1f       	adc	r21, r25
 c0c:	da 01       	movw	r26, r20
 c0e:	a9 5d       	subi	r26, 0xD9	; 217
 c10:	b8 4f       	sbci	r27, 0xF8	; 248
 c12:	11 96       	adiw	r26, 0x01	; 1
 c14:	ed 91       	ld	r30, X+
 c16:	fc 91       	ld	r31, X
 c18:	12 97       	sbiw	r26, 0x02	; 2
 c1a:	02 80       	ldd	r0, Z+2	; 0x02
 c1c:	f3 81       	ldd	r31, Z+3	; 0x03
 c1e:	e0 2d       	mov	r30, r0
 c20:	12 96       	adiw	r26, 0x02	; 2
 c22:	fc 93       	st	X, r31
 c24:	ee 93       	st	-X, r30
 c26:	11 97       	sbiw	r26, 0x01	; 1
 c28:	46 5d       	subi	r20, 0xD6	; 214
 c2a:	58 4f       	sbci	r21, 0xF8	; 248
 c2c:	e4 17       	cp	r30, r20
 c2e:	f5 07       	cpc	r31, r21
 c30:	29 f4       	brne	.+10     	; 0xc3c <vTaskSwitchContext+0x9c>
 c32:	42 81       	ldd	r20, Z+2	; 0x02
 c34:	53 81       	ldd	r21, Z+3	; 0x03
 c36:	fd 01       	movw	r30, r26
 c38:	52 83       	std	Z+2, r21	; 0x02
 c3a:	41 83       	std	Z+1, r20	; 0x01
 c3c:	fc 01       	movw	r30, r24
 c3e:	ee 0f       	add	r30, r30
 c40:	ff 1f       	adc	r31, r31
 c42:	ee 0f       	add	r30, r30
 c44:	ff 1f       	adc	r31, r31
 c46:	ee 0f       	add	r30, r30
 c48:	ff 1f       	adc	r31, r31
 c4a:	8e 0f       	add	r24, r30
 c4c:	9f 1f       	adc	r25, r31
 c4e:	fc 01       	movw	r30, r24
 c50:	e9 5d       	subi	r30, 0xD9	; 217
 c52:	f8 4f       	sbci	r31, 0xF8	; 248
 c54:	01 80       	ldd	r0, Z+1	; 0x01
 c56:	f2 81       	ldd	r31, Z+2	; 0x02
 c58:	e0 2d       	mov	r30, r0
 c5a:	86 81       	ldd	r24, Z+6	; 0x06
 c5c:	97 81       	ldd	r25, Z+7	; 0x07
 c5e:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 c62:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 c66:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 c6a:	08 95       	ret

00000c6c <_exit>:
 c6c:	f8 94       	cli

00000c6e <__stop_program>:
 c6e:	ff cf       	rjmp	.-2      	; 0xc6e <__stop_program>
