
lab7_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000462  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  000004fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de8  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b9  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b7  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000474  00000000  00000000  00002a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6c d1       	rcall	.+728    	; 0x39c <main>
  c4:	cc c1       	rjmp	.+920    	; 0x45e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	}
	return 0;
}
//--------End find GCD function ----------------------------------------------
void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
  dc:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
  e0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
  e4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 11e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 122:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 126:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 148:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 150:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 15e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 162:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 166:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 18c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 190:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 194:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	5e 98       	cbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_Cursor>:
 1e8:	81 31       	cpi	r24, 0x11	; 17
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_Cursor+0xa>
 1ec:	81 58       	subi	r24, 0x81	; 129
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret
 1f2:	81 55       	subi	r24, 0x51	; 81
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <LCD_WriteCommand>
 1f6:	08 95       	ret

000001f8 <LCD_init>:
 1f8:	84 e6       	ldi	r24, 0x64	; 100
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d6 df       	rcall	.-84     	; 0x1aa <delay_ms>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	e7 df       	rcall	.-50     	; 0x1d0 <LCD_WriteCommand>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e5 df       	rcall	.-54     	; 0x1d0 <LCD_WriteCommand>
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	e3 df       	rcall	.-58     	; 0x1d0 <LCD_WriteCommand>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	e1 df       	rcall	.-62     	; 0x1d0 <LCD_WriteCommand>
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	cb cf       	rjmp	.-106    	; 0x1aa <delay_ms>
 214:	08 95       	ret

00000216 <LCD_WriteData>:
 216:	5e 9a       	sbi	0x0b, 6	; 11
 218:	88 b9       	out	0x08, r24	; 8
 21a:	5f 9a       	sbi	0x0b, 7	; 11
 21c:	00 00       	nop
 21e:	5f 98       	cbi	0x0b, 7	; 11
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	c2 cf       	rjmp	.-124    	; 0x1aa <delay_ms>
 226:	08 95       	ret

00000228 <SPI_SlaveInit>:
//Servant
void SPI_SlaveInit(void){
	/* Set MISO output, all others input */
	
	/*DDR_SPI = (1<<DD_MISO);*/
	DDRB = (1<<DDRB4)|(1<<DDRB6);
 228:	80 e5       	ldi	r24, 0x50	; 80
 22a:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR = (1<<SPE);
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	8c bd       	out	0x2c, r24	; 44
 230:	08 95       	ret

00000232 <SPI_SlaveReceive>:
}

char SPI_SlaveReceive(void){
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 232:	0d b4       	in	r0, 0x2d	; 45
 234:	07 fe       	sbrs	r0, 7
 236:	fd cf       	rjmp	.-6      	; 0x232 <SPI_SlaveReceive>
	;
	/* Return Data Register */
	return SPDR;
 238:	8e b5       	in	r24, 0x2e	; 46
}
 23a:	08 95       	ret

0000023c <SM1Tick>:

//--------User defined FSMs---------------------------------------------------
enum SM1_States{start, wait};
int SM1Tick(int state){
	
	switch(state){
 23c:	02 97       	sbiw	r24, 0x02	; 2
 23e:	08 f0       	brcs	.+2      	; 0x242 <SM1Tick+0x6>
 240:	aa c0       	rjmp	.+340    	; 0x396 <SM1Tick+0x15a>
	}
	switch(state){
		case start:
		break;
		case wait:
		tmp = SPI_SlaveReceive();
 242:	f7 df       	rcall	.-18     	; 0x232 <SPI_SlaveReceive>
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <tmp+0x1>
 24c:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <tmp>
		PORTA = tmp;
 250:	82 b9       	out	0x02, r24	; 2
		LCD_Cursor(3);
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	c9 df       	rcall	.-110    	; 0x1e8 <LCD_Cursor>
		LCD_WriteData('0' + (tmp % 10));
 256:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <tmp>
 25a:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <tmp+0x1>
 25e:	9a 01       	movw	r18, r20
 260:	ad ec       	ldi	r26, 0xCD	; 205
 262:	bc ec       	ldi	r27, 0xCC	; 204
 264:	ed d0       	rcall	.+474    	; 0x440 <__umulhisi3>
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	9c 01       	movw	r18, r24
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	82 0f       	add	r24, r18
 286:	93 1f       	adc	r25, r19
 288:	9a 01       	movw	r18, r20
 28a:	28 1b       	sub	r18, r24
 28c:	39 0b       	sbc	r19, r25
 28e:	c9 01       	movw	r24, r18
 290:	80 5d       	subi	r24, 0xD0	; 208
		LCD_Cursor(2);
 292:	c1 df       	rcall	.-126    	; 0x216 <LCD_WriteData>
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	a8 df       	rcall	.-176    	; 0x1e8 <LCD_Cursor>
		tmp = (tmp - tmp % 10)/10;
 298:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <tmp>
 29c:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <tmp+0x1>
 2a0:	ad ec       	ldi	r26, 0xCD	; 205
 2a2:	bc ec       	ldi	r27, 0xCC	; 204
 2a4:	cd d0       	rcall	.+410    	; 0x440 <__umulhisi3>
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	9c 01       	movw	r18, r24
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	28 0f       	add	r18, r24
 2c6:	39 1f       	adc	r19, r25
 2c8:	bb d0       	rcall	.+374    	; 0x440 <__umulhisi3>
 2ca:	ac 01       	movw	r20, r24
 2cc:	56 95       	lsr	r21
 2ce:	47 95       	ror	r20
 2d0:	56 95       	lsr	r21
 2d2:	47 95       	ror	r20
 2d4:	56 95       	lsr	r21
 2d6:	47 95       	ror	r20
 2d8:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <tmp+0x1>
 2dc:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <tmp>
		LCD_WriteData('0' + (tmp % 10));
 2e0:	9a 01       	movw	r18, r20
 2e2:	ae d0       	rcall	.+348    	; 0x440 <__umulhisi3>
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	96 95       	lsr	r25
 2ee:	87 95       	ror	r24
 2f0:	9c 01       	movw	r18, r24
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	9a 01       	movw	r18, r20
 308:	28 1b       	sub	r18, r24
 30a:	39 0b       	sbc	r19, r25
 30c:	c9 01       	movw	r24, r18
 30e:	80 5d       	subi	r24, 0xD0	; 208
		LCD_Cursor(1);
 310:	82 df       	rcall	.-252    	; 0x216 <LCD_WriteData>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	69 df       	rcall	.-302    	; 0x1e8 <LCD_Cursor>
		tmp = (tmp - tmp % 10)/10;
 316:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <tmp>
 31a:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <tmp+0x1>
 31e:	ad ec       	ldi	r26, 0xCD	; 205
 320:	bc ec       	ldi	r27, 0xCC	; 204
 322:	8e d0       	rcall	.+284    	; 0x440 <__umulhisi3>
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	9c 01       	movw	r18, r24
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	28 0f       	add	r18, r24
 344:	39 1f       	adc	r19, r25
 346:	7c d0       	rcall	.+248    	; 0x440 <__umulhisi3>
 348:	ac 01       	movw	r20, r24
 34a:	56 95       	lsr	r21
 34c:	47 95       	ror	r20
 34e:	56 95       	lsr	r21
 350:	47 95       	ror	r20
 352:	56 95       	lsr	r21
 354:	47 95       	ror	r20
 356:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <tmp+0x1>
 35a:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <tmp>
		LCD_WriteData('0' + (tmp % 10));
 35e:	9a 01       	movw	r18, r20
 360:	6f d0       	rcall	.+222    	; 0x440 <__umulhisi3>
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	9c 01       	movw	r18, r24
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	82 0f       	add	r24, r18
 382:	93 1f       	adc	r25, r19
 384:	9a 01       	movw	r18, r20
 386:	28 1b       	sub	r18, r24
 388:	39 0b       	sbc	r19, r25
 38a:	c9 01       	movw	r24, r18
 38c:	80 5d       	subi	r24, 0xD0	; 208
 38e:	43 df       	rcall	.-378    	; 0x216 <LCD_WriteData>
 390:	81 e0       	ldi	r24, 0x01	; 1
enum SM1_States{start, wait};
int SM1Tick(int state){
	
	switch(state){
		case start:
		state = wait;
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	08 95       	ret
		tmp = (tmp - tmp % 10)/10;
		LCD_WriteData('0' + (tmp % 10));
		LCD_Cursor(1);
		tmp = (tmp - tmp % 10)/10;
		LCD_WriteData('0' + (tmp % 10));
		break;
 396:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case wait:
		state = wait;
		break;
		default:
		state = start; break;
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	08 95       	ret

0000039c <main>:
		break;
		default:
		break;
	}
	return state;
}
 39c:	cf ef       	ldi	r28, 0xFF	; 255
// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
	DDRA = 0xFF; PORTA = 0x00;
 39e:	c1 b9       	out	0x01, r28	; 1
 3a0:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 3a2:	c4 b9       	out	0x04, r28	; 4
 3a4:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 3a6:	c7 b9       	out	0x07, r28	; 7
 3a8:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 3aa:	ca b9       	out	0x0a, r28	; 10
 3ac:	1b b8       	out	0x0b, r1	; 11
	
	LCD_init();
 3ae:	24 df       	rcall	.-440    	; 0x1f8 <LCD_init>
	LCD_ClearScreen();
 3b0:	18 df       	rcall	.-464    	; 0x1e2 <LCD_ClearScreen>
 3b2:	e4 e0       	ldi	r30, 0x04	; 4
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 3b4:	f1 e0       	ldi	r31, 0x01	; 1
 3b6:	c0 83       	st	Z, r28
 3b8:	84 ef       	ldi	r24, 0xF4	; 244
	task1.period = SMTick1_period;//Task Period.
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	a0 e0       	ldi	r26, 0x00	; 0
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	81 83       	std	Z+1, r24	; 0x01
 3c2:	92 83       	std	Z+2, r25	; 0x02
 3c4:	a3 83       	std	Z+3, r26	; 0x03
 3c6:	b4 83       	std	Z+4, r27	; 0x04
 3c8:	85 83       	std	Z+5, r24	; 0x05
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 3ca:	96 83       	std	Z+6, r25	; 0x06
 3cc:	a7 83       	std	Z+7, r26	; 0x07
 3ce:	b0 87       	std	Z+8, r27	; 0x08
 3d0:	8e e1       	ldi	r24, 0x1E	; 30
	task1.TickFct = &SM1Tick;//Function pointer for the tick.
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	92 87       	std	Z+10, r25	; 0x0a
 3d6:	81 87       	std	Z+9, r24	; 0x09
 3d8:	61 e0       	ldi	r22, 0x01	; 1


	// Set the timer and turn it on
	TimerSet(GCD);
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	73 de       	rcall	.-794    	; 0xc8 <TimerSet>
	TimerOn();
 3e2:	83 de       	rcall	.-762    	; 0xea <TimerOn>
 3e4:	21 df       	rcall	.-446    	; 0x228 <SPI_SlaveInit>

	SPI_SlaveInit();
 3e6:	c4 e0       	ldi	r28, 0x04	; 4
 3e8:	d1 e0       	ldi	r29, 0x01	; 1
	
	unsigned short i;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3ea:	4d 81       	ldd	r20, Y+5	; 0x05
 3ec:	5e 81       	ldd	r21, Y+6	; 0x06
 3ee:	6f 81       	ldd	r22, Y+7	; 0x07
 3f0:	78 85       	ldd	r23, Y+8	; 0x08
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	9a 81       	ldd	r25, Y+2	; 0x02
 3f6:	ab 81       	ldd	r26, Y+3	; 0x03
 3f8:	bc 81       	ldd	r27, Y+4	; 0x04
 3fa:	48 17       	cp	r20, r24
 3fc:	59 07       	cpc	r21, r25
 3fe:	6a 07       	cpc	r22, r26
 400:	7b 07       	cpc	r23, r27
 402:	61 f4       	brne	.+24     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 404:	88 81       	ld	r24, Y
 406:	e9 85       	ldd	r30, Y+9	; 0x09
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 408:	fa 85       	ldd	r31, Y+10	; 0x0a
 40a:	08 2e       	mov	r0, r24
 40c:	00 0c       	add	r0, r0
 40e:	99 0b       	sbc	r25, r25
 410:	09 95       	icall
 412:	88 83       	st	Y, r24
 414:	1d 82       	std	Y+5, r1	; 0x05
 416:	1e 82       	std	Y+6, r1	; 0x06
				tasks[i]->elapsedTime = 0;
 418:	1f 82       	std	Y+7, r1	; 0x07
 41a:	18 86       	std	Y+8, r1	; 0x08
 41c:	8d 81       	ldd	r24, Y+5	; 0x05
 41e:	9e 81       	ldd	r25, Y+6	; 0x06
			}
			tasks[i]->elapsedTime += 1;
 420:	af 81       	ldd	r26, Y+7	; 0x07
 422:	b8 85       	ldd	r27, Y+8	; 0x08
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	a1 1d       	adc	r26, r1
 428:	b1 1d       	adc	r27, r1
 42a:	8d 83       	std	Y+5, r24	; 0x05
 42c:	9e 83       	std	Y+6, r25	; 0x06
 42e:	af 83       	std	Y+7, r26	; 0x07
 430:	b8 87       	std	Y+8, r27	; 0x08
 432:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
		}
		while(!TimerFlag);
 436:	88 23       	and	r24, r24
 438:	e1 f3       	breq	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
		TimerFlag = 0;
 43e:	d5 cf       	rjmp	.-86     	; 0x3ea <main+0x4e>

00000440 <__umulhisi3>:
 440:	a2 9f       	mul	r26, r18
	}
 442:	b0 01       	movw	r22, r0
 444:	b3 9f       	mul	r27, r19
 446:	c0 01       	movw	r24, r0
 448:	a3 9f       	mul	r26, r19
 44a:	70 0d       	add	r23, r0
 44c:	81 1d       	adc	r24, r1
 44e:	11 24       	eor	r1, r1
 450:	91 1d       	adc	r25, r1
 452:	b2 9f       	mul	r27, r18
 454:	70 0d       	add	r23, r0
 456:	81 1d       	adc	r24, r1
 458:	11 24       	eor	r1, r1
 45a:	91 1d       	adc	r25, r1
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
