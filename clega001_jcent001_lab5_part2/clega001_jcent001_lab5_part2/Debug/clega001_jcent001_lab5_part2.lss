
clega001_jcent001_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000007ea  0000087e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800110  00800110  0000088e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc2  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4a  00000000  00000000  0000194a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097f  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005eb  00000000  00000000  000034aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003a95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	09 01       	movw	r0, r18
  8e:	0d 01       	movw	r0, r26
  90:	25 01       	movw	r4, r10
  92:	3a 01       	movw	r6, r20
  94:	3e 01       	movw	r6, r28
  96:	52 01       	movw	r10, r4
  98:	56 01       	movw	r10, r12
  9a:	64 01       	movw	r12, r8
  9c:	68 01       	movw	r12, r16
  9e:	70 01       	movw	r14, r0
  a0:	7e 01       	movw	r14, r28

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	ea ee       	ldi	r30, 0xEA	; 234
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a0 31       	cpi	r26, 0x10	; 16
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e1       	ldi	r26, 0x10	; 16
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a7 34       	cpi	r26, 0x47	; 71
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	2b d2       	rcall	.+1110   	; 0x530 <main>
  da:	85 c3       	rjmp	.+1802   	; 0x7e6 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <TimerSet>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  de:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
  e2:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
  e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
  ea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
  ee:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <_avr_timer_cntcurr>
  f2:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <_avr_timer_cntcurr+0x1>
  f6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_avr_timer_cntcurr+0x2>
  fa:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <_avr_timer_cntcurr+0x3>
  fe:	08 95       	ret

00000100 <TimerOn>:
 100:	8b e0       	ldi	r24, 0x0B	; 11
 102:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 106:	8d e7       	ldi	r24, 0x7D	; 125
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 118:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 11c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 120:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 124:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 128:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 12c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 130:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <_avr_timer_cntcurr>
 134:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <_avr_timer_cntcurr+0x1>
 138:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <_avr_timer_cntcurr+0x2>
 13c:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <_avr_timer_cntcurr+0x3>
 140:	8f b7       	in	r24, 0x3f	; 63
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8f bf       	out	0x3f, r24	; 63
 146:	08 95       	ret

00000148 <__vector_13>:
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_avr_timer_cntcurr>
 15e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <_avr_timer_cntcurr+0x1>
 162:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <_avr_timer_cntcurr+0x2>
 166:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <_avr_timer_cntcurr+0x3>
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	a1 09       	sbc	r26, r1
 16e:	b1 09       	sbc	r27, r1
 170:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <_avr_timer_cntcurr>
 174:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <_avr_timer_cntcurr+0x1>
 178:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <_avr_timer_cntcurr+0x2>
 17c:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <_avr_timer_cntcurr+0x3>
 180:	89 2b       	or	r24, r25
 182:	8a 2b       	or	r24, r26
 184:	8b 2b       	or	r24, r27
 186:	99 f4       	brne	.+38     	; 0x1ae <__vector_13+0x66>
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <TimerFlag>
 18e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 192:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 196:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 19a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 19e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <_avr_timer_cntcurr>
 1a2:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <_avr_timer_cntcurr+0x1>
 1a6:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <_avr_timer_cntcurr+0x2>
 1aa:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <_avr_timer_cntcurr+0x3>
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <transmit_data>:
//--------End find GCD function ----------------------------------------------

void transmit_data(unsigned char data){
	for(unsigned int i = 0; i < 8; i++){
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	70 e0       	ldi	r23, 0x00	; 0
		PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
 1c8:	47 9a       	sbi	0x08, 7	; 8
		PORTC = SetBit(PORTC, 6, 0); //Set SRCLK to low
 1ca:	46 98       	cbi	0x08, 6	; 8
		PORTC = SetBit(PORTC, 4, GetBit(data,i)); //Set SER to send bit
 1cc:	98 b1       	in	r25, 0x08	; 8
 1ce:	ab 01       	movw	r20, r22
 1d0:	02 2e       	mov	r0, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <transmit_data+0x18>
 1d4:	44 0f       	add	r20, r20
 1d6:	55 1f       	adc	r21, r21
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <transmit_data+0x14>
 1dc:	48 23       	and	r20, r24
 1de:	11 f0       	breq	.+4      	; 0x1e4 <transmit_data+0x24>
 1e0:	90 61       	ori	r25, 0x10	; 16
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <transmit_data+0x26>
 1e4:	9f 7e       	andi	r25, 0xEF	; 239
 1e6:	98 b9       	out	0x08, r25	; 8
		PORTC = SetBit(PORTC, 6, 1); //Set SRCLK to high
 1e8:	46 9a       	sbi	0x08, 6	; 8
	return 0;
}
//--------End find GCD function ----------------------------------------------

void transmit_data(unsigned char data){
	for(unsigned int i = 0; i < 8; i++){
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	28 30       	cpi	r18, 0x08	; 8
 1f0:	31 05       	cpc	r19, r1
 1f2:	51 f7       	brne	.-44     	; 0x1c8 <transmit_data+0x8>
		PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
		PORTC = SetBit(PORTC, 6, 0); //Set SRCLK to low
		PORTC = SetBit(PORTC, 4, GetBit(data,i)); //Set SER to send bit
		PORTC = SetBit(PORTC, 6, 1); //Set SRCLK to high
	}
	PORTC = SetBit(PORTC, 5, 1);
 1f4:	45 9a       	sbi	0x08, 5	; 8
	PORTC = SetBit(PORTC, 7, 0); //Set SRCLR to low
 1f6:	47 98       	cbi	0x08, 7	; 8
 1f8:	08 95       	ret

000001fa <d_Tick>:
//--------End Shared/Global Variables------------------------------------------------
//--------User defined FSMs---------------------------------------------------
enum DisplayState {init, wait, inc_p, inc_r, dec_p, dec_r, reset_p, reset_r, off, off_p, off_r} d_state;
int d_Tick(){
	//Transitions
	switch(d_state){
 1fa:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <d_state>
 1fe:	8e 2f       	mov	r24, r30
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	8b 30       	cpi	r24, 0x0B	; 11
 204:	91 05       	cpc	r25, r1
 206:	08 f0       	brcs	.+2      	; 0x20a <d_Tick+0x10>
 208:	7d c0       	rjmp	.+250    	; 0x304 <d_Tick+0x10a>
 20a:	fc 01       	movw	r30, r24
 20c:	ea 5b       	subi	r30, 0xBA	; 186
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	e1 c2       	rjmp	.+1474   	; 0x7d4 <__tablejump2__>
		case init:
			d_state = wait;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			break;
 218:	7f c0       	rjmp	.+254    	; 0x318 <d_Tick+0x11e>
		case wait:
			if(b1 && !b2){
 21a:	18 99       	sbic	0x03, 0	; 3
 21c:	06 c0       	rjmp	.+12     	; 0x22a <d_Tick+0x30>
 21e:	19 9b       	sbis	0x03, 1	; 3
 220:	04 c0       	rjmp	.+8      	; 0x22a <d_Tick+0x30>
				d_state = inc_p;
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
				break;
 228:	77 c0       	rjmp	.+238    	; 0x318 <d_Tick+0x11e>
			}
			else if(!b1 && b2){
 22a:	18 9b       	sbis	0x03, 0	; 3
 22c:	06 c0       	rjmp	.+12     	; 0x23a <d_Tick+0x40>
 22e:	19 99       	sbic	0x03, 1	; 3
 230:	04 c0       	rjmp	.+8      	; 0x23a <d_Tick+0x40>
				d_state = dec_p;
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
				break;
 238:	6f c0       	rjmp	.+222    	; 0x318 <d_Tick+0x11e>
			}
			else if(b1 && b2){
 23a:	18 99       	sbic	0x03, 0	; 3
 23c:	6d c0       	rjmp	.+218    	; 0x318 <d_Tick+0x11e>
 23e:	19 99       	sbic	0x03, 1	; 3
 240:	6b c0       	rjmp	.+214    	; 0x318 <d_Tick+0x11e>
				d_state = reset_p;
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
				break;
 248:	67 c0       	rjmp	.+206    	; 0x318 <d_Tick+0x11e>
			else{
				d_state = wait;
				break;
			}
		case inc_p:
			if(b1 && !b2){
 24a:	18 99       	sbic	0x03, 0	; 3
 24c:	02 c0       	rjmp	.+4      	; 0x252 <d_Tick+0x58>
 24e:	19 99       	sbic	0x03, 1	; 3
 250:	63 c0       	rjmp	.+198    	; 0x318 <d_Tick+0x11e>
				d_state = inc_p;
				break;
			}
			else if(b1 && b2){
 252:	18 99       	sbic	0x03, 0	; 3
 254:	06 c0       	rjmp	.+12     	; 0x262 <d_Tick+0x68>
 256:	19 99       	sbic	0x03, 1	; 3
 258:	04 c0       	rjmp	.+8      	; 0x262 <d_Tick+0x68>
				d_state = reset_p;
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
				break;
 260:	5b c0       	rjmp	.+182    	; 0x318 <d_Tick+0x11e>
			}
			else{
				d_state = inc_r;
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			//transmit_data(go);
			break;
		case inc_p:
			break;
		case inc_r:
			if(go != 3){go++;}
 268:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	09 f0       	breq	.+2      	; 0x272 <d_Tick+0x78>
 270:	4c c0       	rjmp	.+152    	; 0x30a <d_Tick+0x110>
 272:	52 c0       	rjmp	.+164    	; 0x318 <d_Tick+0x11e>
			else{
				d_state = inc_r;
				break;
			}
		case inc_r:
			d_state = wait;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			break;
 27a:	4e c0       	rjmp	.+156    	; 0x318 <d_Tick+0x11e>
		case dec_p:
			if(!b1 && b2){
 27c:	18 9b       	sbis	0x03, 0	; 3
 27e:	02 c0       	rjmp	.+4      	; 0x284 <d_Tick+0x8a>
 280:	19 9b       	sbis	0x03, 1	; 3
 282:	4a c0       	rjmp	.+148    	; 0x318 <d_Tick+0x11e>
				d_state = dec_p;
				break;
			}
			else if(b1 && b2){
 284:	18 99       	sbic	0x03, 0	; 3
 286:	06 c0       	rjmp	.+12     	; 0x294 <d_Tick+0x9a>
 288:	19 99       	sbic	0x03, 1	; 3
 28a:	04 c0       	rjmp	.+8      	; 0x294 <d_Tick+0x9a>
				d_state = reset_p;
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
				break;
 292:	42 c0       	rjmp	.+132    	; 0x318 <d_Tick+0x11e>
			}
			else{
				d_state = dec_r;
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			if(go != 3){go++;}
			break;
		case dec_p:
			break;
		case dec_r:
			if(go != 1){go--;}
 29a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	c1 f5       	brne	.+112    	; 0x312 <d_Tick+0x118>
 2a2:	3a c0       	rjmp	.+116    	; 0x318 <d_Tick+0x11e>
			else{
				d_state = dec_r;
				break;
			}
		case dec_r:
			d_state = wait;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			break;
 2aa:	36 c0       	rjmp	.+108    	; 0x318 <d_Tick+0x11e>
		case reset_p:
			if(b1 && b2){
 2ac:	18 99       	sbic	0x03, 0	; 3
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <d_Tick+0xba>
 2b0:	19 9b       	sbis	0x03, 1	; 3
 2b2:	32 c0       	rjmp	.+100    	; 0x318 <d_Tick+0x11e>
				d_state = reset_p;
				break;
			}
			else{
				d_state = reset_r;
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			if(go != 1){go--;}
			break;
		case reset_p:
			break;
		case reset_r:
			tmp = go;
 2ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 2be:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tmp>
			go = 0;
 2c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <go>
			break;
 2c6:	28 c0       	rjmp	.+80     	; 0x318 <d_Tick+0x11e>
			else{
				d_state = reset_r;
				break;
			}
		case reset_r:
			d_state = off;
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			break;
 2ce:	28 c0       	rjmp	.+80     	; 0x320 <d_Tick+0x126>
		case off:
			if(b1 && b2){
 2d0:	18 99       	sbic	0x03, 0	; 3
 2d2:	26 c0       	rjmp	.+76     	; 0x320 <d_Tick+0x126>
 2d4:	19 99       	sbic	0x03, 1	; 3
 2d6:	24 c0       	rjmp	.+72     	; 0x320 <d_Tick+0x126>
				d_state = off_p;
 2d8:	89 e0       	ldi	r24, 0x09	; 9
 2da:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
				break;
 2de:	1c c0       	rjmp	.+56     	; 0x318 <d_Tick+0x11e>
			else{
				d_state = off;
				break;
			}
		case off_p:
			if(b1 && b2){
 2e0:	18 99       	sbic	0x03, 0	; 3
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <d_Tick+0xee>
 2e4:	19 9b       	sbis	0x03, 1	; 3
 2e6:	18 c0       	rjmp	.+48     	; 0x318 <d_Tick+0x11e>
				d_state = off_p;
				break;
			}
			else{
				d_state = off_r;
 2e8:	8a e0       	ldi	r24, 0x0A	; 10
 2ea:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			transmit_data(go);
			break;
		case off_p:
			break;
		case off_r:
			go = tmp;
 2ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tmp>
 2f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <go>
			tmp = 0;
 2f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <tmp>
			break;
 2fa:	0e c0       	rjmp	.+28     	; 0x318 <d_Tick+0x11e>
			else{
				d_state = off_r;
				break;
			}
		case off_r:
			d_state = wait;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <d_state>
			break;
 302:	0a c0       	rjmp	.+20     	; 0x318 <d_Tick+0x11e>
		default:
			d_state = init;
 304:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <d_state>
			break;
 308:	07 c0       	rjmp	.+14     	; 0x318 <d_Tick+0x11e>
			//transmit_data(go);
			break;
		case inc_p:
			break;
		case inc_r:
			if(go != 3){go++;}
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <go>
 310:	03 c0       	rjmp	.+6      	; 0x318 <d_Tick+0x11e>
			break;
		case dec_p:
			break;
		case dec_r:
			if(go != 1){go--;}
 312:	81 50       	subi	r24, 0x01	; 1
 314:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <go>
			break;
		default:
			break;
		
	}
	return d_state;
 318:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <d_state>
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	08 95       	ret
		case reset_r:
			tmp = go;
			go = 0;
			break;
		case off:
			transmit_data(go);
 320:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 324:	4d df       	rcall	.-358    	; 0x1c0 <transmit_data>
			break;
 326:	f8 cf       	rjmp	.-16     	; 0x318 <d_Tick+0x11e>

00000328 <p1Tick>:
}
////////////////////////////////////////////////////////////////////////
enum pat1States{init1, wait1, l1, l2, l3, l4} p1_state;
int p1Tick(){
	//Transition
	switch(p1_state){
 328:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <p1_state>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	e9 f0       	breq	.+58     	; 0x36a <p1Tick+0x42>
 330:	28 f4       	brcc	.+10     	; 0x33c <p1Tick+0x14>
 332:	88 23       	and	r24, r24
 334:	51 f0       	breq	.+20     	; 0x34a <p1Tick+0x22>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	61 f0       	breq	.+24     	; 0x352 <p1Tick+0x2a>
 33a:	5d c0       	rjmp	.+186    	; 0x3f6 <p1Tick+0xce>
 33c:	84 30       	cpi	r24, 0x04	; 4
 33e:	b9 f1       	breq	.+110    	; 0x3ae <p1Tick+0x86>
 340:	00 f1       	brcs	.+64     	; 0x382 <p1Tick+0x5a>
 342:	85 30       	cpi	r24, 0x05	; 5
 344:	09 f4       	brne	.+2      	; 0x348 <p1Tick+0x20>
 346:	4f c0       	rjmp	.+158    	; 0x3e6 <p1Tick+0xbe>
 348:	56 c0       	rjmp	.+172    	; 0x3f6 <p1Tick+0xce>
		case init1:
			p1_state = wait1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
			break;
 350:	54 c0       	rjmp	.+168    	; 0x3fa <p1Tick+0xd2>
		case wait1:
			if(go == 0x01){
 352:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	09 f0       	breq	.+2      	; 0x35c <p1Tick+0x34>
 35a:	4f c0       	rjmp	.+158    	; 0x3fa <p1Tick+0xd2>
				p1_state = l1;
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				dir = 0x01;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				break;
 368:	4c c0       	rjmp	.+152    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			else{
				p1_state = wait1;
				break;
			}
		case l1:
			if(go == 0x01){
 36a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	21 f4       	brne	.+8      	; 0x37a <p1Tick+0x52>
				p1_state = l2;
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				break;
 378:	4c c0       	rjmp	.+152    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			}
			else{
				p1_state = wait1;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				break;
 380:	3c c0       	rjmp	.+120    	; 0x3fa <p1Tick+0xd2>
			}
		case l2:
			if(go == 0x01 && dir == 0x01){
 382:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	71 f4       	brne	.+28     	; 0x3a6 <p1Tick+0x7e>
 38a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	21 f4       	brne	.+8      	; 0x39a <p1Tick+0x72>
				p1_state = l3;
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				break;
 398:	41 c0       	rjmp	.+130    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			}
			else if(go == 0x01 && dir == 0x00){
 39a:	81 11       	cpse	r24, r1
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <p1Tick+0x7e>
				p1_state = l1;
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				break;
 3a4:	2e c0       	rjmp	.+92     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			}
			else{
				p1_state = wait1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				break;
 3ac:	26 c0       	rjmp	.+76     	; 0x3fa <p1Tick+0xd2>
			}
		case l3:
			if(go == 0x01 && dir == 0x01){
 3ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	a1 f4       	brne	.+40     	; 0x3de <p1Tick+0xb6>
 3b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	51 f4       	brne	.+20     	; 0x3d2 <p1Tick+0xaa>
				p1_state = l4;
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
		case l3:
			tmp1 = 0xE7;
			transmit_data(tmp1);
			break;
		case l4:
			tmp1 = 0xFF;
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <tmp1>
			transmit_data(tmp1);
 3ca:	fa de       	rcall	.-524    	; 0x1c0 <transmit_data>
			dir = 0x00;
 3cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			break;
 3d0:	14 c0       	rjmp	.+40     	; 0x3fa <p1Tick+0xd2>
		case l3:
			if(go == 0x01 && dir == 0x01){
				p1_state = l4;
				break;
			}
			else if(go == 0x01 && dir == 0x00){
 3d2:	81 11       	cpse	r24, r1
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <p1Tick+0xb6>
				p1_state = l2;
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				break;
 3dc:	1a c0       	rjmp	.+52     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			}
			else{
				p1_state = wait1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				break;
 3e4:	0a c0       	rjmp	.+20     	; 0x3fa <p1Tick+0xd2>
			}
		case l4:
			if(go == 0x01){
 3e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <p1Tick+0xce>
				p1_state = l3;
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <p1_state>
				break;
 3f4:	13 c0       	rjmp	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			}
			else{
				p1_state = wait1;
			}
		default:
			p1_state = init1;
 3f6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <p1_state>
			dir = 0x00;
			break;
		default:
			break;
	}
	return p1_state;
 3fa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <p1_state>
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 95       	ret
		case init1:
			break;
		case wait1:
			break;
		case l1:
			tmp1 = 0x81;
 402:	81 e8       	ldi	r24, 0x81	; 129
 404:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <tmp1>
			transmit_data(tmp1);
 408:	db de       	rcall	.-586    	; 0x1c0 <transmit_data>
			dir = 0x01;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 410:	f4 cf       	rjmp	.-24     	; 0x3fa <p1Tick+0xd2>
		case l2:
			tmp1 = 0xC3;
 412:	83 ec       	ldi	r24, 0xC3	; 195
 414:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <tmp1>
			transmit_data(tmp1);
 418:	d3 de       	rcall	.-602    	; 0x1c0 <transmit_data>
			break;
 41a:	ef cf       	rjmp	.-34     	; 0x3fa <p1Tick+0xd2>
		case l3:
			tmp1 = 0xE7;
 41c:	87 ee       	ldi	r24, 0xE7	; 231
 41e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <tmp1>
			transmit_data(tmp1);
 422:	ce de       	rcall	.-612    	; 0x1c0 <transmit_data>
			break;
 424:	ea cf       	rjmp	.-44     	; 0x3fa <p1Tick+0xd2>

00000426 <p2Tick>:
}
///////////////////////////////////////////////////////////////////
enum pat2States{init2, wait2, k1, k2} p2_state;
int p2Tick(){
	//Transition
	switch(p2_state){
 426:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <p2_state>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	51 f0       	breq	.+20     	; 0x442 <p2Tick+0x1c>
 42e:	28 f0       	brcs	.+10     	; 0x43a <p2Tick+0x14>
 430:	82 30       	cpi	r24, 0x02	; 2
 432:	71 f0       	breq	.+28     	; 0x450 <p2Tick+0x2a>
 434:	83 30       	cpi	r24, 0x03	; 3
 436:	e1 f0       	breq	.+56     	; 0x470 <p2Tick+0x4a>
 438:	2b c0       	rjmp	.+86     	; 0x490 <p2Tick+0x6a>
		case init2:
			p2_state = wait2;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <p2_state>
			break;
 440:	29 c0       	rjmp	.+82     	; 0x494 <p2Tick+0x6e>
		case wait2:
			if(go == 0x02){
 442:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	29 f5       	brne	.+74     	; 0x494 <p2Tick+0x6e>
				p2_state = k1;
 44a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <p2_state>
				break;
 44e:	26 c0       	rjmp	.+76     	; 0x49c <p2Tick+0x76>
			else{
				p2_state = wait2;
				break;
			}
		case k1:
			if(go == 0x02){
 450:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 454:	82 30       	cpi	r24, 0x02	; 2
 456:	41 f4       	brne	.+16     	; 0x468 <p2Tick+0x42>
				if(tmp2 != 0x80){
 458:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tmp2>
 45c:	80 38       	cpi	r24, 0x80	; 128
 45e:	f1 f4       	brne	.+60     	; 0x49c <p2Tick+0x76>
					p2_state = k1;
					break;
				}
				else{
					p2_state = k2;
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <p2_state>
					break;
 466:	21 c0       	rjmp	.+66     	; 0x4aa <p2Tick+0x84>
				}
			}
			else{
				p2_state = wait2;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <p2_state>
				break;
 46e:	12 c0       	rjmp	.+36     	; 0x494 <p2Tick+0x6e>
			}
		case k2:
			if(go == 0x02){
 470:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	41 f4       	brne	.+16     	; 0x488 <p2Tick+0x62>
				if(tmp2 != 0x01){
 478:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tmp2>
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	a9 f4       	brne	.+42     	; 0x4aa <p2Tick+0x84>
					p2_state = k2;
					break;
				}
				else{
					p2_state = k1;
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <p2_state>
					break;
 486:	0a c0       	rjmp	.+20     	; 0x49c <p2Tick+0x76>
				}
			}
			else{
				p2_state = wait2;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <p2_state>
				break;
 48e:	02 c0       	rjmp	.+4      	; 0x494 <p2Tick+0x6e>
			}
		default:
			p2_state = init2;
 490:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <p2_state>
			transmit_data(tmp2);
			break;
		default:
			break;
	}
	return p2_state;
 494:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <p2_state>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	08 95       	ret
		case init2:
			break;
		case wait2:
			break;
		case k1:
			tmp2 = tmp2 << 1;
 49c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tmp2>
 4a0:	88 0f       	add	r24, r24
 4a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tmp2>
			transmit_data(tmp2);
 4a6:	8c de       	rcall	.-744    	; 0x1c0 <transmit_data>
			break;
 4a8:	f5 cf       	rjmp	.-22     	; 0x494 <p2Tick+0x6e>
		case k2:
			tmp2 = tmp2 >> 1;
 4aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tmp2>
 4ae:	86 95       	lsr	r24
 4b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tmp2>
			transmit_data(tmp2);
 4b4:	85 de       	rcall	.-758    	; 0x1c0 <transmit_data>
			break;
 4b6:	ee cf       	rjmp	.-36     	; 0x494 <p2Tick+0x6e>

000004b8 <p3Tick>:
}
//////////////////////////////////////////////////////////////////////////
enum pat3States{init3, wait3, m1, m2}p3_state;
int p3Tick(){
	//Transition
	switch(p3_state){
 4b8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <p3_state>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	51 f0       	breq	.+20     	; 0x4d4 <p3Tick+0x1c>
 4c0:	28 f0       	brcs	.+10     	; 0x4cc <p3Tick+0x14>
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	79 f0       	breq	.+30     	; 0x4e4 <p3Tick+0x2c>
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	e1 f0       	breq	.+56     	; 0x502 <p3Tick+0x4a>
 4ca:	27 c0       	rjmp	.+78     	; 0x51a <p3Tick+0x62>
		case init3:
			p3_state = wait3;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <p3_state>
			break;
 4d2:	25 c0       	rjmp	.+74     	; 0x51e <p3Tick+0x66>
		case wait3:
			if(go == 0x03){
 4d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	09 f5       	brne	.+66     	; 0x51e <p3Tick+0x66>
				p3_state = m1;
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <p3_state>
				break;
 4e2:	21 c0       	rjmp	.+66     	; 0x526 <p3Tick+0x6e>
			else{
				p3_state = wait3;
				break;
			}
		case m1:
			if(go == 0x03){
 4e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	39 f4       	brne	.+14     	; 0x4fa <p3Tick+0x42>
				p3_state = m2;
 4ec:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <p3_state>
		case m1:
			tmp3 = 0xAA;
			transmit_data(tmp3);
			break;
		case m2:
			tmp3 = 0x55;
 4f0:	85 e5       	ldi	r24, 0x55	; 85
 4f2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <tmp3>
			transmit_data(tmp3);
 4f6:	64 de       	rcall	.-824    	; 0x1c0 <transmit_data>
			break;
 4f8:	12 c0       	rjmp	.+36     	; 0x51e <p3Tick+0x66>
			if(go == 0x03){
				p3_state = m2;
				break;
			}
			else{
				p3_state = wait3;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <p3_state>
				break;
 500:	0e c0       	rjmp	.+28     	; 0x51e <p3Tick+0x66>
			}
		case m2:
			if(go == 0x03){
 502:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <go>
 506:	83 30       	cpi	r24, 0x03	; 3
 508:	21 f4       	brne	.+8      	; 0x512 <p3Tick+0x5a>
				p3_state = m1;
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <p3_state>
				break;
 510:	0a c0       	rjmp	.+20     	; 0x526 <p3Tick+0x6e>
			}
			else{
				p3_state = wait3;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <p3_state>
				break;
 518:	02 c0       	rjmp	.+4      	; 0x51e <p3Tick+0x66>
			}
		default:
			p3_state = init3;
 51a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <p3_state>
			transmit_data(tmp3);
			break;
		default:
			break;
	}
	return p3_state;
 51e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <p3_state>
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	08 95       	ret
		case init3:
			break;
		case wait3:
			break;
		case m1:
			tmp3 = 0xAA;
 526:	8a ea       	ldi	r24, 0xAA	; 170
 528:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <tmp3>
			transmit_data(tmp3);
 52c:	49 de       	rcall	.-878    	; 0x1c0 <transmit_data>
			break;
 52e:	f7 cf       	rjmp	.-18     	; 0x51e <p3Tick+0x66>

00000530 <main>:

// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	28 97       	sbiw	r28, 0x08	; 8
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0x00; PORTB = 0xFF;
 544:	14 b8       	out	0x04, r1	; 4
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 54a:	87 b9       	out	0x07, r24	; 7
 54c:	18 b8       	out	0x08, r1	; 8
 54e:	0f 2e       	mov	r0, r31
 550:	f2 e3       	ldi	r31, 0x32	; 50
 552:	df 2e       	mov	r13, r31
 554:	f0 2d       	mov	r31, r0
 556:	c1 2c       	mov	r12, r1
 558:	b1 2c       	mov	r11, r1
 55a:	a1 2c       	mov	r10, r1
 55c:	51 e0       	ldi	r21, 0x01	; 1
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	20 e0       	ldi	r18, 0x00	; 0
 564:	04 c0       	rjmp	.+8      	; 0x56e <main+0x3e>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 566:	d6 2e       	mov	r13, r22
 568:	c7 2e       	mov	r12, r23
 56a:	b8 2e       	mov	r11, r24
 56c:	a9 2e       	mov	r10, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 56e:	65 2f       	mov	r22, r21
 570:	74 2f       	mov	r23, r20
 572:	83 2f       	mov	r24, r19
 574:	92 2f       	mov	r25, r18
 576:	2d 2d       	mov	r18, r13
 578:	3c 2d       	mov	r19, r12
 57a:	4b 2d       	mov	r20, r11
 57c:	5a 2d       	mov	r21, r10
 57e:	08 d1       	rcall	.+528    	; 0x790 <__udivmodsi4>
 580:	5d 2d       	mov	r21, r13
 582:	4c 2d       	mov	r20, r12
 584:	3b 2d       	mov	r19, r11
 586:	2a 2d       	mov	r18, r10
		if(c==0){return b;}
 588:	61 15       	cp	r22, r1
 58a:	71 05       	cpc	r23, r1
 58c:	81 05       	cpc	r24, r1
 58e:	91 05       	cpc	r25, r1
 590:	51 f7       	brne	.-44     	; 0x566 <main+0x36>
 592:	14 e6       	ldi	r17, 0x64	; 100
 594:	00 e0       	ldi	r16, 0x00	; 0
 596:	f1 2c       	mov	r15, r1
 598:	e1 2c       	mov	r14, r1
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <main+0x74>
		a = b;
		b = c;
 59c:	16 2f       	mov	r17, r22
 59e:	07 2f       	mov	r16, r23
 5a0:	f8 2e       	mov	r15, r24
 5a2:	e9 2e       	mov	r14, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 5a4:	6d 2d       	mov	r22, r13
 5a6:	7c 2d       	mov	r23, r12
 5a8:	8b 2d       	mov	r24, r11
 5aa:	9a 2d       	mov	r25, r10
 5ac:	21 2f       	mov	r18, r17
 5ae:	30 2f       	mov	r19, r16
 5b0:	4f 2d       	mov	r20, r15
 5b2:	5e 2d       	mov	r21, r14
 5b4:	ed d0       	rcall	.+474    	; 0x790 <__udivmodsi4>
 5b6:	d1 2e       	mov	r13, r17
 5b8:	c0 2e       	mov	r12, r16
 5ba:	bf 2c       	mov	r11, r15
 5bc:	ae 2c       	mov	r10, r14
		if(c==0){return b;}
 5be:	61 15       	cp	r22, r1
 5c0:	71 05       	cpc	r23, r1
 5c2:	81 05       	cpc	r24, r1
 5c4:	91 05       	cpc	r25, r1
 5c6:	51 f7       	brne	.-44     	; 0x59c <main+0x6c>
 5c8:	0f 2e       	mov	r0, r31
 5ca:	f4 e6       	ldi	r31, 0x64	; 100
 5cc:	df 2e       	mov	r13, r31
 5ce:	f0 2d       	mov	r31, r0
 5d0:	c1 2c       	mov	r12, r1
 5d2:	b1 2c       	mov	r11, r1
 5d4:	a1 2c       	mov	r10, r1
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <main+0xb0>
		a = b;
		b = c;
 5d8:	d6 2e       	mov	r13, r22
 5da:	c7 2e       	mov	r12, r23
 5dc:	b8 2e       	mov	r11, r24
 5de:	a9 2e       	mov	r10, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 5e0:	61 2f       	mov	r22, r17
 5e2:	70 2f       	mov	r23, r16
 5e4:	8f 2d       	mov	r24, r15
 5e6:	9e 2d       	mov	r25, r14
 5e8:	2d 2d       	mov	r18, r13
 5ea:	3c 2d       	mov	r19, r12
 5ec:	4b 2d       	mov	r20, r11
 5ee:	5a 2d       	mov	r21, r10
 5f0:	cf d0       	rcall	.+414    	; 0x790 <__udivmodsi4>
 5f2:	1d 2d       	mov	r17, r13
 5f4:	0c 2d       	mov	r16, r12
 5f6:	fb 2c       	mov	r15, r11
 5f8:	ea 2c       	mov	r14, r10
		if(c==0){return b;}
 5fa:	61 15       	cp	r22, r1
 5fc:	71 05       	cpc	r23, r1
 5fe:	81 05       	cpc	r24, r1
 600:	91 05       	cpc	r25, r1
 602:	51 f7       	brne	.-44     	; 0x5d8 <main+0xa8>
 604:	0f 2e       	mov	r0, r31
 606:	f4 e6       	ldi	r31, 0x64	; 100
 608:	ef 2e       	mov	r14, r31
 60a:	f0 2d       	mov	r31, r0
 60c:	f1 2c       	mov	r15, r1
 60e:	00 e0       	ldi	r16, 0x00	; 0
 610:	10 e0       	ldi	r17, 0x00	; 0
 612:	04 c0       	rjmp	.+8      	; 0x61c <main+0xec>
		a = b;
		b = c;
 614:	e6 2e       	mov	r14, r22
 616:	f7 2e       	mov	r15, r23
 618:	08 2f       	mov	r16, r24
 61a:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 61c:	6d 2d       	mov	r22, r13
 61e:	7c 2d       	mov	r23, r12
 620:	8b 2d       	mov	r24, r11
 622:	9a 2d       	mov	r25, r10
 624:	2e 2d       	mov	r18, r14
 626:	3f 2d       	mov	r19, r15
 628:	40 2f       	mov	r20, r16
 62a:	51 2f       	mov	r21, r17
 62c:	b1 d0       	rcall	.+354    	; 0x790 <__udivmodsi4>
 62e:	de 2c       	mov	r13, r14
 630:	cf 2c       	mov	r12, r15
 632:	b0 2e       	mov	r11, r16
 634:	a1 2e       	mov	r10, r17
		if(c==0){return b;}
 636:	61 15       	cp	r22, r1
 638:	71 05       	cpc	r23, r1
 63a:	81 05       	cpc	r24, r1
 63c:	91 05       	cpc	r25, r1
 63e:	51 f7       	brne	.-44     	; 0x614 <main+0xe4>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 640:	62 e3       	ldi	r22, 0x32	; 50
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	2e 2d       	mov	r18, r14
 64a:	3f 2d       	mov	r19, r15
 64c:	40 2f       	mov	r20, r16
 64e:	51 2f       	mov	r21, r17
 650:	9f d0       	rcall	.+318    	; 0x790 <__udivmodsi4>
 652:	49 01       	movw	r8, r18
 654:	5a 01       	movw	r10, r20
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 656:	64 e6       	ldi	r22, 0x64	; 100
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	2e 2d       	mov	r18, r14
 660:	3f 2d       	mov	r19, r15
 662:	40 2f       	mov	r20, r16
 664:	51 2f       	mov	r21, r17
 666:	94 d0       	rcall	.+296    	; 0x790 <__udivmodsi4>
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
	unsigned long int SMTick4_period = SMTick4_calc/GCD;

	//Declare an array of tasks
	static task task1, task2, task3, task4;
	task *tasks[] = {&task1, &task2, &task3, &task4};
 668:	88 e0       	ldi	r24, 0x08	; 8
 66a:	e8 e0       	ldi	r30, 0x08	; 8
 66c:	f1 e0       	ldi	r31, 0x01	; 1
 66e:	de 01       	movw	r26, r28
 670:	11 96       	adiw	r26, 0x01	; 1
 672:	01 90       	ld	r0, Z+
 674:	0d 92       	st	X+, r0
 676:	8a 95       	dec	r24
 678:	e1 f7       	brne	.-8      	; 0x672 <main+0x142>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 67a:	e1 e3       	ldi	r30, 0x31	; 49
 67c:	f1 e0       	ldi	r31, 0x01	; 1
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	80 83       	st	Z, r24
	task1.period = SMTick1_period;//Task Period.
 682:	81 82       	std	Z+1, r8	; 0x01
 684:	92 82       	std	Z+2, r9	; 0x02
 686:	a3 82       	std	Z+3, r10	; 0x03
 688:	b4 82       	std	Z+4, r11	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 68a:	85 82       	std	Z+5, r8	; 0x05
 68c:	96 82       	std	Z+6, r9	; 0x06
 68e:	a7 82       	std	Z+7, r10	; 0x07
 690:	b0 86       	std	Z+8, r11	; 0x08
	task1.TickFct = &d_Tick;//Function pointer for the tick.
 692:	6d ef       	ldi	r22, 0xFD	; 253
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	72 87       	std	Z+10, r23	; 0x0a
 698:	61 87       	std	Z+9, r22	; 0x09
	
	// Task 2
	task2.state = -1;
 69a:	e6 e2       	ldi	r30, 0x26	; 38
 69c:	f1 e0       	ldi	r31, 0x01	; 1
 69e:	80 83       	st	Z, r24
	task2.period = SMTick2_period;
 6a0:	21 83       	std	Z+1, r18	; 0x01
 6a2:	32 83       	std	Z+2, r19	; 0x02
 6a4:	43 83       	std	Z+3, r20	; 0x03
 6a6:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SMTick2_period;
 6a8:	25 83       	std	Z+5, r18	; 0x05
 6aa:	36 83       	std	Z+6, r19	; 0x06
 6ac:	47 83       	std	Z+7, r20	; 0x07
 6ae:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &p1Tick;
 6b0:	64 e9       	ldi	r22, 0x94	; 148
 6b2:	71 e0       	ldi	r23, 0x01	; 1
 6b4:	72 87       	std	Z+10, r23	; 0x0a
 6b6:	61 87       	std	Z+9, r22	; 0x09
	
	// Task 3
	task3.state = -1;
 6b8:	eb e1       	ldi	r30, 0x1B	; 27
 6ba:	f1 e0       	ldi	r31, 0x01	; 1
 6bc:	80 83       	st	Z, r24
	task3.period = SMTick3_period;
 6be:	21 83       	std	Z+1, r18	; 0x01
 6c0:	32 83       	std	Z+2, r19	; 0x02
 6c2:	43 83       	std	Z+3, r20	; 0x03
 6c4:	54 83       	std	Z+4, r21	; 0x04
	task3.elapsedTime = SMTick3_period;
 6c6:	25 83       	std	Z+5, r18	; 0x05
 6c8:	36 83       	std	Z+6, r19	; 0x06
 6ca:	47 83       	std	Z+7, r20	; 0x07
 6cc:	50 87       	std	Z+8, r21	; 0x08
	task3.TickFct = &p2Tick;
 6ce:	63 e1       	ldi	r22, 0x13	; 19
 6d0:	72 e0       	ldi	r23, 0x02	; 2
 6d2:	72 87       	std	Z+10, r23	; 0x0a
 6d4:	61 87       	std	Z+9, r22	; 0x09
	
	// Task 4
	task4.state = -1;
 6d6:	e0 e1       	ldi	r30, 0x10	; 16
 6d8:	f1 e0       	ldi	r31, 0x01	; 1
 6da:	80 83       	st	Z, r24
	task4.period = SMTick4_period;
 6dc:	21 83       	std	Z+1, r18	; 0x01
 6de:	32 83       	std	Z+2, r19	; 0x02
 6e0:	43 83       	std	Z+3, r20	; 0x03
 6e2:	54 83       	std	Z+4, r21	; 0x04
	task4.elapsedTime = SMTick4_period;
 6e4:	25 83       	std	Z+5, r18	; 0x05
 6e6:	36 83       	std	Z+6, r19	; 0x06
 6e8:	47 83       	std	Z+7, r20	; 0x07
 6ea:	50 87       	std	Z+8, r21	; 0x08
	task4.TickFct = &p3Tick;
 6ec:	8c e5       	ldi	r24, 0x5C	; 92
 6ee:	92 e0       	ldi	r25, 0x02	; 2
 6f0:	92 87       	std	Z+10, r25	; 0x0a

	// Set the timer and turn it on
	TimerSet(GCD);
 6f2:	81 87       	std	Z+9, r24	; 0x09
 6f4:	6e 2d       	mov	r22, r14
 6f6:	7f 2d       	mov	r23, r15
 6f8:	80 2f       	mov	r24, r16
 6fa:	91 2f       	mov	r25, r17
	TimerOn();
 6fc:	f0 dc       	rcall	.-1568   	; 0xde <TimerSet>
 6fe:	00 dd       	rcall	.-1536   	; 0x100 <TimerOn>

	PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
 700:	47 9a       	sbi	0x08, 7	; 8
	PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
 702:	45 98       	cbi	0x08, 5	; 8

	unsigned char a = 0xAA;
	transmit_data(a);
 704:	8a ea       	ldi	r24, 0xAA	; 170
 706:	5c dd       	rcall	.-1352   	; 0x1c0 <transmit_data>
 708:	7e 01       	movw	r14, r28
 70a:	89 e0       	ldi	r24, 0x09	; 9
 70c:	e8 0e       	add	r14, r24
 70e:	f1 1c       	adc	r15, r1
 710:	de 01       	movw	r26, r28
 712:	11 96       	adiw	r26, 0x01	; 1
 714:	6d 01       	movw	r12, r26
 716:	f6 01       	movw	r30, r12

	unsigned short i;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 718:	01 91       	ld	r16, Z+
 71a:	11 91       	ld	r17, Z+
 71c:	6f 01       	movw	r12, r30
 71e:	d8 01       	movw	r26, r16
 720:	15 96       	adiw	r26, 0x05	; 5
 722:	4d 91       	ld	r20, X+
 724:	5d 91       	ld	r21, X+
 726:	6d 91       	ld	r22, X+
 728:	7c 91       	ld	r23, X
 72a:	18 97       	sbiw	r26, 0x08	; 8
 72c:	11 96       	adiw	r26, 0x01	; 1
 72e:	8d 91       	ld	r24, X+
 730:	9d 91       	ld	r25, X+
 732:	0d 90       	ld	r0, X+
 734:	bc 91       	ld	r27, X
 736:	a0 2d       	mov	r26, r0
 738:	48 17       	cp	r20, r24
 73a:	59 07       	cpc	r21, r25
 73c:	6a 07       	cpc	r22, r26
 73e:	7b 07       	cpc	r23, r27
 740:	81 f4       	brne	.+32     	; 0x762 <main+0x232>
 742:	f8 01       	movw	r30, r16
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 744:	80 81       	ld	r24, Z
 746:	01 84       	ldd	r0, Z+9	; 0x09
 748:	f2 85       	ldd	r31, Z+10	; 0x0a
 74a:	e0 2d       	mov	r30, r0
 74c:	08 2e       	mov	r0, r24
 74e:	00 0c       	add	r0, r0
 750:	99 0b       	sbc	r25, r25
 752:	09 95       	icall
 754:	d8 01       	movw	r26, r16
 756:	8c 93       	st	X, r24
 758:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 75a:	15 82       	std	Z+5, r1	; 0x05
 75c:	16 82       	std	Z+6, r1	; 0x06
 75e:	17 82       	std	Z+7, r1	; 0x07
 760:	10 86       	std	Z+8, r1	; 0x08
 762:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 1;
 764:	85 81       	ldd	r24, Z+5	; 0x05
 766:	96 81       	ldd	r25, Z+6	; 0x06
 768:	a7 81       	ldd	r26, Z+7	; 0x07
 76a:	b0 85       	ldd	r27, Z+8	; 0x08
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	a1 1d       	adc	r26, r1
 770:	b1 1d       	adc	r27, r1
 772:	85 83       	std	Z+5, r24	; 0x05
 774:	96 83       	std	Z+6, r25	; 0x06
 776:	a7 83       	std	Z+7, r26	; 0x07
 778:	b0 87       	std	Z+8, r27	; 0x08
 77a:	45 98       	cbi	0x08, 5	; 8
			PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
 77c:	ce 14       	cp	r12, r14
	unsigned char a = 0xAA;
	transmit_data(a);

	unsigned short i;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
 77e:	df 04       	cpc	r13, r15
 780:	51 f6       	brne	.-108    	; 0x716 <main+0x1e6>
 782:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <TimerFlag>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
			PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
		}
		while(!TimerFlag);
 786:	88 23       	and	r24, r24
 788:	e1 f3       	breq	.-8      	; 0x782 <main+0x252>
 78a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <TimerFlag>
		TimerFlag = 0;
 78e:	c0 cf       	rjmp	.-128    	; 0x710 <main+0x1e0>

00000790 <__udivmodsi4>:
	}
 790:	a1 e2       	ldi	r26, 0x21	; 33
 792:	1a 2e       	mov	r1, r26
 794:	aa 1b       	sub	r26, r26
 796:	bb 1b       	sub	r27, r27
 798:	fd 01       	movw	r30, r26
 79a:	0d c0       	rjmp	.+26     	; 0x7b6 <__udivmodsi4_ep>

0000079c <__udivmodsi4_loop>:
 79c:	aa 1f       	adc	r26, r26
 79e:	bb 1f       	adc	r27, r27
 7a0:	ee 1f       	adc	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	a2 17       	cp	r26, r18
 7a6:	b3 07       	cpc	r27, r19
 7a8:	e4 07       	cpc	r30, r20
 7aa:	f5 07       	cpc	r31, r21
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__udivmodsi4_ep>
 7ae:	a2 1b       	sub	r26, r18
 7b0:	b3 0b       	sbc	r27, r19
 7b2:	e4 0b       	sbc	r30, r20
 7b4:	f5 0b       	sbc	r31, r21

000007b6 <__udivmodsi4_ep>:
 7b6:	66 1f       	adc	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	1a 94       	dec	r1
 7c0:	69 f7       	brne	.-38     	; 0x79c <__udivmodsi4_loop>
 7c2:	60 95       	com	r22
 7c4:	70 95       	com	r23
 7c6:	80 95       	com	r24
 7c8:	90 95       	com	r25
 7ca:	9b 01       	movw	r18, r22
 7cc:	ac 01       	movw	r20, r24
 7ce:	bd 01       	movw	r22, r26
 7d0:	cf 01       	movw	r24, r30
 7d2:	08 95       	ret

000007d4 <__tablejump2__>:
 7d4:	ee 0f       	add	r30, r30
 7d6:	ff 1f       	adc	r31, r31
 7d8:	00 24       	eor	r0, r0
 7da:	00 1c       	adc	r0, r0
 7dc:	0b be       	out	0x3b, r0	; 59
 7de:	07 90       	elpm	r0, Z+
 7e0:	f6 91       	elpm	r31, Z
 7e2:	e0 2d       	mov	r30, r0
 7e4:	09 94       	ijmp

000007e6 <_exit>:
 7e6:	f8 94       	cli

000007e8 <__stop_program>:
 7e8:	ff cf       	rjmp	.-2      	; 0x7e8 <__stop_program>
