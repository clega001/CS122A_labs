
lab3_part2_servant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000006e4  00000778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800112  00800112  0000078a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fec  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a07  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f5  00000000  00000000  0000228f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000734  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000760  00000000  00000000  00003220  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	54 c1       	rjmp	.+680    	; 0x2de <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 36       	cpi	r26, 0x62	; 98
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	61 d1       	rcall	.+706    	; 0x386 <main>
  c4:	0d c3       	rjmp	.+1562   	; 0x6e0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TickFct_Speed>:
        if(c==0){return b;}
        a = b;
b = c;
    }
    return 0;
}
  c8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <s_state>
  cc:	88 23       	and	r24, r24
  ce:	19 f0       	breq	.+6      	; 0xd6 <TickFct_Speed+0xe>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	39 f0       	breq	.+14     	; 0xe2 <TickFct_Speed+0x1a>
  d4:	04 c0       	rjmp	.+8      	; 0xde <TickFct_Speed+0x16>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <s_state>
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <TickFct_Speed+0x1a>
  de:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <s_state>
  e2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <s_state>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret

000000ea <TickFct_P1>:
  ea:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p1_state>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	51 f0       	breq	.+20     	; 0x106 <TickFct_P1+0x1c>
  f2:	28 f0       	brcs	.+10     	; 0xfe <TickFct_P1+0x14>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	79 f0       	breq	.+30     	; 0x116 <TickFct_P1+0x2c>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	c9 f0       	breq	.+50     	; 0x12e <TickFct_P1+0x44>
  fc:	24 c0       	rjmp	.+72     	; 0x146 <TickFct_P1+0x5c>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p1_state>
 104:	22 c0       	rjmp	.+68     	; 0x14a <TickFct_P1+0x60>
 106:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 10a:	80 3a       	cpi	r24, 0xA0	; 160
 10c:	f1 f4       	brne	.+60     	; 0x14a <TickFct_P1+0x60>
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p1_state>
 114:	1a c0       	rjmp	.+52     	; 0x14a <TickFct_P1+0x60>
 116:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 11a:	80 3a       	cpi	r24, 0xA0	; 160
 11c:	21 f4       	brne	.+8      	; 0x126 <TickFct_P1+0x3c>
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p1_state>
 124:	12 c0       	rjmp	.+36     	; 0x14a <TickFct_P1+0x60>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p1_state>
 12c:	0e c0       	rjmp	.+28     	; 0x14a <TickFct_P1+0x60>
 12e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 132:	80 3a       	cpi	r24, 0xA0	; 160
 134:	21 f4       	brne	.+8      	; 0x13e <TickFct_P1+0x54>
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p1_state>
 13c:	06 c0       	rjmp	.+12     	; 0x14a <TickFct_P1+0x60>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p1_state>
 144:	02 c0       	rjmp	.+4      	; 0x14a <TickFct_P1+0x60>
 146:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <p1_state>
 14a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p1_state>
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

00000152 <TickFct_P2>:
 152:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <p2_state>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	51 f0       	breq	.+20     	; 0x16e <TickFct_P2+0x1c>
 15a:	28 f0       	brcs	.+10     	; 0x166 <TickFct_P2+0x14>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	79 f0       	breq	.+30     	; 0x17e <TickFct_P2+0x2c>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	c9 f0       	breq	.+50     	; 0x196 <TickFct_P2+0x44>
 164:	24 c0       	rjmp	.+72     	; 0x1ae <TickFct_P2+0x5c>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <p2_state>
 16c:	22 c0       	rjmp	.+68     	; 0x1b2 <TickFct_P2+0x60>
 16e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 172:	80 3b       	cpi	r24, 0xB0	; 176
 174:	f1 f4       	brne	.+60     	; 0x1b2 <TickFct_P2+0x60>
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <p2_state>
 17c:	1a c0       	rjmp	.+52     	; 0x1b2 <TickFct_P2+0x60>
 17e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 182:	80 3b       	cpi	r24, 0xB0	; 176
 184:	21 f4       	brne	.+8      	; 0x18e <TickFct_P2+0x3c>
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <p2_state>
 18c:	12 c0       	rjmp	.+36     	; 0x1b2 <TickFct_P2+0x60>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <p2_state>
 194:	0e c0       	rjmp	.+28     	; 0x1b2 <TickFct_P2+0x60>
 196:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 19a:	80 3b       	cpi	r24, 0xB0	; 176
 19c:	21 f4       	brne	.+8      	; 0x1a6 <TickFct_P2+0x54>
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <p2_state>
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <TickFct_P2+0x60>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <p2_state>
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <TickFct_P2+0x60>
 1ae:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <p2_state>
 1b2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <p2_state>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	08 95       	ret

000001ba <TickFct_P3>:
 1ba:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <p3_state>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	41 f0       	breq	.+16     	; 0x1d2 <TickFct_P3+0x18>
 1c2:	18 f0       	brcs	.+6      	; 0x1ca <TickFct_P3+0x10>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	69 f0       	breq	.+26     	; 0x1e2 <TickFct_P3+0x28>
 1c8:	14 c0       	rjmp	.+40     	; 0x1f2 <TickFct_P3+0x38>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <p3_state>
 1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <TickFct_P3+0x3c>
 1d2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 1d6:	80 3c       	cpi	r24, 0xC0	; 192
 1d8:	71 f4       	brne	.+28     	; 0x1f6 <TickFct_P3+0x3c>
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <p3_state>
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <TickFct_P3+0x3c>
 1e2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 1e6:	80 3c       	cpi	r24, 0xC0	; 192
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <TickFct_P3+0x3c>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <p3_state>
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <TickFct_P3+0x3c>
 1f2:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <p3_state>
 1f6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <p3_state>
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 95       	ret

000001fe <TickFct_P4>:
 1fe:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <p4_state>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	51 f0       	breq	.+20     	; 0x21a <TickFct_P4+0x1c>
 206:	28 f0       	brcs	.+10     	; 0x212 <TickFct_P4+0x14>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	79 f0       	breq	.+30     	; 0x22a <TickFct_P4+0x2c>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	e1 f0       	breq	.+56     	; 0x248 <TickFct_P4+0x4a>
 210:	2b c0       	rjmp	.+86     	; 0x268 <TickFct_P4+0x6a>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <p4_state>
 218:	29 c0       	rjmp	.+82     	; 0x26c <TickFct_P4+0x6e>
 21a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 21e:	80 3d       	cpi	r24, 0xD0	; 208
 220:	29 f5       	brne	.+74     	; 0x26c <TickFct_P4+0x6e>
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <p4_state>
 228:	21 c0       	rjmp	.+66     	; 0x26c <TickFct_P4+0x6e>
 22a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 22e:	80 3d       	cpi	r24, 0xD0	; 208
 230:	39 f4       	brne	.+14     	; 0x240 <TickFct_P4+0x42>
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	c9 f4       	brne	.+50     	; 0x26c <TickFct_P4+0x6e>
 23a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <p4_state>
 23e:	16 c0       	rjmp	.+44     	; 0x26c <TickFct_P4+0x6e>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <p4_state>
 246:	12 c0       	rjmp	.+36     	; 0x26c <TickFct_P4+0x6e>
 248:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pattern>
 24c:	80 3d       	cpi	r24, 0xD0	; 208
 24e:	41 f4       	brne	.+16     	; 0x260 <TickFct_P4+0x62>
 250:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 254:	80 3c       	cpi	r24, 0xC0	; 192
 256:	51 f4       	brne	.+20     	; 0x26c <TickFct_P4+0x6e>
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <p4_state>
 25e:	06 c0       	rjmp	.+12     	; 0x26c <TickFct_P4+0x6e>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <p4_state>
 266:	02 c0       	rjmp	.+4      	; 0x26c <TickFct_P4+0x6e>
 268:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <p4_state>
 26c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <p4_state>
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret

00000274 <TimerSet>:
 274:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 278:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 27c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 280:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
 284:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <_avr_timer_cntcurr>
 288:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <_avr_timer_cntcurr+0x1>
 28c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <_avr_timer_cntcurr+0x2>
 290:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <_avr_timer_cntcurr+0x3>
 294:	08 95       	ret

00000296 <TimerOn>:
 296:	8b e0       	ldi	r24, 0x0B	; 11
 298:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 29c:	8d e7       	ldi	r24, 0x7D	; 125
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 2ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 2be:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 2c2:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 2c6:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <_avr_timer_cntcurr>
 2ca:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <_avr_timer_cntcurr+0x1>
 2ce:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <_avr_timer_cntcurr+0x2>
 2d2:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <_avr_timer_cntcurr+0x3>
 2d6:	8f b7       	in	r24, 0x3f	; 63
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	8f bf       	out	0x3f, r24	; 63
 2dc:	08 95       	ret

000002de <__vector_13>:
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <_avr_timer_cntcurr>
 2f4:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <_avr_timer_cntcurr+0x1>
 2f8:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <_avr_timer_cntcurr+0x2>
 2fc:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <_avr_timer_cntcurr+0x3>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	a1 09       	sbc	r26, r1
 304:	b1 09       	sbc	r27, r1
 306:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <_avr_timer_cntcurr>
 30a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <_avr_timer_cntcurr+0x1>
 30e:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <_avr_timer_cntcurr+0x2>
 312:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <_avr_timer_cntcurr+0x3>
 316:	89 2b       	or	r24, r25
 318:	8a 2b       	or	r24, r26
 31a:	8b 2b       	or	r24, r27
 31c:	99 f4       	brne	.+38     	; 0x344 <__vector_13+0x66>
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <TimerFlag>
 324:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 328:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 32c:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 330:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 334:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <_avr_timer_cntcurr>
 338:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <_avr_timer_cntcurr+0x1>
 33c:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <_avr_timer_cntcurr+0x2>
 340:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <_avr_timer_cntcurr+0x3>
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <SPI_SlaveInit>:
	/* Set MISO output, all others input */

	/*DDR_SPI = (1<<DD_MISO);*/
	//PORTB = (1<<PORTB4)|(1<<PORTB6);
	//PORTB = (1<<PORTB6);
	DDRB = (1<<DDRB4)|(1<<DDRB6);
 356:	80 e5       	ldi	r24, 0x50	; 80
 358:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI */
	SPCR = (1<<SPE);
 35a:	80 e4       	ldi	r24, 0x40	; 64
 35c:	8c bd       	out	0x2c, r24	; 44
 35e:	08 95       	ret

00000360 <SPI_SlaveReceive>:
}

char SPI_SlaveReceive(void){
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 360:	0d b4       	in	r0, 0x2d	; 45
 362:	07 fe       	sbrs	r0, 7
 364:	fd cf       	rjmp	.-6      	; 0x360 <SPI_SlaveReceive>
	;
	/* Return Data Register */
	return SPDR;
 366:	8e b5       	in	r24, 0x2e	; 46
}
 368:	08 95       	ret

0000036a <TickFct_Receive>:
	}
	switch(r_state){
		case r_start:
			break;
		case Wait:
			x = SPI_SlaveReceive();
 36a:	fa df       	rcall	.-12     	; 0x360 <SPI_SlaveReceive>
 36c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <x>
			
			pattern = x & 0xF0;
 370:	98 2f       	mov	r25, r24
 372:	90 7f       	andi	r25, 0xF0	; 240
 374:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <pattern>
			speed = x & 0x0F;
 378:	8f 70       	andi	r24, 0x0F	; 15
 37a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <speed>
			
			PORTC = speed;
 37e:	88 b9       	out	0x08, r24	; 8
			
		default:
			break;
	}
	return r_state;
}
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	08 95       	ret

00000386 <main>:
}
// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	2c 97       	sbiw	r28, 0x0c	; 12
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
// Set Data Direction Registers
DDRB = 0x00; PORTB = 0x00;
 39a:	14 b8       	out	0x04, r1	; 4
 39c:	15 b8       	out	0x05, r1	; 5
DDRC = 0xFF; PORTC = 0x00;
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	87 b9       	out	0x07, r24	; 7
 3a2:	18 b8       	out	0x08, r1	; 8
 3a4:	0f 2e       	mov	r0, r31
 3a6:	f4 ef       	ldi	r31, 0xF4	; 244
 3a8:	bf 2e       	mov	r11, r31
 3aa:	f0 2d       	mov	r31, r0
 3ac:	aa 24       	eor	r10, r10
 3ae:	a3 94       	inc	r10
 3b0:	91 2c       	mov	r9, r1
 3b2:	81 2c       	mov	r8, r1
 3b4:	51 e0       	ldi	r21, 0x01	; 1
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <main+0x40>
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
        a = b;
b = c;
 3be:	b6 2e       	mov	r11, r22
 3c0:	a7 2e       	mov	r10, r23
 3c2:	98 2e       	mov	r9, r24
 3c4:	89 2e       	mov	r8, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 3c6:	65 2f       	mov	r22, r21
 3c8:	74 2f       	mov	r23, r20
 3ca:	83 2f       	mov	r24, r19
 3cc:	92 2f       	mov	r25, r18
 3ce:	2b 2d       	mov	r18, r11
 3d0:	3a 2d       	mov	r19, r10
 3d2:	49 2d       	mov	r20, r9
 3d4:	58 2d       	mov	r21, r8
 3d6:	62 d1       	rcall	.+708    	; 0x69c <__udivmodsi4>
 3d8:	5b 2d       	mov	r21, r11
 3da:	4a 2d       	mov	r20, r10
 3dc:	39 2d       	mov	r19, r9
 3de:	28 2d       	mov	r18, r8
        if(c==0){return b;}
 3e0:	61 15       	cp	r22, r1
 3e2:	71 05       	cpc	r23, r1
 3e4:	81 05       	cpc	r24, r1
 3e6:	91 05       	cpc	r25, r1
 3e8:	51 f7       	brne	.-44     	; 0x3be <main+0x38>
 3ea:	18 ee       	ldi	r17, 0xE8	; 232
 3ec:	03 e0       	ldi	r16, 0x03	; 3
 3ee:	f1 2c       	mov	r15, r1
 3f0:	e1 2c       	mov	r14, r1
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <main+0x76>
        a = b;
b = c;
 3f4:	16 2f       	mov	r17, r22
 3f6:	07 2f       	mov	r16, r23
 3f8:	f8 2e       	mov	r15, r24
 3fa:	e9 2e       	mov	r14, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 3fc:	6b 2d       	mov	r22, r11
 3fe:	7a 2d       	mov	r23, r10
 400:	89 2d       	mov	r24, r9
 402:	98 2d       	mov	r25, r8
 404:	21 2f       	mov	r18, r17
 406:	30 2f       	mov	r19, r16
 408:	4f 2d       	mov	r20, r15
 40a:	5e 2d       	mov	r21, r14
 40c:	47 d1       	rcall	.+654    	; 0x69c <__udivmodsi4>
 40e:	b1 2e       	mov	r11, r17
 410:	a0 2e       	mov	r10, r16
 412:	9f 2c       	mov	r9, r15
 414:	8e 2c       	mov	r8, r14
        if(c==0){return b;}
 416:	61 15       	cp	r22, r1
 418:	71 05       	cpc	r23, r1
 41a:	81 05       	cpc	r24, r1
 41c:	91 05       	cpc	r25, r1
 41e:	51 f7       	brne	.-44     	; 0x3f4 <main+0x6e>
 420:	0f 2e       	mov	r0, r31
 422:	f8 ee       	ldi	r31, 0xE8	; 232
 424:	bf 2e       	mov	r11, r31
 426:	f0 2d       	mov	r31, r0
 428:	0f 2e       	mov	r0, r31
 42a:	f3 e0       	ldi	r31, 0x03	; 3
 42c:	af 2e       	mov	r10, r31
 42e:	f0 2d       	mov	r31, r0
 430:	91 2c       	mov	r9, r1
 432:	81 2c       	mov	r8, r1
 434:	04 c0       	rjmp	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
        a = b;
b = c;
 436:	b6 2e       	mov	r11, r22
 438:	a7 2e       	mov	r10, r23
 43a:	98 2e       	mov	r9, r24
 43c:	89 2e       	mov	r8, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 43e:	61 2f       	mov	r22, r17
 440:	70 2f       	mov	r23, r16
 442:	8f 2d       	mov	r24, r15
 444:	9e 2d       	mov	r25, r14
 446:	2b 2d       	mov	r18, r11
 448:	3a 2d       	mov	r19, r10
 44a:	49 2d       	mov	r20, r9
 44c:	58 2d       	mov	r21, r8
 44e:	26 d1       	rcall	.+588    	; 0x69c <__udivmodsi4>
 450:	1b 2d       	mov	r17, r11
 452:	0a 2d       	mov	r16, r10
 454:	f9 2c       	mov	r15, r9
 456:	e8 2c       	mov	r14, r8
        if(c==0){return b;}
 458:	61 15       	cp	r22, r1
 45a:	71 05       	cpc	r23, r1
 45c:	81 05       	cpc	r24, r1
 45e:	91 05       	cpc	r25, r1
 460:	51 f7       	brne	.-44     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 462:	18 ee       	ldi	r17, 0xE8	; 232
 464:	03 e0       	ldi	r16, 0x03	; 3
 466:	f1 2c       	mov	r15, r1
 468:	e1 2c       	mov	r14, r1
 46a:	04 c0       	rjmp	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
        a = b;
b = c;
 46c:	16 2f       	mov	r17, r22
 46e:	07 2f       	mov	r16, r23
 470:	f8 2e       	mov	r15, r24
 472:	e9 2e       	mov	r14, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 474:	6b 2d       	mov	r22, r11
 476:	7a 2d       	mov	r23, r10
 478:	89 2d       	mov	r24, r9
 47a:	98 2d       	mov	r25, r8
 47c:	21 2f       	mov	r18, r17
 47e:	30 2f       	mov	r19, r16
 480:	4f 2d       	mov	r20, r15
 482:	5e 2d       	mov	r21, r14
 484:	0b d1       	rcall	.+534    	; 0x69c <__udivmodsi4>
 486:	b1 2e       	mov	r11, r17
 488:	a0 2e       	mov	r10, r16
 48a:	9f 2c       	mov	r9, r15
 48c:	8e 2c       	mov	r8, r14
        if(c==0){return b;}
 48e:	61 15       	cp	r22, r1
 490:	71 05       	cpc	r23, r1
 492:	81 05       	cpc	r24, r1
 494:	91 05       	cpc	r25, r1
 496:	51 f7       	brne	.-44     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 498:	0f 2e       	mov	r0, r31
 49a:	f8 ee       	ldi	r31, 0xE8	; 232
 49c:	bf 2e       	mov	r11, r31
 49e:	f0 2d       	mov	r31, r0
 4a0:	0f 2e       	mov	r0, r31
 4a2:	f3 e0       	ldi	r31, 0x03	; 3
 4a4:	af 2e       	mov	r10, r31
 4a6:	f0 2d       	mov	r31, r0
 4a8:	91 2c       	mov	r9, r1
 4aa:	81 2c       	mov	r8, r1
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
        a = b;
b = c;
 4ae:	b6 2e       	mov	r11, r22
 4b0:	a7 2e       	mov	r10, r23
 4b2:	98 2e       	mov	r9, r24
 4b4:	89 2e       	mov	r8, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 4b6:	61 2f       	mov	r22, r17
 4b8:	70 2f       	mov	r23, r16
 4ba:	8f 2d       	mov	r24, r15
 4bc:	9e 2d       	mov	r25, r14
 4be:	2b 2d       	mov	r18, r11
 4c0:	3a 2d       	mov	r19, r10
 4c2:	49 2d       	mov	r20, r9
 4c4:	58 2d       	mov	r21, r8
 4c6:	ea d0       	rcall	.+468    	; 0x69c <__udivmodsi4>
 4c8:	1b 2d       	mov	r17, r11
 4ca:	0a 2d       	mov	r16, r10
 4cc:	f9 2c       	mov	r15, r9
 4ce:	e8 2c       	mov	r14, r8
        if(c==0){return b;}
 4d0:	61 15       	cp	r22, r1
 4d2:	71 05       	cpc	r23, r1
 4d4:	81 05       	cpc	r24, r1
 4d6:	91 05       	cpc	r25, r1
 4d8:	51 f7       	brne	.-44     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4da:	0f 2e       	mov	r0, r31
 4dc:	f4 ef       	ldi	r31, 0xF4	; 244
 4de:	ef 2e       	mov	r14, r31
 4e0:	f0 2d       	mov	r31, r0
 4e2:	ff 24       	eor	r15, r15
 4e4:	f3 94       	inc	r15
 4e6:	00 e0       	ldi	r16, 0x00	; 0
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
        a = b;
b = c;
 4ec:	e6 2e       	mov	r14, r22
 4ee:	f7 2e       	mov	r15, r23
 4f0:	08 2f       	mov	r16, r24
 4f2:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 4f4:	6b 2d       	mov	r22, r11
 4f6:	7a 2d       	mov	r23, r10
 4f8:	89 2d       	mov	r24, r9
 4fa:	98 2d       	mov	r25, r8
 4fc:	2e 2d       	mov	r18, r14
 4fe:	3f 2d       	mov	r19, r15
 500:	40 2f       	mov	r20, r16
 502:	51 2f       	mov	r21, r17
 504:	cb d0       	rcall	.+406    	; 0x69c <__udivmodsi4>
 506:	be 2c       	mov	r11, r14
 508:	af 2c       	mov	r10, r15
 50a:	90 2e       	mov	r9, r16
 50c:	81 2e       	mov	r8, r17
        if(c==0){return b;}
 50e:	61 15       	cp	r22, r1
 510:	71 05       	cpc	r23, r1
 512:	81 05       	cpc	r24, r1
 514:	91 05       	cpc	r25, r1
 516:	51 f7       	brne	.-44     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>

//Greatest common divisor for all tasks or smallest time unit for tasks.
unsigned long int GCD = tmpGCD;

//Recalculate GCD periods for scheduler
unsigned long int SMTick1_period = SMTick1_calc/GCD;
 518:	64 ef       	ldi	r22, 0xF4	; 244
 51a:	71 e0       	ldi	r23, 0x01	; 1
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	2e 2d       	mov	r18, r14
 522:	3f 2d       	mov	r19, r15
 524:	40 2f       	mov	r20, r16
 526:	51 2f       	mov	r21, r17
 528:	b9 d0       	rcall	.+370    	; 0x69c <__udivmodsi4>
 52a:	49 01       	movw	r8, r18
 52c:	5a 01       	movw	r10, r20
unsigned long int SMTick2_period = SMTick2_calc/GCD;
 52e:	68 ee       	ldi	r22, 0xE8	; 232
 530:	73 e0       	ldi	r23, 0x03	; 3
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	2e 2d       	mov	r18, r14
 538:	3f 2d       	mov	r19, r15
 53a:	40 2f       	mov	r20, r16
 53c:	51 2f       	mov	r21, r17
 53e:	ae d0       	rcall	.+348    	; 0x69c <__udivmodsi4>
unsigned long int SMTick6_period = SMTick6_calc/GCD;


//Declare an array of tasks 
static task task1, task2, task3, task4, task5, task6;
task *tasks[] = {&task1, &task2, &task3, &task4, &task5, &task6};
 540:	8c e0       	ldi	r24, 0x0C	; 12
 542:	e5 e0       	ldi	r30, 0x05	; 5
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	de 01       	movw	r26, r28
 548:	11 96       	adiw	r26, 0x01	; 1
 54a:	01 90       	ld	r0, Z+
 54c:	0d 92       	st	X+, r0
 54e:	8a 95       	dec	r24
 550:	e1 f7       	brne	.-8      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

//Task 1
task1.state = -1;//Task initial state.
 552:	e9 e4       	ldi	r30, 0x49	; 73
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	6f ef       	ldi	r22, 0xFF	; 255
 558:	60 83       	st	Z, r22
task1.period = SMTick1_period;//Task Period.
 55a:	81 82       	std	Z+1, r8	; 0x01
 55c:	92 82       	std	Z+2, r9	; 0x02
 55e:	a3 82       	std	Z+3, r10	; 0x03
 560:	b4 82       	std	Z+4, r11	; 0x04
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 562:	85 82       	std	Z+5, r8	; 0x05
 564:	96 82       	std	Z+6, r9	; 0x06
 566:	a7 82       	std	Z+7, r10	; 0x07
 568:	b0 86       	std	Z+8, r11	; 0x08
task1.TickFct = &TickFct_Receive;//Function pointer for the tick.
 56a:	85 eb       	ldi	r24, 0xB5	; 181
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	92 87       	std	Z+10, r25	; 0x0a
 570:	81 87       	std	Z+9, r24	; 0x09

//Task 2
task2.state = -1;
 572:	ee e3       	ldi	r30, 0x3E	; 62
 574:	f1 e0       	ldi	r31, 0x01	; 1
 576:	60 83       	st	Z, r22
task2.period = SMTick2_period;
 578:	21 83       	std	Z+1, r18	; 0x01
 57a:	32 83       	std	Z+2, r19	; 0x02
 57c:	43 83       	std	Z+3, r20	; 0x03
 57e:	54 83       	std	Z+4, r21	; 0x04
task2.elapsedTime = SMTick2_period;
 580:	25 83       	std	Z+5, r18	; 0x05
 582:	36 83       	std	Z+6, r19	; 0x06
 584:	47 83       	std	Z+7, r20	; 0x07
 586:	50 87       	std	Z+8, r21	; 0x08
task2.TickFct = &TickFct_P1;
 588:	85 e7       	ldi	r24, 0x75	; 117
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	92 87       	std	Z+10, r25	; 0x0a
 58e:	81 87       	std	Z+9, r24	; 0x09

//Task 3
task3.state = -1;
 590:	e3 e3       	ldi	r30, 0x33	; 51
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	60 83       	st	Z, r22
task3.period = SMTick3_period;
 596:	21 83       	std	Z+1, r18	; 0x01
 598:	32 83       	std	Z+2, r19	; 0x02
 59a:	43 83       	std	Z+3, r20	; 0x03
 59c:	54 83       	std	Z+4, r21	; 0x04
task3.elapsedTime = SMTick3_period;
 59e:	25 83       	std	Z+5, r18	; 0x05
 5a0:	36 83       	std	Z+6, r19	; 0x06
 5a2:	47 83       	std	Z+7, r20	; 0x07
 5a4:	50 87       	std	Z+8, r21	; 0x08
task3.TickFct = &TickFct_P2;
 5a6:	89 ea       	ldi	r24, 0xA9	; 169
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	92 87       	std	Z+10, r25	; 0x0a
 5ac:	81 87       	std	Z+9, r24	; 0x09

//Task 4
task4.state = -1;
 5ae:	e8 e2       	ldi	r30, 0x28	; 40
 5b0:	f1 e0       	ldi	r31, 0x01	; 1
 5b2:	60 83       	st	Z, r22
task4.period = SMTick4_period;
 5b4:	21 83       	std	Z+1, r18	; 0x01
 5b6:	32 83       	std	Z+2, r19	; 0x02
 5b8:	43 83       	std	Z+3, r20	; 0x03
 5ba:	54 83       	std	Z+4, r21	; 0x04
task4.elapsedTime = SMTick4_period;
 5bc:	25 83       	std	Z+5, r18	; 0x05
 5be:	36 83       	std	Z+6, r19	; 0x06
 5c0:	47 83       	std	Z+7, r20	; 0x07
 5c2:	50 87       	std	Z+8, r21	; 0x08
task4.TickFct = &TickFct_P3;
 5c4:	8d ed       	ldi	r24, 0xDD	; 221
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	92 87       	std	Z+10, r25	; 0x0a
 5ca:	81 87       	std	Z+9, r24	; 0x09

//Task 5
task5.state = -1;
 5cc:	ed e1       	ldi	r30, 0x1D	; 29
 5ce:	f1 e0       	ldi	r31, 0x01	; 1
 5d0:	60 83       	st	Z, r22
task5.period = SMTick5_period;
 5d2:	21 83       	std	Z+1, r18	; 0x01
 5d4:	32 83       	std	Z+2, r19	; 0x02
 5d6:	43 83       	std	Z+3, r20	; 0x03
 5d8:	54 83       	std	Z+4, r21	; 0x04
task5.elapsedTime = SMTick5_period;
 5da:	25 83       	std	Z+5, r18	; 0x05
 5dc:	36 83       	std	Z+6, r19	; 0x06
 5de:	47 83       	std	Z+7, r20	; 0x07
 5e0:	50 87       	std	Z+8, r21	; 0x08
task5.TickFct = &TickFct_P4;
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	92 87       	std	Z+10, r25	; 0x0a
 5e8:	81 87       	std	Z+9, r24	; 0x09

//Task 6
task6.state = -1;
 5ea:	e2 e1       	ldi	r30, 0x12	; 18
 5ec:	f1 e0       	ldi	r31, 0x01	; 1
 5ee:	60 83       	st	Z, r22
task6.period = SMTick6_period;
 5f0:	81 82       	std	Z+1, r8	; 0x01
 5f2:	92 82       	std	Z+2, r9	; 0x02
 5f4:	a3 82       	std	Z+3, r10	; 0x03
 5f6:	b4 82       	std	Z+4, r11	; 0x04
task6.elapsedTime = SMTick6_period;
 5f8:	85 82       	std	Z+5, r8	; 0x05
 5fa:	96 82       	std	Z+6, r9	; 0x06
 5fc:	a7 82       	std	Z+7, r10	; 0x07
 5fe:	b0 86       	std	Z+8, r11	; 0x08
task6.TickFct = &TickFct_Speed;
 600:	84 e6       	ldi	r24, 0x64	; 100
 602:	90 e0       	ldi	r25, 0x00	; 0

// Set the timer and turn it on
TimerSet(GCD);
 604:	92 87       	std	Z+10, r25	; 0x0a
 606:	81 87       	std	Z+9, r24	; 0x09
 608:	6e 2d       	mov	r22, r14
 60a:	7f 2d       	mov	r23, r15
 60c:	80 2f       	mov	r24, r16
 60e:	91 2f       	mov	r25, r17
TimerOn();
 610:	31 de       	rcall	.-926    	; 0x274 <TimerSet>
 612:	41 de       	rcall	.-894    	; 0x296 <TimerOn>

SPI_SlaveInit();
 614:	a0 de       	rcall	.-704    	; 0x356 <SPI_SlaveInit>
 616:	5e 01       	movw	r10, r28
 618:	8d e0       	ldi	r24, 0x0D	; 13
 61a:	a8 0e       	add	r10, r24
 61c:	b1 1c       	adc	r11, r1
 61e:	de 01       	movw	r26, r28
 620:	11 96       	adiw	r26, 0x01	; 1
 622:	7d 01       	movw	r14, r26
 624:	f7 01       	movw	r30, r14
unsigned short i; // Scheduler for-loop iterator
while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
        // Task is ready to tick
        if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 626:	01 91       	ld	r16, Z+
 628:	11 91       	ld	r17, Z+
 62a:	7f 01       	movw	r14, r30
 62c:	d8 01       	movw	r26, r16
 62e:	15 96       	adiw	r26, 0x05	; 5
 630:	4d 91       	ld	r20, X+
 632:	5d 91       	ld	r21, X+
 634:	6d 91       	ld	r22, X+
 636:	7c 91       	ld	r23, X
 638:	18 97       	sbiw	r26, 0x08	; 8
 63a:	11 96       	adiw	r26, 0x01	; 1
 63c:	8d 91       	ld	r24, X+
 63e:	9d 91       	ld	r25, X+
 640:	0d 90       	ld	r0, X+
 642:	bc 91       	ld	r27, X
 644:	a0 2d       	mov	r26, r0
 646:	48 17       	cp	r20, r24
 648:	59 07       	cpc	r21, r25
 64a:	6a 07       	cpc	r22, r26
 64c:	7b 07       	cpc	r23, r27
 64e:	81 f4       	brne	.+32     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 650:	f8 01       	movw	r30, r16
            // Setting next state for task
            tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 652:	80 81       	ld	r24, Z
 654:	01 84       	ldd	r0, Z+9	; 0x09
 656:	f2 85       	ldd	r31, Z+10	; 0x0a
 658:	e0 2d       	mov	r30, r0
 65a:	08 2e       	mov	r0, r24
 65c:	00 0c       	add	r0, r0
 65e:	99 0b       	sbc	r25, r25
 660:	09 95       	icall
 662:	d8 01       	movw	r26, r16
 664:	8c 93       	st	X, r24
 666:	f8 01       	movw	r30, r16
            // Reset the elapsed time for next tick.
            tasks[i]->elapsedTime = 0;
 668:	15 82       	std	Z+5, r1	; 0x05
 66a:	16 82       	std	Z+6, r1	; 0x06
 66c:	17 82       	std	Z+7, r1	; 0x07
 66e:	10 86       	std	Z+8, r1	; 0x08
 670:	f8 01       	movw	r30, r16
        }
        tasks[i]->elapsedTime += 1;
 672:	85 81       	ldd	r24, Z+5	; 0x05
 674:	96 81       	ldd	r25, Z+6	; 0x06
 676:	a7 81       	ldd	r26, Z+7	; 0x07
 678:	b0 85       	ldd	r27, Z+8	; 0x08
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	a1 1d       	adc	r26, r1
 67e:	b1 1d       	adc	r27, r1
 680:	85 83       	std	Z+5, r24	; 0x05
 682:	96 83       	std	Z+6, r25	; 0x06
 684:	a7 83       	std	Z+7, r26	; 0x07
 686:	b0 87       	std	Z+8, r27	; 0x08
 688:	ea 14       	cp	r14, r10


unsigned short i; // Scheduler for-loop iterator
while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
 68a:	fb 04       	cpc	r15, r11
 68c:	59 f6       	brne	.-106    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 68e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <TimerFlag>
            // Reset the elapsed time for next tick.
            tasks[i]->elapsedTime = 0;
        }
        tasks[i]->elapsedTime += 1;
    }
	while(!TimerFlag);
 692:	88 23       	and	r24, r24
 694:	e1 f3       	breq	.-8      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 696:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <TimerFlag>
	TimerFlag = 0;
 69a:	c1 cf       	rjmp	.-126    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>

0000069c <__udivmodsi4>:
}
 69c:	a1 e2       	ldi	r26, 0x21	; 33
 69e:	1a 2e       	mov	r1, r26
 6a0:	aa 1b       	sub	r26, r26
 6a2:	bb 1b       	sub	r27, r27
 6a4:	fd 01       	movw	r30, r26
 6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <__udivmodsi4_ep>

000006a8 <__udivmodsi4_loop>:
 6a8:	aa 1f       	adc	r26, r26
 6aa:	bb 1f       	adc	r27, r27
 6ac:	ee 1f       	adc	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	a2 17       	cp	r26, r18
 6b2:	b3 07       	cpc	r27, r19
 6b4:	e4 07       	cpc	r30, r20
 6b6:	f5 07       	cpc	r31, r21
 6b8:	20 f0       	brcs	.+8      	; 0x6c2 <__udivmodsi4_ep>
 6ba:	a2 1b       	sub	r26, r18
 6bc:	b3 0b       	sbc	r27, r19
 6be:	e4 0b       	sbc	r30, r20
 6c0:	f5 0b       	sbc	r31, r21

000006c2 <__udivmodsi4_ep>:
 6c2:	66 1f       	adc	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	1a 94       	dec	r1
 6cc:	69 f7       	brne	.-38     	; 0x6a8 <__udivmodsi4_loop>
 6ce:	60 95       	com	r22
 6d0:	70 95       	com	r23
 6d2:	80 95       	com	r24
 6d4:	90 95       	com	r25
 6d6:	9b 01       	movw	r18, r22
 6d8:	ac 01       	movw	r20, r24
 6da:	bd 01       	movw	r22, r26
 6dc:	cf 01       	movw	r24, r30
 6de:	08 95       	ret

000006e0 <_exit>:
 6e0:	f8 94       	cli

000006e2 <__stop_program>:
 6e2:	ff cf       	rjmp	.-2      	; 0x6e2 <__stop_program>
