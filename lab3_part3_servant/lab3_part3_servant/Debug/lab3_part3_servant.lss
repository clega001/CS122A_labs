
lab3_part3_servant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000067c  00000710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800114  00800114  00000724  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9c  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2f  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000823  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000734  00000000  00000000  00002a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d2  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003492  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d9 c1       	rjmp	.+946    	; 0x3e8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 36       	cpi	r26, 0x65	; 101
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e5 d1       	rcall	.+970    	; 0x48e <main>
  c4:	d9 c2       	rjmp	.+1458   	; 0x678 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TickFct_Speed>:
        if(c==0){return b;}
        a = b;
b = c;
    }
    return 0;
}
  c8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <s_state>
  cc:	88 23       	and	r24, r24
  ce:	19 f0       	breq	.+6      	; 0xd6 <TickFct_Speed+0xe>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	39 f0       	breq	.+14     	; 0xe2 <TickFct_Speed+0x1a>
  d4:	04 c0       	rjmp	.+8      	; 0xde <TickFct_Speed+0x16>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <s_state>
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <TickFct_Speed+0x1a>
  de:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <s_state>
  e2:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <s_state>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret

000000ea <TickFct_P1>:
  ea:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <p1_state>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	51 f0       	breq	.+20     	; 0x106 <TickFct_P1+0x1c>
  f2:	28 f0       	brcs	.+10     	; 0xfe <TickFct_P1+0x14>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	79 f0       	breq	.+30     	; 0x116 <TickFct_P1+0x2c>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <TickFct_P1+0x5c>
  fc:	3c c0       	rjmp	.+120    	; 0x176 <TickFct_P1+0x8c>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <p1_state>
 104:	3a c0       	rjmp	.+116    	; 0x17a <TickFct_P1+0x90>
 106:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 10a:	80 3a       	cpi	r24, 0xA0	; 160
 10c:	b1 f5       	brne	.+108    	; 0x17a <TickFct_P1+0x90>
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <p1_state>
 114:	36 c0       	rjmp	.+108    	; 0x182 <TickFct_P1+0x98>
 116:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 11a:	80 3a       	cpi	r24, 0xA0	; 160
 11c:	81 f4       	brne	.+32     	; 0x13e <TickFct_P1+0x54>
 11e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cnt>
 122:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 126:	89 17       	cp	r24, r25
 128:	20 f4       	brcc	.+8      	; 0x132 <TickFct_P1+0x48>
 12a:	86 5f       	subi	r24, 0xF6	; 246
 12c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <cnt>
 130:	28 c0       	rjmp	.+80     	; 0x182 <TickFct_P1+0x98>
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <p1_state>
 138:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <cnt>
 13c:	25 c0       	rjmp	.+74     	; 0x188 <TickFct_P1+0x9e>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <p1_state>
 144:	1a c0       	rjmp	.+52     	; 0x17a <TickFct_P1+0x90>
 146:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 14a:	80 3a       	cpi	r24, 0xA0	; 160
 14c:	81 f4       	brne	.+32     	; 0x16e <TickFct_P1+0x84>
 14e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cnt>
 152:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 156:	89 17       	cp	r24, r25
 158:	20 f4       	brcc	.+8      	; 0x162 <TickFct_P1+0x78>
 15a:	86 5f       	subi	r24, 0xF6	; 246
 15c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <cnt>
 160:	13 c0       	rjmp	.+38     	; 0x188 <TickFct_P1+0x9e>
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <p1_state>
 168:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <cnt>
 16c:	0a c0       	rjmp	.+20     	; 0x182 <TickFct_P1+0x98>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <p1_state>
 174:	02 c0       	rjmp	.+4      	; 0x17a <TickFct_P1+0x90>
 176:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <p1_state>
 17a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <p1_state>
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret
 182:	80 ef       	ldi	r24, 0xF0	; 240
 184:	88 b9       	out	0x08, r24	; 8
 186:	f9 cf       	rjmp	.-14     	; 0x17a <TickFct_P1+0x90>
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	88 b9       	out	0x08, r24	; 8
 18c:	f6 cf       	rjmp	.-20     	; 0x17a <TickFct_P1+0x90>

0000018e <TickFct_P2>:
 18e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p2_state>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	51 f0       	breq	.+20     	; 0x1aa <TickFct_P2+0x1c>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <TickFct_P2+0x14>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	79 f0       	breq	.+30     	; 0x1ba <TickFct_P2+0x2c>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	29 f1       	breq	.+74     	; 0x1ea <TickFct_P2+0x5c>
 1a0:	3c c0       	rjmp	.+120    	; 0x21a <TickFct_P2+0x8c>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <p2_state>
 1a8:	3a c0       	rjmp	.+116    	; 0x21e <TickFct_P2+0x90>
 1aa:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 1ae:	80 3b       	cpi	r24, 0xB0	; 176
 1b0:	b1 f5       	brne	.+108    	; 0x21e <TickFct_P2+0x90>
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <p2_state>
 1b8:	36 c0       	rjmp	.+108    	; 0x226 <TickFct_P2+0x98>
 1ba:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 1be:	80 3b       	cpi	r24, 0xB0	; 176
 1c0:	81 f4       	brne	.+32     	; 0x1e2 <TickFct_P2+0x54>
 1c2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cnt>
 1c6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 1ca:	89 17       	cp	r24, r25
 1cc:	20 f4       	brcc	.+8      	; 0x1d6 <TickFct_P2+0x48>
 1ce:	86 5f       	subi	r24, 0xF6	; 246
 1d0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <cnt>
 1d4:	28 c0       	rjmp	.+80     	; 0x226 <TickFct_P2+0x98>
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <p2_state>
 1dc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <cnt>
 1e0:	25 c0       	rjmp	.+74     	; 0x22c <TickFct_P2+0x9e>
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <p2_state>
 1e8:	1a c0       	rjmp	.+52     	; 0x21e <TickFct_P2+0x90>
 1ea:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 1ee:	80 3b       	cpi	r24, 0xB0	; 176
 1f0:	81 f4       	brne	.+32     	; 0x212 <TickFct_P2+0x84>
 1f2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cnt>
 1f6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 1fa:	89 17       	cp	r24, r25
 1fc:	20 f4       	brcc	.+8      	; 0x206 <TickFct_P2+0x78>
 1fe:	86 5f       	subi	r24, 0xF6	; 246
 200:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <cnt>
 204:	13 c0       	rjmp	.+38     	; 0x22c <TickFct_P2+0x9e>
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <p2_state>
 20c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <cnt>
 210:	0a c0       	rjmp	.+20     	; 0x226 <TickFct_P2+0x98>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <p2_state>
 218:	02 c0       	rjmp	.+4      	; 0x21e <TickFct_P2+0x90>
 21a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <p2_state>
 21e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p2_state>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret
 226:	8a ea       	ldi	r24, 0xAA	; 170
 228:	88 b9       	out	0x08, r24	; 8
 22a:	f9 cf       	rjmp	.-14     	; 0x21e <TickFct_P2+0x90>
 22c:	85 e5       	ldi	r24, 0x55	; 85
 22e:	88 b9       	out	0x08, r24	; 8
 230:	f6 cf       	rjmp	.-20     	; 0x21e <TickFct_P2+0x90>

00000232 <TickFct_P3>:
 232:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p3_state>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	41 f0       	breq	.+16     	; 0x24a <TickFct_P3+0x18>
 23a:	18 f0       	brcs	.+6      	; 0x242 <TickFct_P3+0x10>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	69 f0       	breq	.+26     	; 0x25a <TickFct_P3+0x28>
 240:	14 c0       	rjmp	.+40     	; 0x26a <TickFct_P3+0x38>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p3_state>
 248:	27 c0       	rjmp	.+78     	; 0x298 <TickFct_P3+0x66>
 24a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 24e:	80 3c       	cpi	r24, 0xC0	; 192
 250:	19 f5       	brne	.+70     	; 0x298 <TickFct_P3+0x66>
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p3_state>
 258:	23 c0       	rjmp	.+70     	; 0x2a0 <TickFct_P3+0x6e>
 25a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 25e:	80 3c       	cpi	r24, 0xC0	; 192
 260:	f9 f0       	breq	.+62     	; 0x2a0 <TickFct_P3+0x6e>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <p3_state>
 268:	17 c0       	rjmp	.+46     	; 0x298 <TickFct_P3+0x66>
 26a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <p3_state>
 26e:	14 c0       	rjmp	.+40     	; 0x298 <TickFct_P3+0x66>
 270:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <shifty>
 274:	88 b9       	out	0x08, r24	; 8
 276:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <cnt>
 27a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <shifty>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	21 f4       	brne	.+8      	; 0x28a <TickFct_P3+0x58>
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shifty>
 288:	07 c0       	rjmp	.+14     	; 0x298 <TickFct_P3+0x66>
 28a:	86 95       	lsr	r24
 28c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shifty>
 290:	03 c0       	rjmp	.+6      	; 0x298 <TickFct_P3+0x66>
 292:	86 5f       	subi	r24, 0xF6	; 246
 294:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <cnt>
 298:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p3_state>
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	08 95       	ret
 2a0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cnt>
 2a4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 2a8:	89 17       	cp	r24, r25
 2aa:	10 f7       	brcc	.-60     	; 0x270 <TickFct_P3+0x3e>
 2ac:	f2 cf       	rjmp	.-28     	; 0x292 <TickFct_P3+0x60>

000002ae <TickFct_P4>:
 2ae:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <p4_state>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	51 f0       	breq	.+20     	; 0x2ca <TickFct_P4+0x1c>
 2b6:	28 f0       	brcs	.+10     	; 0x2c2 <TickFct_P4+0x14>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	81 f0       	breq	.+32     	; 0x2dc <TickFct_P4+0x2e>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	e9 f0       	breq	.+58     	; 0x2fa <TickFct_P4+0x4c>
 2c0:	2c c0       	rjmp	.+88     	; 0x31a <TickFct_P4+0x6c>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <p4_state>
 2c8:	48 c0       	rjmp	.+144    	; 0x35a <TickFct_P4+0xac>
 2ca:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 2ce:	80 3d       	cpi	r24, 0xD0	; 208
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <TickFct_P4+0x26>
 2d2:	43 c0       	rjmp	.+134    	; 0x35a <TickFct_P4+0xac>
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <p4_state>
 2da:	43 c0       	rjmp	.+134    	; 0x362 <TickFct_P4+0xb4>
 2dc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 2e0:	80 3d       	cpi	r24, 0xD0	; 208
 2e2:	39 f4       	brne	.+14     	; 0x2f2 <TickFct_P4+0x44>
 2e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bouncey>
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	d9 f5       	brne	.+118    	; 0x362 <TickFct_P4+0xb4>
 2ec:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <p4_state>
 2f0:	3f c0       	rjmp	.+126    	; 0x370 <TickFct_P4+0xc2>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <p4_state>
 2f8:	30 c0       	rjmp	.+96     	; 0x35a <TickFct_P4+0xac>
 2fa:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pattern>
 2fe:	80 3d       	cpi	r24, 0xD0	; 208
 300:	41 f4       	brne	.+16     	; 0x312 <TickFct_P4+0x64>
 302:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bouncey>
 306:	80 3c       	cpi	r24, 0xC0	; 192
 308:	99 f5       	brne	.+102    	; 0x370 <TickFct_P4+0xc2>
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <p4_state>
 310:	28 c0       	rjmp	.+80     	; 0x362 <TickFct_P4+0xb4>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <p4_state>
 318:	20 c0       	rjmp	.+64     	; 0x35a <TickFct_P4+0xac>
 31a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <p4_state>
 31e:	1d c0       	rjmp	.+58     	; 0x35a <TickFct_P4+0xac>
 320:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bouncey>
 324:	88 b9       	out	0x08, r24	; 8
 326:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <cnt>
 32a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bouncey>
 32e:	86 95       	lsr	r24
 330:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bouncey>
 334:	12 c0       	rjmp	.+36     	; 0x35a <TickFct_P4+0xac>
 336:	86 5f       	subi	r24, 0xF6	; 246
 338:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <cnt>
 33c:	0e c0       	rjmp	.+28     	; 0x35a <TickFct_P4+0xac>
 33e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bouncey>
 342:	88 b9       	out	0x08, r24	; 8
 344:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <cnt>
 348:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bouncey>
 34c:	88 0f       	add	r24, r24
 34e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bouncey>
 352:	03 c0       	rjmp	.+6      	; 0x35a <TickFct_P4+0xac>
 354:	86 5f       	subi	r24, 0xF6	; 246
 356:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <cnt>
 35a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <p4_state>
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	08 95       	ret
 362:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cnt>
 366:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 36a:	89 17       	cp	r24, r25
 36c:	c8 f6       	brcc	.-78     	; 0x320 <TickFct_P4+0x72>
 36e:	e3 cf       	rjmp	.-58     	; 0x336 <TickFct_P4+0x88>
 370:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cnt>
 374:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 378:	89 17       	cp	r24, r25
 37a:	60 f3       	brcs	.-40     	; 0x354 <TickFct_P4+0xa6>
 37c:	e0 cf       	rjmp	.-64     	; 0x33e <TickFct_P4+0x90>

0000037e <TimerSet>:
 37e:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <_avr_timer_M>
 382:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <_avr_timer_M+0x1>
 386:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_M+0x2>
 38a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_M+0x3>
 38e:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <_avr_timer_cntcurr>
 392:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <_avr_timer_cntcurr+0x1>
 396:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <_avr_timer_cntcurr+0x2>
 39a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <_avr_timer_cntcurr+0x3>
 39e:	08 95       	ret

000003a0 <TimerOn>:
 3a0:	8b e0       	ldi	r24, 0x0B	; 11
 3a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3a6:	8d e7       	ldi	r24, 0x7D	; 125
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 3b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_avr_timer_M>
 3c4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_avr_timer_M+0x1>
 3c8:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <_avr_timer_M+0x2>
 3cc:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <_avr_timer_M+0x3>
 3d0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_avr_timer_cntcurr>
 3d4:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_avr_timer_cntcurr+0x1>
 3d8:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <_avr_timer_cntcurr+0x2>
 3dc:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <_avr_timer_cntcurr+0x3>
 3e0:	8f b7       	in	r24, 0x3f	; 63
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	8f bf       	out	0x3f, r24	; 63
 3e6:	08 95       	ret

000003e8 <__vector_13>:
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_avr_timer_cntcurr>
 3fe:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_avr_timer_cntcurr+0x1>
 402:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <_avr_timer_cntcurr+0x2>
 406:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <_avr_timer_cntcurr+0x3>
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	a1 09       	sbc	r26, r1
 40e:	b1 09       	sbc	r27, r1
 410:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_avr_timer_cntcurr>
 414:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_avr_timer_cntcurr+0x1>
 418:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <_avr_timer_cntcurr+0x2>
 41c:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <_avr_timer_cntcurr+0x3>
 420:	89 2b       	or	r24, r25
 422:	8a 2b       	or	r24, r26
 424:	8b 2b       	or	r24, r27
 426:	99 f4       	brne	.+38     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <TimerFlag>
 42e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_avr_timer_M>
 432:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_avr_timer_M+0x1>
 436:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <_avr_timer_M+0x2>
 43a:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <_avr_timer_M+0x3>
 43e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_avr_timer_cntcurr>
 442:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_avr_timer_cntcurr+0x1>
 446:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <_avr_timer_cntcurr+0x2>
 44a:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <_avr_timer_cntcurr+0x3>
 44e:	bf 91       	pop	r27
 450:	af 91       	pop	r26
 452:	9f 91       	pop	r25
 454:	8f 91       	pop	r24
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <SPI_SlaveInit>:
	/* Set MISO output, all others input */

	/*DDR_SPI = (1<<DD_MISO);*/
	//PORTB = (1<<PORTB4)|(1<<PORTB6);
	//PORTB = (1<<PORTB6);
	DDRB = (1<<DDRB4)|(1<<DDRB6);
 460:	80 e5       	ldi	r24, 0x50	; 80
 462:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI */
	SPCR = (1<<SPE);
 464:	80 e4       	ldi	r24, 0x40	; 64
 466:	8c bd       	out	0x2c, r24	; 44
 468:	08 95       	ret

0000046a <SPI_SlaveReceive>:
}

char SPI_SlaveReceive(void){
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 46a:	0d b4       	in	r0, 0x2d	; 45
 46c:	07 fe       	sbrs	r0, 7
 46e:	fd cf       	rjmp	.-6      	; 0x46a <SPI_SlaveReceive>
	;
	/* Return Data Register */
	return SPDR;
 470:	8e b5       	in	r24, 0x2e	; 46
}
 472:	08 95       	ret

00000474 <TickFct_Receive>:
	}
	switch(r_state){
		case r_start:
			break;
		case Wait:
			x = SPI_SlaveReceive();	
 474:	fa df       	rcall	.-12     	; 0x46a <SPI_SlaveReceive>
 476:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <x>
			
			pattern = x & 0xF0;
 47a:	98 2f       	mov	r25, r24
 47c:	90 7f       	andi	r25, 0xF0	; 240
 47e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <pattern>
			speed = x & 0x0F;
 482:	8f 70       	andi	r24, 0x0F	; 15
 484:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <speed>
			
		default:
			break;
	}
	return r_state;
}
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	08 95       	ret

0000048e <main>:
}
// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	2c 97       	sbiw	r28, 0x0c	; 12
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
// Set Data Direction Registers
DDRB = 0x00; PORTB = 0x00;
 4a2:	14 b8       	out	0x04, r1	; 4
 4a4:	15 b8       	out	0x05, r1	; 5
DDRC = 0xFF; PORTC = 0x00;
 4a6:	2f ef       	ldi	r18, 0xFF	; 255
 4a8:	27 b9       	out	0x07, r18	; 7
 4aa:	18 b8       	out	0x08, r1	; 8
unsigned long int SMTick6_period = SMTick6_calc/GCD;


//Declare an array of tasks 
static task task1, task2, task3, task4, task5, task6;
task *tasks[] = {&task1, &task2, &task3, &task4, &task5, &task6};
 4ac:	8c e0       	ldi	r24, 0x0C	; 12
 4ae:	e7 e0       	ldi	r30, 0x07	; 7
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	de 01       	movw	r26, r28
 4b4:	11 96       	adiw	r26, 0x01	; 1
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <main+0x28>
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

//Task 1
task1.state = -1;//Task initial state.
 4be:	eb e4       	ldi	r30, 0x4B	; 75
 4c0:	f1 e0       	ldi	r31, 0x01	; 1
 4c2:	20 83       	st	Z, r18
task1.period = SMTick1_period;//Task Period.
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	a0 e0       	ldi	r26, 0x00	; 0
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	81 83       	std	Z+1, r24	; 0x01
 4ce:	92 83       	std	Z+2, r25	; 0x02
 4d0:	a3 83       	std	Z+3, r26	; 0x03
 4d2:	b4 83       	std	Z+4, r27	; 0x04
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 4d4:	85 83       	std	Z+5, r24	; 0x05
 4d6:	96 83       	std	Z+6, r25	; 0x06
 4d8:	a7 83       	std	Z+7, r26	; 0x07
 4da:	b0 87       	std	Z+8, r27	; 0x08
task1.TickFct = &TickFct_Receive;//Function pointer for the tick.
 4dc:	4a e3       	ldi	r20, 0x3A	; 58
 4de:	52 e0       	ldi	r21, 0x02	; 2
 4e0:	52 87       	std	Z+10, r21	; 0x0a
 4e2:	41 87       	std	Z+9, r20	; 0x09

//Task 2
task2.state = -1;
 4e4:	e0 e4       	ldi	r30, 0x40	; 64
 4e6:	f1 e0       	ldi	r31, 0x01	; 1
 4e8:	20 83       	st	Z, r18
task2.period = SMTick2_period;
 4ea:	81 83       	std	Z+1, r24	; 0x01
 4ec:	92 83       	std	Z+2, r25	; 0x02
 4ee:	a3 83       	std	Z+3, r26	; 0x03
 4f0:	b4 83       	std	Z+4, r27	; 0x04
task2.elapsedTime = SMTick2_period;
 4f2:	85 83       	std	Z+5, r24	; 0x05
 4f4:	96 83       	std	Z+6, r25	; 0x06
 4f6:	a7 83       	std	Z+7, r26	; 0x07
 4f8:	b0 87       	std	Z+8, r27	; 0x08
task2.TickFct = &TickFct_P1;
 4fa:	45 e7       	ldi	r20, 0x75	; 117
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	52 87       	std	Z+10, r21	; 0x0a
 500:	41 87       	std	Z+9, r20	; 0x09

//Task 3
task3.state = -1;
 502:	e5 e3       	ldi	r30, 0x35	; 53
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	20 83       	st	Z, r18
task3.period = SMTick3_period;
 508:	81 83       	std	Z+1, r24	; 0x01
 50a:	92 83       	std	Z+2, r25	; 0x02
 50c:	a3 83       	std	Z+3, r26	; 0x03
 50e:	b4 83       	std	Z+4, r27	; 0x04
task3.elapsedTime = SMTick3_period;
 510:	85 83       	std	Z+5, r24	; 0x05
 512:	96 83       	std	Z+6, r25	; 0x06
 514:	a7 83       	std	Z+7, r26	; 0x07
 516:	b0 87       	std	Z+8, r27	; 0x08
task3.TickFct = &TickFct_P2;
 518:	47 ec       	ldi	r20, 0xC7	; 199
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	52 87       	std	Z+10, r21	; 0x0a
 51e:	41 87       	std	Z+9, r20	; 0x09

//Task 4
task4.state = -1;
 520:	ea e2       	ldi	r30, 0x2A	; 42
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	20 83       	st	Z, r18
task4.period = SMTick4_period;
 526:	81 83       	std	Z+1, r24	; 0x01
 528:	92 83       	std	Z+2, r25	; 0x02
 52a:	a3 83       	std	Z+3, r26	; 0x03
 52c:	b4 83       	std	Z+4, r27	; 0x04
task4.elapsedTime = SMTick4_period;
 52e:	85 83       	std	Z+5, r24	; 0x05
 530:	96 83       	std	Z+6, r25	; 0x06
 532:	a7 83       	std	Z+7, r26	; 0x07
 534:	b0 87       	std	Z+8, r27	; 0x08
task4.TickFct = &TickFct_P3;
 536:	49 e1       	ldi	r20, 0x19	; 25
 538:	51 e0       	ldi	r21, 0x01	; 1
 53a:	52 87       	std	Z+10, r21	; 0x0a
 53c:	41 87       	std	Z+9, r20	; 0x09

//Task 5
task5.state = -1;
 53e:	ef e1       	ldi	r30, 0x1F	; 31
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	20 83       	st	Z, r18
task5.period = SMTick5_period;
 544:	81 83       	std	Z+1, r24	; 0x01
 546:	92 83       	std	Z+2, r25	; 0x02
 548:	a3 83       	std	Z+3, r26	; 0x03
 54a:	b4 83       	std	Z+4, r27	; 0x04
task5.elapsedTime = SMTick5_period;
 54c:	85 83       	std	Z+5, r24	; 0x05
 54e:	96 83       	std	Z+6, r25	; 0x06
 550:	a7 83       	std	Z+7, r26	; 0x07
 552:	b0 87       	std	Z+8, r27	; 0x08
task5.TickFct = &TickFct_P4;
 554:	47 e5       	ldi	r20, 0x57	; 87
 556:	51 e0       	ldi	r21, 0x01	; 1
 558:	52 87       	std	Z+10, r21	; 0x0a
 55a:	41 87       	std	Z+9, r20	; 0x09

//Task 6
task6.state = -1;
 55c:	e4 e1       	ldi	r30, 0x14	; 20
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	20 83       	st	Z, r18
task6.period = SMTick6_period;
 562:	81 83       	std	Z+1, r24	; 0x01
 564:	92 83       	std	Z+2, r25	; 0x02
 566:	a3 83       	std	Z+3, r26	; 0x03
 568:	b4 83       	std	Z+4, r27	; 0x04
task6.elapsedTime = SMTick6_period;
 56a:	85 83       	std	Z+5, r24	; 0x05
 56c:	96 83       	std	Z+6, r25	; 0x06
 56e:	a7 83       	std	Z+7, r26	; 0x07
 570:	b0 87       	std	Z+8, r27	; 0x08
task6.TickFct = &TickFct_Speed;
 572:	84 e6       	ldi	r24, 0x64	; 100
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	92 87       	std	Z+10, r25	; 0x0a
 578:	81 87       	std	Z+9, r24	; 0x09

// Set the timer and turn it on
TimerSet(GCD);
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	fd de       	rcall	.-518    	; 0x37e <TimerSet>
TimerOn();
 584:	0d df       	rcall	.-486    	; 0x3a0 <TimerOn>

SPI_SlaveInit();
 586:	6c df       	rcall	.-296    	; 0x460 <SPI_SlaveInit>
 588:	6e 01       	movw	r12, r28
 58a:	8d e0       	ldi	r24, 0x0D	; 13
 58c:	c8 0e       	add	r12, r24
 58e:	d1 1c       	adc	r13, r1
 590:	66 24       	eor	r6, r6
		}
		else if(speed == 0x05){
			n = 20;
		}
		else if(speed == 0x06){
			n = 1;
 592:	63 94       	inc	r6
 594:	0f 2e       	mov	r0, r31
		}
		else if(speed == 0x04){
			n = 50;
		}
		else if(speed == 0x05){
			n = 20;
 596:	f4 e1       	ldi	r31, 0x14	; 20
 598:	7f 2e       	mov	r7, r31
 59a:	f0 2d       	mov	r31, r0
 59c:	0f 2e       	mov	r0, r31
		}
		else if(speed == 0x03){
			n = 100;
		}
		else if(speed == 0x04){
			n = 50;
 59e:	f2 e3       	ldi	r31, 0x32	; 50
 5a0:	8f 2e       	mov	r8, r31
 5a2:	f0 2d       	mov	r31, r0
 5a4:	0f 2e       	mov	r0, r31
		}
		else if(speed == 0x02){
			n = 1000;
		}
		else if(speed == 0x03){
			n = 100;
 5a6:	f4 e6       	ldi	r31, 0x64	; 100
 5a8:	9f 2e       	mov	r9, r31
 5aa:	f0 2d       	mov	r31, r0
 5ac:	0f 2e       	mov	r0, r31
		
		if(speed == 0x01){
			n = 20000;
		}
		else if(speed == 0x02){
			n = 1000;
 5ae:	f8 ee       	ldi	r31, 0xE8	; 232
 5b0:	af 2e       	mov	r10, r31
 5b2:	f0 2d       	mov	r31, r0
 5b4:	68 94       	set
        }
        tasks[i]->elapsedTime += 1;
		
		
		if(speed == 0x01){
			n = 20000;
 5b6:	bb 24       	eor	r11, r11
 5b8:	b5 f8       	bld	r11, 5
 5ba:	de 01       	movw	r26, r28
 5bc:	11 96       	adiw	r26, 0x01	; 1
 5be:	7d 01       	movw	r14, r26
 5c0:	f7 01       	movw	r30, r14
unsigned short i; // Scheduler for-loop iterator
while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
        // Task is ready to tick
        if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 5c2:	01 91       	ld	r16, Z+
 5c4:	11 91       	ld	r17, Z+
 5c6:	7f 01       	movw	r14, r30
 5c8:	d8 01       	movw	r26, r16
 5ca:	15 96       	adiw	r26, 0x05	; 5
 5cc:	4d 91       	ld	r20, X+
 5ce:	5d 91       	ld	r21, X+
 5d0:	6d 91       	ld	r22, X+
 5d2:	7c 91       	ld	r23, X
 5d4:	18 97       	sbiw	r26, 0x08	; 8
 5d6:	11 96       	adiw	r26, 0x01	; 1
 5d8:	8d 91       	ld	r24, X+
 5da:	9d 91       	ld	r25, X+
 5dc:	0d 90       	ld	r0, X+
 5de:	bc 91       	ld	r27, X
 5e0:	a0 2d       	mov	r26, r0
 5e2:	48 17       	cp	r20, r24
 5e4:	59 07       	cpc	r21, r25
 5e6:	6a 07       	cpc	r22, r26
 5e8:	7b 07       	cpc	r23, r27
 5ea:	81 f4       	brne	.+32     	; 0x60c <main+0x17e>
 5ec:	f8 01       	movw	r30, r16
            // Setting next state for task
            tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 5ee:	80 81       	ld	r24, Z
 5f0:	01 84       	ldd	r0, Z+9	; 0x09
 5f2:	f2 85       	ldd	r31, Z+10	; 0x0a
 5f4:	e0 2d       	mov	r30, r0
 5f6:	08 2e       	mov	r0, r24
 5f8:	00 0c       	add	r0, r0
 5fa:	99 0b       	sbc	r25, r25
 5fc:	09 95       	icall
 5fe:	d8 01       	movw	r26, r16
 600:	8c 93       	st	X, r24
 602:	f8 01       	movw	r30, r16
            // Reset the elapsed time for next tick.
            tasks[i]->elapsedTime = 0;
 604:	15 82       	std	Z+5, r1	; 0x05
 606:	16 82       	std	Z+6, r1	; 0x06
 608:	17 82       	std	Z+7, r1	; 0x07
 60a:	10 86       	std	Z+8, r1	; 0x08
 60c:	f8 01       	movw	r30, r16
        }
        tasks[i]->elapsedTime += 1;
 60e:	85 81       	ldd	r24, Z+5	; 0x05
 610:	96 81       	ldd	r25, Z+6	; 0x06
 612:	a7 81       	ldd	r26, Z+7	; 0x07
 614:	b0 85       	ldd	r27, Z+8	; 0x08
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	a1 1d       	adc	r26, r1
 61a:	b1 1d       	adc	r27, r1
 61c:	85 83       	std	Z+5, r24	; 0x05
 61e:	96 83       	std	Z+6, r25	; 0x06
 620:	a7 83       	std	Z+7, r26	; 0x07
 622:	b0 87       	std	Z+8, r27	; 0x08
 624:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <speed>
		
		
		if(speed == 0x01){
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	19 f4       	brne	.+6      	; 0x632 <main+0x1a4>
 62c:	b0 92 00 01 	sts	0x0100, r11	; 0x800100 <__data_start>
			n = 20000;
 630:	18 c0       	rjmp	.+48     	; 0x662 <main+0x1d4>
 632:	82 30       	cpi	r24, 0x02	; 2
		}
		else if(speed == 0x02){
 634:	19 f4       	brne	.+6      	; 0x63c <main+0x1ae>
 636:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
			n = 1000;
 63a:	13 c0       	rjmp	.+38     	; 0x662 <main+0x1d4>
 63c:	83 30       	cpi	r24, 0x03	; 3
		}
		else if(speed == 0x03){
 63e:	19 f4       	brne	.+6      	; 0x646 <main+0x1b8>
 640:	90 92 00 01 	sts	0x0100, r9	; 0x800100 <__data_start>
			n = 100;
 644:	0e c0       	rjmp	.+28     	; 0x662 <main+0x1d4>
 646:	84 30       	cpi	r24, 0x04	; 4
		}
		else if(speed == 0x04){
 648:	19 f4       	brne	.+6      	; 0x650 <main+0x1c2>
 64a:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__data_start>
			n = 50;
 64e:	09 c0       	rjmp	.+18     	; 0x662 <main+0x1d4>
 650:	85 30       	cpi	r24, 0x05	; 5
		}
		else if(speed == 0x05){
 652:	19 f4       	brne	.+6      	; 0x65a <main+0x1cc>
 654:	70 92 00 01 	sts	0x0100, r7	; 0x800100 <__data_start>
			n = 20;
 658:	04 c0       	rjmp	.+8      	; 0x662 <main+0x1d4>
 65a:	86 30       	cpi	r24, 0x06	; 6
		}
		else if(speed == 0x06){
 65c:	11 f4       	brne	.+4      	; 0x662 <main+0x1d4>
 65e:	60 92 00 01 	sts	0x0100, r6	; 0x800100 <__data_start>
			n = 1;
 662:	ce 14       	cp	r12, r14


unsigned short i; // Scheduler for-loop iterator
while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
 664:	df 04       	cpc	r13, r15
 666:	09 f0       	breq	.+2      	; 0x66a <main+0x1dc>
 668:	ab cf       	rjmp	.-170    	; 0x5c0 <main+0x132>
 66a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <TimerFlag>
		}
		else{
		}
	}
	
	while(!TimerFlag);
 66e:	88 23       	and	r24, r24
 670:	e1 f3       	breq	.-8      	; 0x66a <main+0x1dc>
 672:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <TimerFlag>
	TimerFlag = 0;
 676:	a1 cf       	rjmp	.-190    	; 0x5ba <main+0x12c>

00000678 <_exit>:
}
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
