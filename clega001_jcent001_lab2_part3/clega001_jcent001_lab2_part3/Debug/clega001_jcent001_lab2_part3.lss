
clega001_jcent001_lab2_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004b8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  00000550  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d97  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006af  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000596  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d6  00000000  00000000  00002b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c1       	rjmp	.+558    	; 0x264 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9c d1       	rcall	.+824    	; 0x3fc <main>
  c4:	f7 c1       	rjmp	.+1006   	; 0x4b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Flush>:
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <USART_Flush+0xe>
 110:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 114:	88 23       	and	r24, r24
 116:	74 f0       	brlt	.+28     	; 0x134 <USART_Flush+0x28>
 118:	08 95       	ret
 11a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 11e:	88 23       	and	r24, r24
 120:	8c f4       	brge	.+34     	; 0x144 <USART_Flush+0x38>
 122:	a6 ec       	ldi	r26, 0xC6	; 198
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	e4 f3       	brlt	.-8      	; 0x12a <USART_Flush+0x1e>
 132:	08 95       	ret
 134:	ae ec       	ldi	r26, 0xCE	; 206
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e8 ec       	ldi	r30, 0xC8	; 200
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8c 91       	ld	r24, X
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	e4 f3       	brlt	.-8      	; 0x13c <USART_Flush+0x30>
 144:	08 95       	ret

00000146 <USART_Send>:
 146:	61 30       	cpi	r22, 0x01	; 1
 148:	41 f0       	breq	.+16     	; 0x15a <USART_Send+0x14>
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	90 81       	ld	r25, Z
 150:	95 ff       	sbrs	r25, 5
 152:	fd cf       	rjmp	.-6      	; 0x14e <USART_Send+0x8>
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 158:	08 95       	ret
 15a:	e8 ec       	ldi	r30, 0xC8	; 200
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	95 ff       	sbrs	r25, 5
 162:	fd cf       	rjmp	.-6      	; 0x15e <USART_Send+0x18>
 164:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 168:	08 95       	ret

0000016a <USART_Receive>:
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	41 f0       	breq	.+16     	; 0x17e <USART_Receive+0x14>
 16e:	e0 ec       	ldi	r30, 0xC0	; 192
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	ec f7       	brge	.-6      	; 0x172 <USART_Receive+0x8>
 178:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 17c:	08 95       	ret
 17e:	e8 ec       	ldi	r30, 0xC8	; 200
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	ec f7       	brge	.-6      	; 0x182 <USART_Receive+0x18>
 188:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 18c:	08 95       	ret

0000018e <Follower>:
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
 194:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 198:	88 23       	and	r24, r24
 19a:	44 f4       	brge	.+16     	; 0x1ac <Follower+0x1e>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	e5 df       	rcall	.-54     	; 0x16a <USART_Receive>
 1a0:	82 b9       	out	0x02, r24	; 2
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	b3 df       	rcall	.-154    	; 0x10c <USART_Flush>
 1a6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count>
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <Follower+0x28>
 1ac:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <count>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <count>
 1b6:	ce 01       	movw	r24, r28
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <TimerOn>:
 1be:	8b e0       	ldi	r24, 0x0B	; 11
 1c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1c4:	8d e7       	ldi	r24, 0x7D	; 125
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1f2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1f6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1fa:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 1fe:	8f b7       	in	r24, 0x3f	; 63
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8f bf       	out	0x3f, r24	; 63
 204:	08 95       	ret

00000206 <TimerISR>:

const unsigned char tasksSize = 1;
task tasks[1];

void TimerISR()
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
	unsigned char i;
	for (i = 0;i < tasksSize;++i)
	{
		if ((tasks[i].elapsedTime >= tasks[i].period))
 20a:	e8 e0       	ldi	r30, 0x08	; 8
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	46 81       	ldd	r20, Z+6	; 0x06
 210:	57 81       	ldd	r21, Z+7	; 0x07
 212:	60 85       	ldd	r22, Z+8	; 0x08
 214:	71 85       	ldd	r23, Z+9	; 0x09
 216:	82 81       	ldd	r24, Z+2	; 0x02
 218:	93 81       	ldd	r25, Z+3	; 0x03
 21a:	a4 81       	ldd	r26, Z+4	; 0x04
 21c:	b5 81       	ldd	r27, Z+5	; 0x05
 21e:	48 17       	cp	r20, r24
 220:	59 07       	cpc	r21, r25
 222:	6a 07       	cpc	r22, r26
 224:	7b 07       	cpc	r23, r27
 226:	68 f0       	brcs	.+26     	; 0x242 <TimerISR+0x3c>
		{
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 228:	ef 01       	movw	r28, r30
 22a:	02 84       	ldd	r0, Z+10	; 0x0a
 22c:	f3 85       	ldd	r31, Z+11	; 0x0b
 22e:	e0 2d       	mov	r30, r0
 230:	88 81       	ld	r24, Y
 232:	99 81       	ldd	r25, Y+1	; 0x01
 234:	09 95       	icall
 236:	99 83       	std	Y+1, r25	; 0x01
 238:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 23a:	1e 82       	std	Y+6, r1	; 0x06
 23c:	1f 82       	std	Y+7, r1	; 0x07
 23e:	18 86       	std	Y+8, r1	; 0x08
 240:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += PERIOD;
 242:	e8 e0       	ldi	r30, 0x08	; 8
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	86 81       	ldd	r24, Z+6	; 0x06
 248:	97 81       	ldd	r25, Z+7	; 0x07
 24a:	a0 85       	ldd	r26, Z+8	; 0x08
 24c:	b1 85       	ldd	r27, Z+9	; 0x09
 24e:	8c 59       	subi	r24, 0x9C	; 156
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	af 4f       	sbci	r26, 0xFF	; 255
 254:	bf 4f       	sbci	r27, 0xFF	; 255
 256:	86 83       	std	Z+6, r24	; 0x06
 258:	97 83       	std	Z+7, r25	; 0x07
 25a:	a0 87       	std	Z+8, r26	; 0x08
 25c:	b1 87       	std	Z+9, r27	; 0x09
	}
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <__vector_13>:
ISR(TIMER1_COMPA_vect) {
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	0b b6       	in	r0, 0x3b	; 59
 270:	0f 92       	push	r0
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 28a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 28e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 292:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 296:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	a1 09       	sbc	r26, r1
 29e:	b1 09       	sbc	r27, r1
 2a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2a4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2a8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 2ac:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 2b0:	89 2b       	or	r24, r25
 2b2:	8a 2b       	or	r24, r26
 2b4:	8b 2b       	or	r24, r27
 2b6:	89 f4       	brne	.+34     	; 0x2da <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 2b8:	a6 df       	rcall	.-180    	; 0x206 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 2ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2c2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2c6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2ce:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2d2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 2d6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0b be       	out	0x3b, r0	; 59
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <TimerSet>:
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 300:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 304:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 308:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 30c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 310:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 314:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 318:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 31c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 320:	08 95       	ret

00000322 <Master>:
	/*		}*/
	return state;
}

enum master {Start, BSS_Low, BSS_High};
int Master(int state){
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	switch(state){
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	91 05       	cpc	r25, r1
 32a:	79 f1       	breq	.+94     	; 0x38a <Master+0x68>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	91 05       	cpc	r25, r1
 330:	19 f0       	breq	.+6      	; 0x338 <Master+0x16>
 332:	89 2b       	or	r24, r25
 334:	09 f0       	breq	.+2      	; 0x338 <Master+0x16>
 336:	52 c0       	rjmp	.+164    	; 0x3dc <Master+0xba>
		state = Start;
		break;
	}
	switch(state){
		case BSS_Low:
		PORTA = 0x00;
 338:	12 b8       	out	0x02, r1	; 2
		count = 0;
 33a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 33e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		
		if(USART_HasReceived(0)){
 342:	88 23       	and	r24, r24
 344:	0c f0       	brlt	.+2      	; 0x348 <Master+0x26>
 346:	4e c0       	rjmp	.+156    	; 0x3e4 <Master+0xc2>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 348:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		PORTA = 0x00;
		count = 0;
		
		if(USART_HasReceived(0)){
			TimerOff();
			Master_Servant = 0x00;
 34c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Master_Servant>
			tasks[0].state = Start;
 350:	e8 e0       	ldi	r30, 0x08	; 8
 352:	f1 e0       	ldi	r31, 0x01	; 1
 354:	11 82       	std	Z+1, r1	; 0x01
 356:	10 82       	st	Z, r1
			tasks[0].period = 100;
 358:	84 e6       	ldi	r24, 0x64	; 100
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	a0 e0       	ldi	r26, 0x00	; 0
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	82 83       	std	Z+2, r24	; 0x02
 362:	93 83       	std	Z+3, r25	; 0x03
 364:	a4 83       	std	Z+4, r26	; 0x04
 366:	b5 83       	std	Z+5, r27	; 0x05
			tasks[0].elapsedTime = 0;
 368:	16 82       	std	Z+6, r1	; 0x06
 36a:	17 82       	std	Z+7, r1	; 0x07
 36c:	10 86       	std	Z+8, r1	; 0x08
 36e:	11 86       	std	Z+9, r1	; 0x09
			tasks[0].TickFct = &Follower;
 370:	87 ec       	ldi	r24, 0xC7	; 199
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	93 87       	std	Z+11, r25	; 0x0b
 376:	82 87       	std	Z+10, r24	; 0x0a
			TimerSet(PERIOD);
 378:	64 e6       	ldi	r22, 0x64	; 100
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	bf df       	rcall	.-130    	; 0x300 <TimerSet>
			TimerOn();
 382:	1d df       	rcall	.-454    	; 0x1be <TimerOn>
 384:	c1 e0       	ldi	r28, 0x01	; 1

enum master {Start, BSS_Low, BSS_High};
int Master(int state){
	switch(state){
		case Start:
		state = BSS_Low;
 386:	d0 e0       	ldi	r29, 0x00	; 0
 388:	32 c0       	rjmp	.+100    	; 0x3ee <Master+0xcc>
 38a:	81 e0       	ldi	r24, 0x01	; 1
			TimerOn();
		}
		
		break;
		case BSS_High:
		PORTA = 0x01;
 38c:	82 b9       	out	0x02, r24	; 2
 38e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count>
		count = 0;
 392:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 396:	88 23       	and	r24, r24
		
		if(USART_HasReceived(0)){
 398:	44 f5       	brge	.+80     	; 0x3ea <Master+0xc8>
 39a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 39e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Master_Servant>
		PORTA = 0x01;
		count = 0;
		
		if(USART_HasReceived(0)){
			TimerOff();
			Master_Servant = 0x00;
 3a2:	e8 e0       	ldi	r30, 0x08	; 8
			tasks[0].state = Start;
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	11 82       	std	Z+1, r1	; 0x01
 3a8:	10 82       	st	Z, r1
 3aa:	84 e6       	ldi	r24, 0x64	; 100
			tasks[0].period = 100;
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	a0 e0       	ldi	r26, 0x00	; 0
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	82 83       	std	Z+2, r24	; 0x02
 3b4:	93 83       	std	Z+3, r25	; 0x03
 3b6:	a4 83       	std	Z+4, r26	; 0x04
 3b8:	b5 83       	std	Z+5, r27	; 0x05
 3ba:	16 82       	std	Z+6, r1	; 0x06
			tasks[0].elapsedTime = 0;
 3bc:	17 82       	std	Z+7, r1	; 0x07
 3be:	10 86       	std	Z+8, r1	; 0x08
 3c0:	11 86       	std	Z+9, r1	; 0x09
 3c2:	87 ec       	ldi	r24, 0xC7	; 199
			tasks[0].TickFct = &Follower;
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	93 87       	std	Z+11, r25	; 0x0b
 3c8:	82 87       	std	Z+10, r24	; 0x0a
 3ca:	64 e6       	ldi	r22, 0x64	; 100
			TimerSet(PERIOD);
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	96 df       	rcall	.-212    	; 0x300 <TimerSet>
			TimerOn();
 3d4:	f4 de       	rcall	.-536    	; 0x1be <TimerOn>
 3d6:	c2 e0       	ldi	r28, 0x02	; 2
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	09 c0       	rjmp	.+18     	; 0x3ee <Master+0xcc>
 3dc:	12 b8       	out	0x02, r1	; 2
		}
		
		
		break;
		default:
		PORTA = 0x00;
 3de:	c0 e0       	ldi	r28, 0x00	; 0
		break;
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <Master+0xcc>
 3e4:	c1 e0       	ldi	r28, 0x01	; 1

enum master {Start, BSS_Low, BSS_High};
int Master(int state){
	switch(state){
		case Start:
		state = BSS_Low;
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <Master+0xcc>
 3ea:	c2 e0       	ldi	r28, 0x02	; 2
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
		break;
		default:
		PORTA = 0x00;
		break;
	}
	USART_Send(PORTA, 1);
 3ee:	82 b1       	in	r24, 0x02	; 2
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	a9 de       	rcall	.-686    	; 0x146 <USART_Send>
 3f4:	ce 01       	movw	r24, r28
	return state;
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <main>:
 3fc:	8f ef       	ldi	r24, 0xFF	; 255

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 3fe:	81 b9       	out	0x01, r24	; 1
 400:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0xFF;
 402:	14 b8       	out	0x04, r1	; 4
 404:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 406:	87 b9       	out	0x07, r24	; 7
 408:	18 b8       	out	0x08, r1	; 8

	Master_Servant = 0x00;
 40a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Master_Servant>
	initUSART(0);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	5b de       	rcall	.-842    	; 0xc8 <initUSART>
	initUSART(1);
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	59 de       	rcall	.-846    	; 0xc8 <initUSART>

	tasks[0].state = Start;
 416:	e8 e0       	ldi	r30, 0x08	; 8
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	11 82       	std	Z+1, r1	; 0x01
 41c:	10 82       	st	Z, r1
	tasks[0].period = 100;
 41e:	84 e6       	ldi	r24, 0x64	; 100
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	a0 e0       	ldi	r26, 0x00	; 0
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	82 83       	std	Z+2, r24	; 0x02
 428:	93 83       	std	Z+3, r25	; 0x03
 42a:	a4 83       	std	Z+4, r26	; 0x04
 42c:	b5 83       	std	Z+5, r27	; 0x05
	tasks[0].elapsedTime = 0;
 42e:	16 82       	std	Z+6, r1	; 0x06
 430:	17 82       	std	Z+7, r1	; 0x07
 432:	10 86       	std	Z+8, r1	; 0x08
 434:	11 86       	std	Z+9, r1	; 0x09
	tasks[0].TickFct = &Follower;
 436:	87 ec       	ldi	r24, 0xC7	; 199
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	93 87       	std	Z+11, r25	; 0x0b
 43c:	82 87       	std	Z+10, r24	; 0x0a
	
	TimerSet(PERIOD);
 43e:	64 e6       	ldi	r22, 0x64	; 100
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 446:	5c df       	rcall	.-328    	; 0x300 <TimerSet>
 448:	ba de       	rcall	.-652    	; 0x1be <TimerOn>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 44a:	0f 2e       	mov	r0, r31
 44c:	f1 e8       	ldi	r31, 0x81	; 129
 44e:	ef 2e       	mov	r14, r31
 450:	f1 2c       	mov	r15, r1
 452:	f0 2d       	mov	r31, r0
	{
		PORTC = Master_Servant;
		if(count > 30 && !Master_Servant)
		{
			TimerOff();
			Master_Servant = 0x01;
 454:	dd 24       	eor	r13, r13
 456:	d3 94       	inc	r13
			tasks[0].state = Start;
 458:	c8 e0       	ldi	r28, 0x08	; 8
 45a:	d1 e0       	ldi	r29, 0x01	; 1
			tasks[0].period = 1000;
 45c:	0f 2e       	mov	r0, r31
 45e:	f8 ee       	ldi	r31, 0xE8	; 232
 460:	8f 2e       	mov	r8, r31
 462:	f3 e0       	ldi	r31, 0x03	; 3
 464:	9f 2e       	mov	r9, r31
 466:	a1 2c       	mov	r10, r1
 468:	b1 2c       	mov	r11, r1
 46a:	f0 2d       	mov	r31, r0
			tasks[0].elapsedTime = 0;
			tasks[0].TickFct = &Master;
 46c:	01 e9       	ldi	r16, 0x91	; 145
 46e:	11 e0       	ldi	r17, 0x01	; 1
	
	TimerSet(PERIOD);
	TimerOn();
	while (1)
	{
		PORTC = Master_Servant;
 470:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Master_Servant>
 474:	88 b9       	out	0x08, r24	; 8
		if(count > 30 && !Master_Servant)
 476:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <count>
 47a:	8f 31       	cpi	r24, 0x1F	; 31
 47c:	c8 f3       	brcs	.-14     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 47e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Master_Servant>
 482:	81 11       	cpse	r24, r1
 484:	f5 cf       	rjmp	.-22     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 486:	f7 01       	movw	r30, r14
 488:	10 82       	st	Z, r1
	{
		PORTC = Master_Servant;
		if(count > 30 && !Master_Servant)
		{
			TimerOff();
			Master_Servant = 0x01;
 48a:	d0 92 14 01 	sts	0x0114, r13	; 0x800114 <Master_Servant>
			tasks[0].state = Start;
 48e:	19 82       	std	Y+1, r1	; 0x01
 490:	18 82       	st	Y, r1
			tasks[0].period = 1000;
 492:	8a 82       	std	Y+2, r8	; 0x02
 494:	9b 82       	std	Y+3, r9	; 0x03
 496:	ac 82       	std	Y+4, r10	; 0x04
 498:	bd 82       	std	Y+5, r11	; 0x05
			tasks[0].elapsedTime = 0;
 49a:	1e 82       	std	Y+6, r1	; 0x06
 49c:	1f 82       	std	Y+7, r1	; 0x07
 49e:	18 86       	std	Y+8, r1	; 0x08
 4a0:	19 86       	std	Y+9, r1	; 0x09
			tasks[0].TickFct = &Master;
 4a2:	1b 87       	std	Y+11, r17	; 0x0b
 4a4:	0a 87       	std	Y+10, r16	; 0x0a
			TimerSet(PERIOD);
 4a6:	64 e6       	ldi	r22, 0x64	; 100
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 4ae:	28 df       	rcall	.-432    	; 0x300 <TimerSet>
 4b0:	86 de       	rcall	.-756    	; 0x1be <TimerOn>
 4b2:	de cf       	rjmp	.-68     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>
