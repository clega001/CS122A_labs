
clega001_jcent001_lab5_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000428  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800106  00800106  000004c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6e  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e9  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e3  00000000  00000000  00001bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000568  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003dc  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	06 01       	movw	r0, r12
  8e:	0a 01       	movw	r0, r20
  90:	22 01       	movw	r4, r4
  92:	36 01       	movw	r6, r12
  94:	3a 01       	movw	r6, r20
  96:	4e 01       	movw	r8, r28
  98:	52 01       	movw	r10, r4
  9a:	5c 01       	movw	r10, r24

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e8 e2       	ldi	r30, 0x28	; 40
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a6 e0       	ldi	r26, 0x06	; 6
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a7 31       	cpi	r26, 0x17	; 23
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	08 d1       	rcall	.+528    	; 0x2e4 <main>
  d4:	a7 c1       	rjmp	.+846    	; 0x424 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <TimerSet>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  d8:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
  dc:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
  e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
  e4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
  e8:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
  ec:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
  f0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
  f4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
  f8:	08 95       	ret

000000fa <TimerOn>:
  fa:	8b e0       	ldi	r24, 0x0B	; 11
  fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 100:	8d e7       	ldi	r24, 0x7D	; 125
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 108:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 112:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 11a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 11e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 122:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 126:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 12a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 12e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 132:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 136:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 13a:	8f b7       	in	r24, 0x3f	; 63
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8f bf       	out	0x3f, r24	; 63
 140:	08 95       	ret

00000142 <__vector_13>:
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 158:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 15c:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 160:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	a1 09       	sbc	r26, r1
 168:	b1 09       	sbc	r27, r1
 16a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 16e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 172:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 176:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 17a:	89 2b       	or	r24, r25
 17c:	8a 2b       	or	r24, r26
 17e:	8b 2b       	or	r24, r27
 180:	99 f4       	brne	.+38     	; 0x1a8 <__vector_13+0x66>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
 188:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 18c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 190:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 194:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 198:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 19c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 1a0:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 1a4:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <transmit_data>:
//--------End find GCD function ----------------------------------------------

void transmit_data(unsigned char data){
	for(unsigned int i = 0; i < 8; i++){
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	70 e0       	ldi	r23, 0x00	; 0
		PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
 1c2:	47 9a       	sbi	0x08, 7	; 8
		PORTC = SetBit(PORTC, 6, 0); //Set SRCLK to low
 1c4:	46 98       	cbi	0x08, 6	; 8
		PORTC = SetBit(PORTC, 4, GetBit(data,i)); //Set SER to send bit
 1c6:	98 b1       	in	r25, 0x08	; 8
 1c8:	ab 01       	movw	r20, r22
 1ca:	02 2e       	mov	r0, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <transmit_data+0x18>
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <transmit_data+0x14>
 1d6:	48 23       	and	r20, r24
 1d8:	11 f0       	breq	.+4      	; 0x1de <transmit_data+0x24>
 1da:	90 61       	ori	r25, 0x10	; 16
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <transmit_data+0x26>
 1de:	9f 7e       	andi	r25, 0xEF	; 239
 1e0:	98 b9       	out	0x08, r25	; 8
		PORTC = SetBit(PORTC, 6, 1); //Set SRCLK to high
 1e2:	46 9a       	sbi	0x08, 6	; 8
	return 0;
}
//--------End find GCD function ----------------------------------------------

void transmit_data(unsigned char data){
	for(unsigned int i = 0; i < 8; i++){
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	28 30       	cpi	r18, 0x08	; 8
 1ea:	31 05       	cpc	r19, r1
 1ec:	51 f7       	brne	.-44     	; 0x1c2 <transmit_data+0x8>
		PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
		PORTC = SetBit(PORTC, 6, 0); //Set SRCLK to low
		PORTC = SetBit(PORTC, 4, GetBit(data,i)); //Set SER to send bit
		PORTC = SetBit(PORTC, 6, 1); //Set SRCLK to high
	}
	PORTC = SetBit(PORTC, 5, 1);
 1ee:	45 9a       	sbi	0x08, 5	; 8
	PORTC = SetBit(PORTC, 7, 0); //Set SRCLR to low
 1f0:	47 98       	cbi	0x08, 7	; 8
 1f2:	08 95       	ret

000001f4 <d_Tick>:
//--------End Shared/Global Variables------------------------------------------------
//--------User defined FSMs---------------------------------------------------
enum DisplayState {init, wait, inc_p, inc_r, dec_p, dec_r, reset_p, reset_r} d_state;
int d_Tick(){
	//Transitions
	switch(d_state){
 1f4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <d_state>
 1f8:	8e 2f       	mov	r24, r30
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	88 30       	cpi	r24, 0x08	; 8
 1fe:	91 05       	cpc	r25, r1
 200:	08 f0       	brcs	.+2      	; 0x204 <d_Tick+0x10>
 202:	5e c0       	rjmp	.+188    	; 0x2c0 <d_Tick+0xcc>
 204:	fc 01       	movw	r30, r24
 206:	ea 5b       	subi	r30, 0xBA	; 186
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	03 c1       	rjmp	.+518    	; 0x412 <__tablejump2__>
		case init:
			d_state = wait;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
			break;
 212:	64 c0       	rjmp	.+200    	; 0x2dc <d_Tick+0xe8>
		case wait:
			if(b1 && !b2){
 214:	18 99       	sbic	0x03, 0	; 3
 216:	06 c0       	rjmp	.+12     	; 0x224 <d_Tick+0x30>
 218:	19 9b       	sbis	0x03, 1	; 3
 21a:	04 c0       	rjmp	.+8      	; 0x224 <d_Tick+0x30>
				d_state = inc_p;
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
				break;
 222:	58 c0       	rjmp	.+176    	; 0x2d4 <d_Tick+0xe0>
			}
			else if(!b1 && b2){
 224:	18 9b       	sbis	0x03, 0	; 3
 226:	06 c0       	rjmp	.+12     	; 0x234 <d_Tick+0x40>
 228:	19 99       	sbic	0x03, 1	; 3
 22a:	04 c0       	rjmp	.+8      	; 0x234 <d_Tick+0x40>
				d_state = dec_p;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
				break;
 232:	50 c0       	rjmp	.+160    	; 0x2d4 <d_Tick+0xe0>
			}
			else if(b1 && b2){
 234:	18 99       	sbic	0x03, 0	; 3
 236:	52 c0       	rjmp	.+164    	; 0x2dc <d_Tick+0xe8>
 238:	19 99       	sbic	0x03, 1	; 3
 23a:	50 c0       	rjmp	.+160    	; 0x2dc <d_Tick+0xe8>
				d_state = reset_p;
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
				break;
 242:	48 c0       	rjmp	.+144    	; 0x2d4 <d_Tick+0xe0>
			else{
				d_state = wait;
				break;
			}
		case inc_p:
			if(b1 && !b2){
 244:	18 99       	sbic	0x03, 0	; 3
 246:	02 c0       	rjmp	.+4      	; 0x24c <d_Tick+0x58>
 248:	19 99       	sbic	0x03, 1	; 3
 24a:	44 c0       	rjmp	.+136    	; 0x2d4 <d_Tick+0xe0>
				d_state = inc_p;
				break;
			}
			else if(b1 && b2){
 24c:	18 99       	sbic	0x03, 0	; 3
 24e:	06 c0       	rjmp	.+12     	; 0x25c <d_Tick+0x68>
 250:	19 99       	sbic	0x03, 1	; 3
 252:	04 c0       	rjmp	.+8      	; 0x25c <d_Tick+0x68>
				d_state = reset_p;
 254:	86 e0       	ldi	r24, 0x06	; 6
 256:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
				break;
 25a:	3c c0       	rjmp	.+120    	; 0x2d4 <d_Tick+0xe0>
			}
			else{
				d_state = inc_r;
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
			transmit_data(tmp);
			break;
		case inc_p:
			break;
		case inc_r:
			if(tmp != 255){tmp++;}
 262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 266:	8f 3f       	cpi	r24, 0xFF	; 255
 268:	71 f5       	brne	.+92     	; 0x2c6 <d_Tick+0xd2>
 26a:	34 c0       	rjmp	.+104    	; 0x2d4 <d_Tick+0xe0>
			else{
				d_state = inc_r;
				break;
			}
		case inc_r:
			d_state = wait;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
			break;
 272:	34 c0       	rjmp	.+104    	; 0x2dc <d_Tick+0xe8>
		case dec_p:
			if(!b1 && b2){
 274:	18 9b       	sbis	0x03, 0	; 3
 276:	02 c0       	rjmp	.+4      	; 0x27c <d_Tick+0x88>
 278:	19 9b       	sbis	0x03, 1	; 3
 27a:	2c c0       	rjmp	.+88     	; 0x2d4 <d_Tick+0xe0>
				d_state = dec_p;
				break;
			}
			else if(b1 && b2){
 27c:	18 99       	sbic	0x03, 0	; 3
 27e:	06 c0       	rjmp	.+12     	; 0x28c <d_Tick+0x98>
 280:	19 99       	sbic	0x03, 1	; 3
 282:	04 c0       	rjmp	.+8      	; 0x28c <d_Tick+0x98>
				d_state = reset_p;
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
				break;
 28a:	24 c0       	rjmp	.+72     	; 0x2d4 <d_Tick+0xe0>
			}
			else{
				d_state = dec_r;
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
			if(tmp != 255){tmp++;}
			break;
		case dec_p:
			break;
		case dec_r:
			if(tmp != 0){tmp--;}
 292:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 296:	81 11       	cpse	r24, r1
 298:	1a c0       	rjmp	.+52     	; 0x2ce <d_Tick+0xda>
 29a:	1c c0       	rjmp	.+56     	; 0x2d4 <d_Tick+0xe0>
			else{
				d_state = dec_r;
				break;
			}
		case dec_r:
			d_state = wait;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
			break;
 2a2:	1c c0       	rjmp	.+56     	; 0x2dc <d_Tick+0xe8>
		case reset_p:
			if(b1 && b2){
 2a4:	18 99       	sbic	0x03, 0	; 3
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <d_Tick+0xb8>
 2a8:	19 9b       	sbis	0x03, 1	; 3
 2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <d_Tick+0xe0>
				d_state = reset_p;
				break;
			}
			else{
				d_state = reset_r;
 2ac:	87 e0       	ldi	r24, 0x07	; 7
 2ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
			if(tmp != 0){tmp--;}
			break;
		case reset_p:
			break;
		case reset_r:
			tmp = 0;
 2b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			break;
 2b6:	0e c0       	rjmp	.+28     	; 0x2d4 <d_Tick+0xe0>
			else{
				d_state = reset_r;
				break;
			}
		case reset_r:
			d_state = wait;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <d_state>
			break;
 2be:	0e c0       	rjmp	.+28     	; 0x2dc <d_Tick+0xe8>
		default:
			d_state = init;
 2c0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <d_state>
			break;
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <d_Tick+0xe0>
			transmit_data(tmp);
			break;
		case inc_p:
			break;
		case inc_r:
			if(tmp != 255){tmp++;}
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <d_Tick+0xe0>
			break;
		case dec_p:
			break;
		case dec_r:
			if(tmp != 0){tmp--;}
 2ce:	81 50       	subi	r24, 0x01	; 1
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
		default:
			break;
		
	}
	return d_state;
 2d4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <d_state>
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret
	//Actions
	switch(d_state){
		case init:
			break;
		case wait:
			transmit_data(tmp);
 2dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2e0:	6c df       	rcall	.-296    	; 0x1ba <transmit_data>
			break;
 2e2:	f8 cf       	rjmp	.-16     	; 0x2d4 <d_Tick+0xe0>

000002e4 <main>:
// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
	DDRB = 0x00; PORTB = 0xFF;
 2e4:	14 b8       	out	0x04, r1	; 4
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 2ea:	87 b9       	out	0x07, r24	; 7
 2ec:	18 b8       	out	0x08, r1	; 8
 2ee:	04 e6       	ldi	r16, 0x64	; 100
 2f0:	10 e0       	ldi	r17, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
 2f6:	51 e0       	ldi	r21, 0x01	; 1
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <main+0x24>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 300:	06 2f       	mov	r16, r22
 302:	17 2f       	mov	r17, r23
 304:	d8 2f       	mov	r29, r24
 306:	c9 2f       	mov	r28, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 308:	65 2f       	mov	r22, r21
 30a:	74 2f       	mov	r23, r20
 30c:	83 2f       	mov	r24, r19
 30e:	92 2f       	mov	r25, r18
 310:	20 2f       	mov	r18, r16
 312:	31 2f       	mov	r19, r17
 314:	4d 2f       	mov	r20, r29
 316:	5c 2f       	mov	r21, r28
 318:	5a d0       	rcall	.+180    	; 0x3ce <__udivmodsi4>
 31a:	50 2f       	mov	r21, r16
 31c:	41 2f       	mov	r20, r17
 31e:	3d 2f       	mov	r19, r29
 320:	2c 2f       	mov	r18, r28
		if(c==0){return b;}
 322:	61 15       	cp	r22, r1
 324:	71 05       	cpc	r23, r1
 326:	81 05       	cpc	r24, r1
 328:	91 05       	cpc	r25, r1
 32a:	51 f7       	brne	.-44     	; 0x300 <main+0x1c>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 32c:	64 e6       	ldi	r22, 0x64	; 100
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	20 2f       	mov	r18, r16
 336:	31 2f       	mov	r19, r17
 338:	4d 2f       	mov	r20, r29
 33a:	5c 2f       	mov	r21, r28
 33c:	48 d0       	rcall	.+144    	; 0x3ce <__udivmodsi4>
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 33e:	e6 e0       	ldi	r30, 0x06	; 6
 340:	f1 e0       	ldi	r31, 0x01	; 1
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	80 83       	st	Z, r24
	task1.period = SMTick1_period;//Task Period.
 346:	21 83       	std	Z+1, r18	; 0x01
 348:	32 83       	std	Z+2, r19	; 0x02
 34a:	43 83       	std	Z+3, r20	; 0x03
 34c:	54 83       	std	Z+4, r21	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 34e:	25 83       	std	Z+5, r18	; 0x05
 350:	36 83       	std	Z+6, r19	; 0x06
 352:	47 83       	std	Z+7, r20	; 0x07
 354:	50 87       	std	Z+8, r21	; 0x08
	task1.TickFct = &d_Tick;//Function pointer for the tick.
 356:	8a ef       	ldi	r24, 0xFA	; 250
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	92 87       	std	Z+10, r25	; 0x0a
 35c:	81 87       	std	Z+9, r24	; 0x09

	// Set the timer and turn it on
	TimerSet(GCD);
 35e:	60 2f       	mov	r22, r16
 360:	71 2f       	mov	r23, r17
 362:	8d 2f       	mov	r24, r29
 364:	9c 2f       	mov	r25, r28
	TimerOn();
 366:	b8 de       	rcall	.-656    	; 0xd8 <TimerSet>

	PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
 368:	c8 de       	rcall	.-624    	; 0xfa <TimerOn>
	PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
 36a:	47 9a       	sbi	0x08, 7	; 8

	unsigned char a = 0xAA;
	transmit_data(a);
 36c:	45 98       	cbi	0x08, 5	; 8
 36e:	8a ea       	ldi	r24, 0xAA	; 170
 370:	24 df       	rcall	.-440    	; 0x1ba <transmit_data>

	unsigned short i;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 372:	c6 e0       	ldi	r28, 0x06	; 6
 374:	d1 e0       	ldi	r29, 0x01	; 1
 376:	4d 81       	ldd	r20, Y+5	; 0x05
 378:	5e 81       	ldd	r21, Y+6	; 0x06
 37a:	6f 81       	ldd	r22, Y+7	; 0x07
 37c:	78 85       	ldd	r23, Y+8	; 0x08
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	ab 81       	ldd	r26, Y+3	; 0x03
 384:	bc 81       	ldd	r27, Y+4	; 0x04
 386:	48 17       	cp	r20, r24
 388:	59 07       	cpc	r21, r25
 38a:	6a 07       	cpc	r22, r26
 38c:	7b 07       	cpc	r23, r27
 38e:	61 f4       	brne	.+24     	; 0x3a8 <main+0xc4>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 390:	88 81       	ld	r24, Y
 392:	e9 85       	ldd	r30, Y+9	; 0x09
 394:	fa 85       	ldd	r31, Y+10	; 0x0a
 396:	08 2e       	mov	r0, r24
 398:	00 0c       	add	r0, r0
 39a:	99 0b       	sbc	r25, r25
 39c:	09 95       	icall
 39e:	88 83       	st	Y, r24
				tasks[i]->elapsedTime = 0;
 3a0:	1d 82       	std	Y+5, r1	; 0x05
 3a2:	1e 82       	std	Y+6, r1	; 0x06
 3a4:	1f 82       	std	Y+7, r1	; 0x07
 3a6:	18 86       	std	Y+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 3a8:	8d 81       	ldd	r24, Y+5	; 0x05
 3aa:	9e 81       	ldd	r25, Y+6	; 0x06
 3ac:	af 81       	ldd	r26, Y+7	; 0x07
 3ae:	b8 85       	ldd	r27, Y+8	; 0x08
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	a1 1d       	adc	r26, r1
 3b4:	b1 1d       	adc	r27, r1
 3b6:	8d 83       	std	Y+5, r24	; 0x05
 3b8:	9e 83       	std	Y+6, r25	; 0x06
 3ba:	af 83       	std	Y+7, r26	; 0x07
 3bc:	b8 87       	std	Y+8, r27	; 0x08
			PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
 3be:	45 98       	cbi	0x08, 5	; 8
		}
		while(!TimerFlag);
 3c0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
 3c4:	88 23       	and	r24, r24
 3c6:	e1 f3       	breq	.-8      	; 0x3c0 <main+0xdc>
		TimerFlag = 0;
 3c8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
	}
 3cc:	d4 cf       	rjmp	.-88     	; 0x376 <main+0x92>

000003ce <__udivmodsi4>:
 3ce:	a1 e2       	ldi	r26, 0x21	; 33
 3d0:	1a 2e       	mov	r1, r26
 3d2:	aa 1b       	sub	r26, r26
 3d4:	bb 1b       	sub	r27, r27
 3d6:	fd 01       	movw	r30, r26
 3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <__udivmodsi4_ep>

000003da <__udivmodsi4_loop>:
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	ee 1f       	adc	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	a2 17       	cp	r26, r18
 3e4:	b3 07       	cpc	r27, r19
 3e6:	e4 07       	cpc	r30, r20
 3e8:	f5 07       	cpc	r31, r21
 3ea:	20 f0       	brcs	.+8      	; 0x3f4 <__udivmodsi4_ep>
 3ec:	a2 1b       	sub	r26, r18
 3ee:	b3 0b       	sbc	r27, r19
 3f0:	e4 0b       	sbc	r30, r20
 3f2:	f5 0b       	sbc	r31, r21

000003f4 <__udivmodsi4_ep>:
 3f4:	66 1f       	adc	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	1a 94       	dec	r1
 3fe:	69 f7       	brne	.-38     	; 0x3da <__udivmodsi4_loop>
 400:	60 95       	com	r22
 402:	70 95       	com	r23
 404:	80 95       	com	r24
 406:	90 95       	com	r25
 408:	9b 01       	movw	r18, r22
 40a:	ac 01       	movw	r20, r24
 40c:	bd 01       	movw	r22, r26
 40e:	cf 01       	movw	r24, r30
 410:	08 95       	ret

00000412 <__tablejump2__>:
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	00 24       	eor	r0, r0
 418:	00 1c       	adc	r0, r0
 41a:	0b be       	out	0x3b, r0	; 59
 41c:	07 90       	elpm	r0, Z+
 41e:	f6 91       	elpm	r31, Z
 420:	e0 2d       	mov	r30, r0
 422:	09 94       	ijmp

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
