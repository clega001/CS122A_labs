
lab3_part1_servant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c26  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e6  00000000  00000000  000010b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ba  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056d  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000403  00000000  00000000  000025e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	84 d0       	rcall	.+264    	; 0x1cc <main>
  c4:	18 c1       	rjmp	.+560    	; 0x2f6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	/* Start transmission */
	SPDR = cData;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
	;
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <_avr_timer_cntcurr>
  dc:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <_avr_timer_cntcurr+0x1>
  e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr+0x2>
  e4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 11e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 122:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 126:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 148:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 150:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 15e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 162:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 166:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 18c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 190:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 194:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <SPI_SlaveInit>:
	/* Set MISO output, all others input */

	/*DDR_SPI = (1<<DD_MISO);*/
	//PORTB = (1<<PORTB4)|(1<<PORTB6);
	//PORTB = (1<<PORTB6);
	DDRB = (1<<DDRB4)|(1<<DDRB6);
 1aa:	80 e5       	ldi	r24, 0x50	; 80
 1ac:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI */
	SPCR = (1<<SPE);
 1ae:	80 e4       	ldi	r24, 0x40	; 64
 1b0:	8c bd       	out	0x2c, r24	; 44
 1b2:	08 95       	ret

000001b4 <SPI_SlaveReceive>:
}

char SPI_SlaveReceive(void){
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 1b4:	0d b4       	in	r0, 0x2d	; 45
 1b6:	07 fe       	sbrs	r0, 7
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <SPI_SlaveReceive>
	;
	/* Return Data Register */
	return SPDR;
 1ba:	8e b5       	in	r24, 0x2e	; 46
}
 1bc:	08 95       	ret

000001be <TickFct_Keypad>:
	}
	switch(state){
		case Start:
			break;
		case Wait:
		    PORTA = 0x02;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	82 b9       	out	0x02, r24	; 2
			PORTD = SPI_SlaveReceive();
 1c2:	f8 df       	rcall	.-16     	; 0x1b4 <SPI_SlaveReceive>
 1c4:	8b b9       	out	0x0b, r24	; 11
		default:
			break;
	}
	return state;
}
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret

000001cc <main>:
// Implement scheduler code from PES.
int main()
{
// Set Data Direction Registers

DDRA = 0xFF; PORTA = 0x00;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	81 b9       	out	0x01, r24	; 1
 1d0:	12 b8       	out	0x02, r1	; 2
DDRD = 0xFF; PORTD = 0x00;
 1d2:	8a b9       	out	0x0a, r24	; 10
 1d4:	1b b8       	out	0x0b, r1	; 11
DDRB = 0x00; PORTB = 0x00;
 1d6:	14 b8       	out	0x04, r1	; 4
 1d8:	15 b8       	out	0x05, r1	; 5
 1da:	04 ef       	ldi	r16, 0xF4	; 244
 1dc:	11 e0       	ldi	r17, 0x01	; 1
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	51 e0       	ldi	r21, 0x01	; 1
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <main+0x28>
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
        a = b;
b = c;
 1ec:	06 2f       	mov	r16, r22
 1ee:	17 2f       	mov	r17, r23
 1f0:	d8 2f       	mov	r29, r24
 1f2:	c9 2f       	mov	r28, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 1f4:	65 2f       	mov	r22, r21
 1f6:	74 2f       	mov	r23, r20
 1f8:	83 2f       	mov	r24, r19
 1fa:	92 2f       	mov	r25, r18
 1fc:	20 2f       	mov	r18, r16
 1fe:	31 2f       	mov	r19, r17
 200:	4d 2f       	mov	r20, r29
 202:	5c 2f       	mov	r21, r28
 204:	56 d0       	rcall	.+172    	; 0x2b2 <__udivmodsi4>
 206:	50 2f       	mov	r21, r16
 208:	41 2f       	mov	r20, r17
 20a:	3d 2f       	mov	r19, r29
 20c:	2c 2f       	mov	r18, r28
        if(c==0){return b;}
 20e:	61 15       	cp	r22, r1
 210:	71 05       	cpc	r23, r1
 212:	81 05       	cpc	r24, r1
 214:	91 05       	cpc	r25, r1
 216:	51 f7       	brne	.-44     	; 0x1ec <main+0x20>

//Greatest common divisor for all tasks or smallest time unit for tasks.
unsigned long int GCD = tmpGCD;

//Recalculate GCD periods for scheduler
unsigned long int SMTick1_period = SMTick1_calc/GCD;
 218:	64 ef       	ldi	r22, 0xF4	; 244
 21a:	71 e0       	ldi	r23, 0x01	; 1
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	20 2f       	mov	r18, r16
 222:	31 2f       	mov	r19, r17
 224:	4d 2f       	mov	r20, r29
 226:	5c 2f       	mov	r21, r28
 228:	44 d0       	rcall	.+136    	; 0x2b2 <__udivmodsi4>
static task task1;
task *tasks[] = {&task1};
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

// Task 1
task1.state = -1;//Task initial state.
 22a:	e4 e0       	ldi	r30, 0x04	; 4
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	80 83       	st	Z, r24
task1.period = SMTick1_period;//Task Period.
 232:	21 83       	std	Z+1, r18	; 0x01
 234:	32 83       	std	Z+2, r19	; 0x02
 236:	43 83       	std	Z+3, r20	; 0x03
 238:	54 83       	std	Z+4, r21	; 0x04
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 23a:	25 83       	std	Z+5, r18	; 0x05
 23c:	36 83       	std	Z+6, r19	; 0x06
 23e:	47 83       	std	Z+7, r20	; 0x07
 240:	50 87       	std	Z+8, r21	; 0x08
task1.TickFct = &TickFct_Keypad;//Function pointer for the tick.
 242:	8f ed       	ldi	r24, 0xDF	; 223
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	92 87       	std	Z+10, r25	; 0x0a
 248:	81 87       	std	Z+9, r24	; 0x09

// Set the timer and turn it on
TimerSet(GCD);
 24a:	60 2f       	mov	r22, r16
 24c:	71 2f       	mov	r23, r17
 24e:	8d 2f       	mov	r24, r29
 250:	9c 2f       	mov	r25, r28
TimerOn();
 252:	3a df       	rcall	.-396    	; 0xc8 <TimerSet>
 254:	4a df       	rcall	.-364    	; 0xea <TimerOn>

SPI_SlaveInit();
 256:	a9 df       	rcall	.-174    	; 0x1aa <SPI_SlaveInit>
 258:	c4 e0       	ldi	r28, 0x04	; 4
unsigned short i; // Scheduler for-loop iterator
while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
        // Task is ready to tick
        if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 25a:	d1 e0       	ldi	r29, 0x01	; 1
 25c:	4d 81       	ldd	r20, Y+5	; 0x05
 25e:	5e 81       	ldd	r21, Y+6	; 0x06
 260:	6f 81       	ldd	r22, Y+7	; 0x07
 262:	78 85       	ldd	r23, Y+8	; 0x08
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	9a 81       	ldd	r25, Y+2	; 0x02
 268:	ab 81       	ldd	r26, Y+3	; 0x03
 26a:	bc 81       	ldd	r27, Y+4	; 0x04
 26c:	48 17       	cp	r20, r24
 26e:	59 07       	cpc	r21, r25
 270:	6a 07       	cpc	r22, r26
 272:	7b 07       	cpc	r23, r27
 274:	61 f4       	brne	.+24     	; 0x28e <main+0xc2>
 276:	88 81       	ld	r24, Y
            // Setting next state for task
            tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 278:	e9 85       	ldd	r30, Y+9	; 0x09
 27a:	fa 85       	ldd	r31, Y+10	; 0x0a
 27c:	08 2e       	mov	r0, r24
 27e:	00 0c       	add	r0, r0
 280:	99 0b       	sbc	r25, r25
 282:	09 95       	icall
 284:	88 83       	st	Y, r24
 286:	1d 82       	std	Y+5, r1	; 0x05
            // Reset the elapsed time for next tick.
            tasks[i]->elapsedTime = 0;
 288:	1e 82       	std	Y+6, r1	; 0x06
 28a:	1f 82       	std	Y+7, r1	; 0x07
 28c:	18 86       	std	Y+8, r1	; 0x08
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
        }
        tasks[i]->elapsedTime += 1;
 290:	9e 81       	ldd	r25, Y+6	; 0x06
 292:	af 81       	ldd	r26, Y+7	; 0x07
 294:	b8 85       	ldd	r27, Y+8	; 0x08
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	a1 1d       	adc	r26, r1
 29a:	b1 1d       	adc	r27, r1
 29c:	8d 83       	std	Y+5, r24	; 0x05
 29e:	9e 83       	std	Y+6, r25	; 0x06
 2a0:	af 83       	std	Y+7, r26	; 0x07
 2a2:	b8 87       	std	Y+8, r27	; 0x08
 2a4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <TimerFlag>
    }
	while(!TimerFlag);
 2a8:	88 23       	and	r24, r24
 2aa:	e1 f3       	breq	.-8      	; 0x2a4 <main+0xd8>
 2ac:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TimerFlag>
	TimerFlag = 0;
 2b0:	d5 cf       	rjmp	.-86     	; 0x25c <main+0x90>

000002b2 <__udivmodsi4>:
}
 2b2:	a1 e2       	ldi	r26, 0x21	; 33
 2b4:	1a 2e       	mov	r1, r26
 2b6:	aa 1b       	sub	r26, r26
 2b8:	bb 1b       	sub	r27, r27
 2ba:	fd 01       	movw	r30, r26
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <__udivmodsi4_ep>

000002be <__udivmodsi4_loop>:
 2be:	aa 1f       	adc	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	ee 1f       	adc	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	a2 17       	cp	r26, r18
 2c8:	b3 07       	cpc	r27, r19
 2ca:	e4 07       	cpc	r30, r20
 2cc:	f5 07       	cpc	r31, r21
 2ce:	20 f0       	brcs	.+8      	; 0x2d8 <__udivmodsi4_ep>
 2d0:	a2 1b       	sub	r26, r18
 2d2:	b3 0b       	sbc	r27, r19
 2d4:	e4 0b       	sbc	r30, r20
 2d6:	f5 0b       	sbc	r31, r21

000002d8 <__udivmodsi4_ep>:
 2d8:	66 1f       	adc	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	1a 94       	dec	r1
 2e2:	69 f7       	brne	.-38     	; 0x2be <__udivmodsi4_loop>
 2e4:	60 95       	com	r22
 2e6:	70 95       	com	r23
 2e8:	80 95       	com	r24
 2ea:	90 95       	com	r25
 2ec:	9b 01       	movw	r18, r22
 2ee:	ac 01       	movw	r20, r24
 2f0:	bd 01       	movw	r22, r26
 2f2:	cf 01       	movw	r24, r30
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
