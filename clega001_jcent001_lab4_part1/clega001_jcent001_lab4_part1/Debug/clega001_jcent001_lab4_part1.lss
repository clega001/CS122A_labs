
clega001_jcent001_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c54  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063e  00800110  00800110  00000cf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028c8  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017d5  00000000  00000000  0000473a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f69  00000000  00000000  000064c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  0000742d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a6 c2       	rjmp	.+1356   	; 0x582 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fd d0       	rcall	.+506    	; 0x2be <main>
  c4:	c5 c5       	rjmp	.+2954   	; 0xc50 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	14 d4       	rcall	.+2088   	; 0x8f8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
  ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 108:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	a6 d4       	rcall	.+2380   	; 0xa72 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LEDS_Tick>:
	led_state = INIT;
}

void LEDS_Tick(){
	//Actions
	switch(led_state){
 246:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	31 f0       	breq	.+12     	; 0x25a <LEDS_Tick+0x14>
 24e:	18 f0       	brcs	.+6      	; 0x256 <LEDS_Tick+0x10>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	31 f0       	breq	.+12     	; 0x260 <LEDS_Tick+0x1a>
 254:	07 c0       	rjmp	.+14     	; 0x264 <LEDS_Tick+0x1e>
		case INIT:
		PORTD = 0;
 256:	1b b8       	out	0x0b, r1	; 11
		break;
 258:	06 c0       	rjmp	.+12     	; 0x266 <LEDS_Tick+0x20>
		case L0:
		PORTD = 0x15;
 25a:	85 e1       	ldi	r24, 0x15	; 21
 25c:	8b b9       	out	0x0b, r24	; 11
		break;
 25e:	03 c0       	rjmp	.+6      	; 0x266 <LEDS_Tick+0x20>
		case L1:
		PORTD = 0x00;
 260:	1b b8       	out	0x0b, r1	; 11
		break;
 262:	01 c0       	rjmp	.+2      	; 0x266 <LEDS_Tick+0x20>
		default:
		PORTD = 0;
 264:	1b b8       	out	0x0b, r1	; 11
		break;
	}
	//Transitions
	switch(led_state){
 266:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 26a:	88 23       	and	r24, r24
 26c:	19 f0       	breq	.+6      	; 0x274 <LEDS_Tick+0x2e>
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	49 f4       	brne	.+18     	; 0x284 <LEDS_Tick+0x3e>
 272:	04 c0       	rjmp	.+8      	; 0x27c <LEDS_Tick+0x36>
		case INIT:
		led_state = L0;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
		break;
 27a:	08 95       	ret
		case L0:
		led_state = L1;
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
		break;
 282:	08 95       	ret
		case L1:
		led_state = L0;
		default:
		led_state = INIT;
 284:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
 288:	08 95       	ret

0000028a <LedSecTask>:
#include "task.h"
#include "croutine.h"
enum LEDState {INIT,L0,L1,L2,L3,L4,L5,L6,L7} led_state;

void LEDS_Init(){
	led_state = INIT;
 28a:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
}

void LedSecTask() {
	LEDS_Init();
	for(;;) {
		LEDS_Tick();
 28e:	db df       	rcall	.-74     	; 0x246 <LEDS_Tick>
		vTaskDelay(1000);
 290:	88 ee       	ldi	r24, 0xE8	; 232
 292:	93 e0       	ldi	r25, 0x03	; 3
 294:	67 d4       	rcall	.+2254   	; 0xb64 <vTaskDelay>
 296:	fb cf       	rjmp	.-10     	; 0x28e <LedSecTask+0x4>

00000298 <StartSecPulse>:
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
	xTaskCreate(LedSecTask,
 29e:	e1 2c       	mov	r14, r1
 2a0:	f1 2c       	mov	r15, r1
 2a2:	08 2f       	mov	r16, r24
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	45 e5       	ldi	r20, 0x55	; 85
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	71 e0       	ldi	r23, 0x01	; 1
 2b0:	85 e4       	ldi	r24, 0x45	; 69
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	fc d1       	rcall	.+1016   	; 0x6ae <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	08 95       	ret

000002be <main>:

int main(void) {
	DDRA = 0x00; PORTA=0xFF;
 2be:	11 b8       	out	0x01, r1	; 1
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;
 2c4:	8a b9       	out	0x0a, r24	; 10
	//Start Tasks
	StartSecPulse(1);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	e7 df       	rcall	.-50     	; 0x298 <StartSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 2ca:	ee d2       	rcall	.+1500   	; 0x8a8 <vTaskStartScheduler>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	08 95       	ret

000002d2 <pxPortInitialiseStack>:
 2d2:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2d4:	fc 01       	movw	r30, r24
 2d6:	30 83       	st	Z, r19
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	22 e2       	ldi	r18, 0x22	; 34
 2dc:	20 83       	st	Z, r18
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	a3 e3       	ldi	r26, 0x33	; 51
 2e2:	a0 83       	st	Z, r26
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	60 83       	st	Z, r22
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	70 83       	st	Z, r23
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	10 82       	st	Z, r1
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	60 e8       	ldi	r22, 0x80	; 128
 2f4:	60 83       	st	Z, r22
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	10 82       	st	Z, r1
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	60 83       	st	Z, r22
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	63 e0       	ldi	r22, 0x03	; 3
 304:	60 83       	st	Z, r22
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	60 83       	st	Z, r22
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	60 83       	st	Z, r22
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	66 e0       	ldi	r22, 0x06	; 6
 316:	60 83       	st	Z, r22
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	67 e0       	ldi	r22, 0x07	; 7
 31c:	60 83       	st	Z, r22
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	68 e0       	ldi	r22, 0x08	; 8
 322:	60 83       	st	Z, r22
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	69 e0       	ldi	r22, 0x09	; 9
 328:	60 83       	st	Z, r22
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	60 e1       	ldi	r22, 0x10	; 16
 32e:	60 83       	st	Z, r22
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	30 83       	st	Z, r19
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	32 e1       	ldi	r19, 0x12	; 18
 338:	30 83       	st	Z, r19
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	33 e1       	ldi	r19, 0x13	; 19
 33e:	30 83       	st	Z, r19
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	34 e1       	ldi	r19, 0x14	; 20
 344:	30 83       	st	Z, r19
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	35 e1       	ldi	r19, 0x15	; 21
 34a:	30 83       	st	Z, r19
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	36 e1       	ldi	r19, 0x16	; 22
 350:	30 83       	st	Z, r19
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	37 e1       	ldi	r19, 0x17	; 23
 356:	30 83       	st	Z, r19
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	38 e1       	ldi	r19, 0x18	; 24
 35c:	30 83       	st	Z, r19
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	39 e1       	ldi	r19, 0x19	; 25
 362:	30 83       	st	Z, r19
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	30 e2       	ldi	r19, 0x20	; 32
 368:	30 83       	st	Z, r19
 36a:	31 97       	sbiw	r30, 0x01	; 1
 36c:	31 e2       	ldi	r19, 0x21	; 33
 36e:	30 83       	st	Z, r19
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	20 83       	st	Z, r18
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	23 e2       	ldi	r18, 0x23	; 35
 378:	20 83       	st	Z, r18
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	40 83       	st	Z, r20
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	50 83       	st	Z, r21
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	26 e2       	ldi	r18, 0x26	; 38
 386:	20 83       	st	Z, r18
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	27 e2       	ldi	r18, 0x27	; 39
 38c:	20 83       	st	Z, r18
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	28 e2       	ldi	r18, 0x28	; 40
 392:	20 83       	st	Z, r18
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	29 e2       	ldi	r18, 0x29	; 41
 398:	20 83       	st	Z, r18
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	20 e3       	ldi	r18, 0x30	; 48
 39e:	20 83       	st	Z, r18
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	21 e3       	ldi	r18, 0x31	; 49
 3a4:	20 83       	st	Z, r18
 3a6:	86 97       	sbiw	r24, 0x26	; 38
 3a8:	08 95       	ret

000003aa <xPortStartScheduler>:
 3aa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3ae:	8c e7       	ldi	r24, 0x7C	; 124
 3b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3b4:	8b e0       	ldi	r24, 0x0B	; 11
 3b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3ba:	ef e6       	ldi	r30, 0x6F	; 111
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	82 60       	ori	r24, 0x02	; 2
 3c2:	80 83       	st	Z, r24
 3c4:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 3c8:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 3cc:	cd 91       	ld	r28, X+
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	dd 91       	ld	r29, X+
 3d2:	de bf       	out	0x3e, r29	; 62
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	df 90       	pop	r13
 3fa:	cf 90       	pop	r12
 3fc:	bf 90       	pop	r11
 3fe:	af 90       	pop	r10
 400:	9f 90       	pop	r9
 402:	8f 90       	pop	r8
 404:	7f 90       	pop	r7
 406:	6f 90       	pop	r6
 408:	5f 90       	pop	r5
 40a:	4f 90       	pop	r4
 40c:	3f 90       	pop	r3
 40e:	2f 90       	pop	r2
 410:	1f 90       	pop	r1
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	08 95       	ret
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret

0000041e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	0f 92       	push	r0
 426:	1f 92       	push	r1
 428:	11 24       	eor	r1, r1
 42a:	2f 92       	push	r2
 42c:	3f 92       	push	r3
 42e:	4f 92       	push	r4
 430:	5f 92       	push	r5
 432:	6f 92       	push	r6
 434:	7f 92       	push	r7
 436:	8f 92       	push	r8
 438:	9f 92       	push	r9
 43a:	af 92       	push	r10
 43c:	bf 92       	push	r11
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
 466:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 46a:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 46e:	0d b6       	in	r0, 0x3d	; 61
 470:	0d 92       	st	X+, r0
 472:	0e b6       	in	r0, 0x3e	; 62
 474:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 476:	86 d3       	rcall	.+1804   	; 0xb84 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 478:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 47c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 480:	cd 91       	ld	r28, X+
 482:	cd bf       	out	0x3d, r28	; 61
 484:	dd 91       	ld	r29, X+
 486:	de bf       	out	0x3e, r29	; 62
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	af 90       	pop	r10
 4b4:	9f 90       	pop	r9
 4b6:	8f 90       	pop	r8
 4b8:	7f 90       	pop	r7
 4ba:	6f 90       	pop	r6
 4bc:	5f 90       	pop	r5
 4be:	4f 90       	pop	r4
 4c0:	3f 90       	pop	r3
 4c2:	2f 90       	pop	r2
 4c4:	1f 90       	pop	r1
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4cc:	08 95       	ret

000004ce <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	0f 92       	push	r0
 4d6:	1f 92       	push	r1
 4d8:	11 24       	eor	r1, r1
 4da:	2f 92       	push	r2
 4dc:	3f 92       	push	r3
 4de:	4f 92       	push	r4
 4e0:	5f 92       	push	r5
 4e2:	6f 92       	push	r6
 4e4:	7f 92       	push	r7
 4e6:	8f 92       	push	r8
 4e8:	9f 92       	push	r9
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	2f 93       	push	r18
 4fc:	3f 93       	push	r19
 4fe:	4f 93       	push	r20
 500:	5f 93       	push	r21
 502:	6f 93       	push	r22
 504:	7f 93       	push	r23
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	af 93       	push	r26
 50c:	bf 93       	push	r27
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
 516:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 51a:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 51e:	0d b6       	in	r0, 0x3d	; 61
 520:	0d 92       	st	X+, r0
 522:	0e b6       	in	r0, 0x3e	; 62
 524:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 526:	ee d1       	rcall	.+988    	; 0x904 <xTaskIncrementTick>
 528:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 52a:	2c d3       	rcall	.+1624   	; 0xb84 <vTaskSwitchContext>
 52c:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 530:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 534:	cd 91       	ld	r28, X+
 536:	cd bf       	out	0x3d, r28	; 61
 538:	dd 91       	ld	r29, X+
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	bf 90       	pop	r11
 566:	af 90       	pop	r10
 568:	9f 90       	pop	r9
 56a:	8f 90       	pop	r8
 56c:	7f 90       	pop	r7
 56e:	6f 90       	pop	r6
 570:	5f 90       	pop	r5
 572:	4f 90       	pop	r4
 574:	3f 90       	pop	r3
 576:	2f 90       	pop	r2
 578:	1f 90       	pop	r1
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	08 95       	ret

00000582 <__vector_13>:

	asm volatile ( "ret" );
 582:	a5 df       	rcall	.-182    	; 0x4ce <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 584:	18 95       	reti

00000586 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 586:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 58a:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 58e:	80 81       	ld	r24, Z
 590:	81 11       	cpse	r24, r1
 592:	07 c0       	rjmp	.+14     	; 0x5a2 <prvResetNextTaskUnblockTime+0x1c>
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	9f ef       	ldi	r25, 0xFF	; 255
 598:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 59c:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5a0:	08 95       	ret
 5a2:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5a6:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5aa:	05 80       	ldd	r0, Z+5	; 0x05
 5ac:	f6 81       	ldd	r31, Z+6	; 0x06
 5ae:	e0 2d       	mov	r30, r0
 5b0:	06 80       	ldd	r0, Z+6	; 0x06
 5b2:	f7 81       	ldd	r31, Z+7	; 0x07
 5b4:	e0 2d       	mov	r30, r0
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	93 81       	ldd	r25, Z+3	; 0x03
 5ba:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5be:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5c2:	08 95       	ret

000005c4 <prvIdleTask>:
 5c4:	0f ef       	ldi	r16, 0xFF	; 255
 5c6:	16 e0       	ldi	r17, 0x06	; 6
 5c8:	0f 2e       	mov	r0, r31
 5ca:	f7 e2       	ldi	r31, 0x27	; 39
 5cc:	ef 2e       	mov	r14, r31
 5ce:	f7 e0       	ldi	r31, 0x07	; 7
 5d0:	ff 2e       	mov	r15, r31
 5d2:	f0 2d       	mov	r31, r0
 5d4:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5d8:	88 23       	and	r24, r24
 5da:	11 f1       	breq	.+68     	; 0x620 <prvIdleTask+0x5c>
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	0f 92       	push	r0
 5e2:	d8 01       	movw	r26, r16
 5e4:	15 96       	adiw	r26, 0x05	; 5
 5e6:	ed 91       	ld	r30, X+
 5e8:	fc 91       	ld	r31, X
 5ea:	16 97       	sbiw	r26, 0x06	; 6
 5ec:	c6 81       	ldd	r28, Z+6	; 0x06
 5ee:	d7 81       	ldd	r29, Z+7	; 0x07
 5f0:	ce 01       	movw	r24, r28
 5f2:	02 96       	adiw	r24, 0x02	; 2
 5f4:	01 de       	rcall	.-1022   	; 0x1f8 <uxListRemove>
 5f6:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 600:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 604:	81 50       	subi	r24, 0x01	; 1
 606:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	8f 89       	ldd	r24, Y+23	; 0x17
 610:	98 8d       	ldd	r25, Y+24	; 0x18
 612:	8d dd       	rcall	.-1254   	; 0x12e <vPortFree>
 614:	ce 01       	movw	r24, r28
 616:	8b dd       	rcall	.-1258   	; 0x12e <vPortFree>
 618:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 61c:	81 11       	cpse	r24, r1
 61e:	de cf       	rjmp	.-68     	; 0x5dc <prvIdleTask+0x18>
 620:	f7 01       	movw	r30, r14
 622:	80 81       	ld	r24, Z
 624:	82 30       	cpi	r24, 0x02	; 2
 626:	b0 f2       	brcs	.-84     	; 0x5d4 <prvIdleTask+0x10>
 628:	fa de       	rcall	.-524    	; 0x41e <vPortYield>
 62a:	d4 cf       	rjmp	.-88     	; 0x5d4 <prvIdleTask+0x10>

0000062c <prvAddCurrentTaskToDelayedList>:
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	ec 01       	movw	r28, r24
 636:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 63a:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 63e:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 642:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 646:	02 96       	adiw	r24, 0x02	; 2
 648:	d7 dd       	rcall	.-1106   	; 0x1f8 <uxListRemove>
 64a:	c0 0f       	add	r28, r16
 64c:	d1 1f       	adc	r29, r17
 64e:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 652:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 656:	d3 83       	std	Z+3, r29	; 0x03
 658:	c2 83       	std	Z+2, r28	; 0x02
 65a:	c0 17       	cp	r28, r16
 65c:	d1 07       	cpc	r29, r17
 65e:	60 f4       	brcc	.+24     	; 0x678 <prvAddCurrentTaskToDelayedList+0x4c>
 660:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 664:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 668:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 66c:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 670:	6e 5f       	subi	r22, 0xFE	; 254
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	90 dd       	rcall	.-1248   	; 0x196 <vListInsert>
 676:	16 c0       	rjmp	.+44     	; 0x6a4 <prvAddCurrentTaskToDelayedList+0x78>
 678:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 67c:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 680:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 684:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 688:	6e 5f       	subi	r22, 0xFE	; 254
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	84 dd       	rcall	.-1272   	; 0x196 <vListInsert>
 68e:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 692:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 696:	c8 17       	cp	r28, r24
 698:	d9 07       	cpc	r29, r25
 69a:	20 f4       	brcc	.+8      	; 0x6a4 <prvAddCurrentTaskToDelayedList+0x78>
 69c:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6a0:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	08 95       	ret

000006ae <xTaskCreate>:
 6ae:	4f 92       	push	r4
 6b0:	5f 92       	push	r5
 6b2:	6f 92       	push	r6
 6b4:	7f 92       	push	r7
 6b6:	8f 92       	push	r8
 6b8:	9f 92       	push	r9
 6ba:	af 92       	push	r10
 6bc:	bf 92       	push	r11
 6be:	cf 92       	push	r12
 6c0:	df 92       	push	r13
 6c2:	ef 92       	push	r14
 6c4:	ff 92       	push	r15
 6c6:	0f 93       	push	r16
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	4c 01       	movw	r8, r24
 6ce:	6b 01       	movw	r12, r22
 6d0:	5a 01       	movw	r10, r20
 6d2:	29 01       	movw	r4, r18
 6d4:	ca 01       	movw	r24, r20
 6d6:	f8 dc       	rcall	.-1552   	; 0xc8 <pvPortMalloc>
 6d8:	3c 01       	movw	r6, r24
 6da:	89 2b       	or	r24, r25
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <xTaskCreate+0x32>
 6de:	d3 c0       	rjmp	.+422    	; 0x886 <xTaskCreate+0x1d8>
 6e0:	86 e2       	ldi	r24, 0x26	; 38
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	f1 dc       	rcall	.-1566   	; 0xc8 <pvPortMalloc>
 6e6:	ec 01       	movw	r28, r24
 6e8:	89 2b       	or	r24, r25
 6ea:	59 f0       	breq	.+22     	; 0x702 <xTaskCreate+0x54>
 6ec:	78 8e       	std	Y+24, r7	; 0x18
 6ee:	6f 8a       	std	Y+23, r6	; 0x17
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	a8 1a       	sub	r10, r24
 6f4:	b1 08       	sbc	r11, r1
 6f6:	a6 0c       	add	r10, r6
 6f8:	b7 1c       	adc	r11, r7
 6fa:	c1 14       	cp	r12, r1
 6fc:	d1 04       	cpc	r13, r1
 6fe:	21 f4       	brne	.+8      	; 0x708 <xTaskCreate+0x5a>
 700:	1f c0       	rjmp	.+62     	; 0x740 <xTaskCreate+0x92>
 702:	c3 01       	movw	r24, r6
 704:	14 dd       	rcall	.-1496   	; 0x12e <vPortFree>
 706:	bf c0       	rjmp	.+382    	; 0x886 <xTaskCreate+0x1d8>
 708:	d6 01       	movw	r26, r12
 70a:	8c 91       	ld	r24, X
 70c:	89 8f       	std	Y+25, r24	; 0x19
 70e:	8c 91       	ld	r24, X
 710:	88 23       	and	r24, r24
 712:	a1 f0       	breq	.+40     	; 0x73c <xTaskCreate+0x8e>
 714:	ae 01       	movw	r20, r28
 716:	46 5e       	subi	r20, 0xE6	; 230
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	f6 01       	movw	r30, r12
 71c:	31 96       	adiw	r30, 0x01	; 1
 71e:	b8 e0       	ldi	r27, 0x08	; 8
 720:	cb 0e       	add	r12, r27
 722:	d1 1c       	adc	r13, r1
 724:	cf 01       	movw	r24, r30
 726:	21 91       	ld	r18, Z+
 728:	da 01       	movw	r26, r20
 72a:	2d 93       	st	X+, r18
 72c:	ad 01       	movw	r20, r26
 72e:	dc 01       	movw	r26, r24
 730:	8c 91       	ld	r24, X
 732:	88 23       	and	r24, r24
 734:	19 f0       	breq	.+6      	; 0x73c <xTaskCreate+0x8e>
 736:	ec 15       	cp	r30, r12
 738:	fd 05       	cpc	r31, r13
 73a:	a1 f7       	brne	.-24     	; 0x724 <xTaskCreate+0x76>
 73c:	18 a2       	std	Y+32, r1	; 0x20
 73e:	01 c0       	rjmp	.+2      	; 0x742 <xTaskCreate+0x94>
 740:	19 8e       	std	Y+25, r1	; 0x19
 742:	04 30       	cpi	r16, 0x04	; 4
 744:	08 f0       	brcs	.+2      	; 0x748 <xTaskCreate+0x9a>
 746:	03 e0       	ldi	r16, 0x03	; 3
 748:	0e 8b       	std	Y+22, r16	; 0x16
 74a:	6e 01       	movw	r12, r28
 74c:	b2 e0       	ldi	r27, 0x02	; 2
 74e:	cb 0e       	add	r12, r27
 750:	d1 1c       	adc	r13, r1
 752:	c6 01       	movw	r24, r12
 754:	fb dc       	rcall	.-1546   	; 0x14c <vListInitialiseItem>
 756:	ce 01       	movw	r24, r28
 758:	0c 96       	adiw	r24, 0x0c	; 12
 75a:	f8 dc       	rcall	.-1552   	; 0x14c <vListInitialiseItem>
 75c:	d9 87       	std	Y+9, r29	; 0x09
 75e:	c8 87       	std	Y+8, r28	; 0x08
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	80 1b       	sub	r24, r16
 766:	91 09       	sbc	r25, r1
 768:	9d 87       	std	Y+13, r25	; 0x0d
 76a:	8c 87       	std	Y+12, r24	; 0x0c
 76c:	db 8b       	std	Y+19, r29	; 0x13
 76e:	ca 8b       	std	Y+18, r28	; 0x12
 770:	19 a2       	std	Y+33, r1	; 0x21
 772:	1a a2       	std	Y+34, r1	; 0x22
 774:	1b a2       	std	Y+35, r1	; 0x23
 776:	1c a2       	std	Y+36, r1	; 0x24
 778:	1d a2       	std	Y+37, r1	; 0x25
 77a:	a2 01       	movw	r20, r4
 77c:	b4 01       	movw	r22, r8
 77e:	c5 01       	movw	r24, r10
 780:	a8 dd       	rcall	.-1200   	; 0x2d2 <pxPortInitialiseStack>
 782:	99 83       	std	Y+1, r25	; 0x01
 784:	88 83       	st	Y, r24
 786:	e1 14       	cp	r14, r1
 788:	f1 04       	cpc	r15, r1
 78a:	19 f0       	breq	.+6      	; 0x792 <xTaskCreate+0xe4>
 78c:	f7 01       	movw	r30, r14
 78e:	d1 83       	std	Z+1, r29	; 0x01
 790:	c0 83       	st	Z, r28
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	f8 94       	cli
 796:	0f 92       	push	r0
 798:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 79c:	8f 5f       	subi	r24, 0xFF	; 255
 79e:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 7a2:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 7a6:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 7aa:	89 2b       	or	r24, r25
 7ac:	69 f5       	brne	.+90     	; 0x808 <xTaskCreate+0x15a>
 7ae:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 7b2:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7b6:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	a9 f5       	brne	.+106    	; 0x828 <xTaskCreate+0x17a>
 7be:	87 e2       	ldi	r24, 0x27	; 39
 7c0:	97 e0       	ldi	r25, 0x07	; 7
 7c2:	b6 dc       	rcall	.-1684   	; 0x130 <vListInitialise>
 7c4:	80 e3       	ldi	r24, 0x30	; 48
 7c6:	97 e0       	ldi	r25, 0x07	; 7
 7c8:	b3 dc       	rcall	.-1690   	; 0x130 <vListInitialise>
 7ca:	89 e3       	ldi	r24, 0x39	; 57
 7cc:	97 e0       	ldi	r25, 0x07	; 7
 7ce:	b0 dc       	rcall	.-1696   	; 0x130 <vListInitialise>
 7d0:	82 e4       	ldi	r24, 0x42	; 66
 7d2:	97 e0       	ldi	r25, 0x07	; 7
 7d4:	ad dc       	rcall	.-1702   	; 0x130 <vListInitialise>
 7d6:	8e e1       	ldi	r24, 0x1E	; 30
 7d8:	97 e0       	ldi	r25, 0x07	; 7
 7da:	aa dc       	rcall	.-1708   	; 0x130 <vListInitialise>
 7dc:	85 e1       	ldi	r24, 0x15	; 21
 7de:	97 e0       	ldi	r25, 0x07	; 7
 7e0:	a7 dc       	rcall	.-1714   	; 0x130 <vListInitialise>
 7e2:	88 e0       	ldi	r24, 0x08	; 8
 7e4:	97 e0       	ldi	r25, 0x07	; 7
 7e6:	a4 dc       	rcall	.-1720   	; 0x130 <vListInitialise>
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	96 e0       	ldi	r25, 0x06	; 6
 7ec:	a1 dc       	rcall	.-1726   	; 0x130 <vListInitialise>
 7ee:	8e e1       	ldi	r24, 0x1E	; 30
 7f0:	97 e0       	ldi	r25, 0x07	; 7
 7f2:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 7f6:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 7fa:	85 e1       	ldi	r24, 0x15	; 21
 7fc:	97 e0       	ldi	r25, 0x07	; 7
 7fe:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 802:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 806:	10 c0       	rjmp	.+32     	; 0x828 <xTaskCreate+0x17a>
 808:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 80c:	81 11       	cpse	r24, r1
 80e:	0c c0       	rjmp	.+24     	; 0x828 <xTaskCreate+0x17a>
 810:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 814:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 818:	96 89       	ldd	r25, Z+22	; 0x16
 81a:	8e 89       	ldd	r24, Y+22	; 0x16
 81c:	89 17       	cp	r24, r25
 81e:	20 f0       	brcs	.+8      	; 0x828 <xTaskCreate+0x17a>
 820:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 824:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 828:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 82c:	8f 5f       	subi	r24, 0xFF	; 255
 82e:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 832:	8e 89       	ldd	r24, Y+22	; 0x16
 834:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 838:	98 17       	cp	r25, r24
 83a:	10 f4       	brcc	.+4      	; 0x840 <xTaskCreate+0x192>
 83c:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	9c 01       	movw	r18, r24
 844:	22 0f       	add	r18, r18
 846:	33 1f       	adc	r19, r19
 848:	22 0f       	add	r18, r18
 84a:	33 1f       	adc	r19, r19
 84c:	22 0f       	add	r18, r18
 84e:	33 1f       	adc	r19, r19
 850:	82 0f       	add	r24, r18
 852:	93 1f       	adc	r25, r19
 854:	b6 01       	movw	r22, r12
 856:	89 5d       	subi	r24, 0xD9	; 217
 858:	98 4f       	sbci	r25, 0xF8	; 248
 85a:	7c dc       	rcall	.-1800   	; 0x154 <vListInsertEnd>
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 864:	88 23       	and	r24, r24
 866:	59 f0       	breq	.+22     	; 0x87e <xTaskCreate+0x1d0>
 868:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 86c:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 870:	96 89       	ldd	r25, Z+22	; 0x16
 872:	8e 89       	ldd	r24, Y+22	; 0x16
 874:	98 17       	cp	r25, r24
 876:	28 f4       	brcc	.+10     	; 0x882 <xTaskCreate+0x1d4>
 878:	d2 dd       	rcall	.-1116   	; 0x41e <vPortYield>
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	05 c0       	rjmp	.+10     	; 0x888 <xTaskCreate+0x1da>
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	03 c0       	rjmp	.+6      	; 0x888 <xTaskCreate+0x1da>
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	01 c0       	rjmp	.+2      	; 0x888 <xTaskCreate+0x1da>
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	0f 91       	pop	r16
 88e:	ff 90       	pop	r15
 890:	ef 90       	pop	r14
 892:	df 90       	pop	r13
 894:	cf 90       	pop	r12
 896:	bf 90       	pop	r11
 898:	af 90       	pop	r10
 89a:	9f 90       	pop	r9
 89c:	8f 90       	pop	r8
 89e:	7f 90       	pop	r7
 8a0:	6f 90       	pop	r6
 8a2:	5f 90       	pop	r5
 8a4:	4f 90       	pop	r4
 8a6:	08 95       	ret

000008a8 <vTaskStartScheduler>:
 8a8:	ef 92       	push	r14
 8aa:	ff 92       	push	r15
 8ac:	0f 93       	push	r16
 8ae:	0f 2e       	mov	r0, r31
 8b0:	f1 ef       	ldi	r31, 0xF1	; 241
 8b2:	ef 2e       	mov	r14, r31
 8b4:	f6 e0       	ldi	r31, 0x06	; 6
 8b6:	ff 2e       	mov	r15, r31
 8b8:	f0 2d       	mov	r31, r0
 8ba:	00 e0       	ldi	r16, 0x00	; 0
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	45 e5       	ldi	r20, 0x55	; 85
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	6b e0       	ldi	r22, 0x0B	; 11
 8c6:	71 e0       	ldi	r23, 0x01	; 1
 8c8:	82 ee       	ldi	r24, 0xE2	; 226
 8ca:	92 e0       	ldi	r25, 0x02	; 2
 8cc:	f0 de       	rcall	.-544    	; 0x6ae <xTaskCreate>
 8ce:	81 30       	cpi	r24, 0x01	; 1
 8d0:	79 f4       	brne	.+30     	; 0x8f0 <vTaskStartScheduler+0x48>
 8d2:	f8 94       	cli
 8d4:	8f ef       	ldi	r24, 0xFF	; 255
 8d6:	9f ef       	ldi	r25, 0xFF	; 255
 8d8:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 8dc:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 8e6:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 8ea:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 8ee:	5d dd       	rcall	.-1350   	; 0x3aa <xPortStartScheduler>
 8f0:	0f 91       	pop	r16
 8f2:	ff 90       	pop	r15
 8f4:	ef 90       	pop	r14
 8f6:	08 95       	ret

000008f8 <vTaskSuspendAll>:
 8f8:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 8fc:	8f 5f       	subi	r24, 0xFF	; 255
 8fe:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 902:	08 95       	ret

00000904 <xTaskIncrementTick>:
 904:	cf 92       	push	r12
 906:	df 92       	push	r13
 908:	ef 92       	push	r14
 90a:	ff 92       	push	r15
 90c:	0f 93       	push	r16
 90e:	1f 93       	push	r17
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 918:	81 11       	cpse	r24, r1
 91a:	95 c0       	rjmp	.+298    	; 0xa46 <xTaskIncrementTick+0x142>
 91c:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 920:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	e8 1a       	sub	r14, r24
 928:	f8 0a       	sbc	r15, r24
 92a:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 92e:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 932:	e1 14       	cp	r14, r1
 934:	f1 04       	cpc	r15, r1
 936:	b1 f4       	brne	.+44     	; 0x964 <xTaskIncrementTick+0x60>
 938:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 93c:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 940:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 944:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 948:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 94c:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 950:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 954:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 958:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 95c:	8f 5f       	subi	r24, 0xFF	; 255
 95e:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 962:	11 de       	rcall	.-990    	; 0x586 <prvResetNextTaskUnblockTime>
 964:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 968:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 96c:	e8 16       	cp	r14, r24
 96e:	f9 06       	cpc	r15, r25
 970:	10 f4       	brcc	.+4      	; 0x976 <xTaskIncrementTick+0x72>
 972:	d1 2c       	mov	r13, r1
 974:	50 c0       	rjmp	.+160    	; 0xa16 <xTaskIncrementTick+0x112>
 976:	d1 2c       	mov	r13, r1
 978:	cc 24       	eor	r12, r12
 97a:	c3 94       	inc	r12
 97c:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 980:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 984:	80 81       	ld	r24, Z
 986:	81 11       	cpse	r24, r1
 988:	07 c0       	rjmp	.+14     	; 0x998 <xTaskIncrementTick+0x94>
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 992:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 996:	3f c0       	rjmp	.+126    	; 0xa16 <xTaskIncrementTick+0x112>
 998:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 99c:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9a0:	05 80       	ldd	r0, Z+5	; 0x05
 9a2:	f6 81       	ldd	r31, Z+6	; 0x06
 9a4:	e0 2d       	mov	r30, r0
 9a6:	c6 81       	ldd	r28, Z+6	; 0x06
 9a8:	d7 81       	ldd	r29, Z+7	; 0x07
 9aa:	8a 81       	ldd	r24, Y+2	; 0x02
 9ac:	9b 81       	ldd	r25, Y+3	; 0x03
 9ae:	e8 16       	cp	r14, r24
 9b0:	f9 06       	cpc	r15, r25
 9b2:	28 f4       	brcc	.+10     	; 0x9be <xTaskIncrementTick+0xba>
 9b4:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9b8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9bc:	2c c0       	rjmp	.+88     	; 0xa16 <xTaskIncrementTick+0x112>
 9be:	8e 01       	movw	r16, r28
 9c0:	0e 5f       	subi	r16, 0xFE	; 254
 9c2:	1f 4f       	sbci	r17, 0xFF	; 255
 9c4:	c8 01       	movw	r24, r16
 9c6:	18 dc       	rcall	.-2000   	; 0x1f8 <uxListRemove>
 9c8:	8c 89       	ldd	r24, Y+20	; 0x14
 9ca:	9d 89       	ldd	r25, Y+21	; 0x15
 9cc:	89 2b       	or	r24, r25
 9ce:	19 f0       	breq	.+6      	; 0x9d6 <xTaskIncrementTick+0xd2>
 9d0:	ce 01       	movw	r24, r28
 9d2:	0c 96       	adiw	r24, 0x0c	; 12
 9d4:	11 dc       	rcall	.-2014   	; 0x1f8 <uxListRemove>
 9d6:	8e 89       	ldd	r24, Y+22	; 0x16
 9d8:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 9dc:	98 17       	cp	r25, r24
 9de:	10 f4       	brcc	.+4      	; 0x9e4 <xTaskIncrementTick+0xe0>
 9e0:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	9c 01       	movw	r18, r24
 9e8:	22 0f       	add	r18, r18
 9ea:	33 1f       	adc	r19, r19
 9ec:	22 0f       	add	r18, r18
 9ee:	33 1f       	adc	r19, r19
 9f0:	22 0f       	add	r18, r18
 9f2:	33 1f       	adc	r19, r19
 9f4:	82 0f       	add	r24, r18
 9f6:	93 1f       	adc	r25, r19
 9f8:	b8 01       	movw	r22, r16
 9fa:	89 5d       	subi	r24, 0xD9	; 217
 9fc:	98 4f       	sbci	r25, 0xF8	; 248
 9fe:	aa db       	rcall	.-2220   	; 0x154 <vListInsertEnd>
 a00:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a04:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a08:	9e 89       	ldd	r25, Y+22	; 0x16
 a0a:	86 89       	ldd	r24, Z+22	; 0x16
 a0c:	98 17       	cp	r25, r24
 a0e:	08 f4       	brcc	.+2      	; 0xa12 <xTaskIncrementTick+0x10e>
 a10:	b5 cf       	rjmp	.-150    	; 0x97c <xTaskIncrementTick+0x78>
 a12:	dc 2c       	mov	r13, r12
 a14:	b3 cf       	rjmp	.-154    	; 0x97c <xTaskIncrementTick+0x78>
 a16:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a1a:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a1e:	86 89       	ldd	r24, Z+22	; 0x16
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	fc 01       	movw	r30, r24
 a24:	ee 0f       	add	r30, r30
 a26:	ff 1f       	adc	r31, r31
 a28:	ee 0f       	add	r30, r30
 a2a:	ff 1f       	adc	r31, r31
 a2c:	ee 0f       	add	r30, r30
 a2e:	ff 1f       	adc	r31, r31
 a30:	8e 0f       	add	r24, r30
 a32:	9f 1f       	adc	r25, r31
 a34:	fc 01       	movw	r30, r24
 a36:	e9 5d       	subi	r30, 0xD9	; 217
 a38:	f8 4f       	sbci	r31, 0xF8	; 248
 a3a:	80 81       	ld	r24, Z
 a3c:	82 30       	cpi	r24, 0x02	; 2
 a3e:	48 f0       	brcs	.+18     	; 0xa52 <xTaskIncrementTick+0x14e>
 a40:	dd 24       	eor	r13, r13
 a42:	d3 94       	inc	r13
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <xTaskIncrementTick+0x14e>
 a46:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 a4a:	8f 5f       	subi	r24, 0xFF	; 255
 a4c:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 a50:	d1 2c       	mov	r13, r1
 a52:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 a56:	88 23       	and	r24, r24
 a58:	11 f0       	breq	.+4      	; 0xa5e <xTaskIncrementTick+0x15a>
 a5a:	dd 24       	eor	r13, r13
 a5c:	d3 94       	inc	r13
 a5e:	8d 2d       	mov	r24, r13
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	1f 91       	pop	r17
 a66:	0f 91       	pop	r16
 a68:	ff 90       	pop	r15
 a6a:	ef 90       	pop	r14
 a6c:	df 90       	pop	r13
 a6e:	cf 90       	pop	r12
 a70:	08 95       	ret

00000a72 <xTaskResumeAll>:
 a72:	df 92       	push	r13
 a74:	ef 92       	push	r14
 a76:	ff 92       	push	r15
 a78:	0f 93       	push	r16
 a7a:	1f 93       	push	r17
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	0f 92       	push	r0
 a86:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a8a:	81 50       	subi	r24, 0x01	; 1
 a8c:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 a90:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a94:	81 11       	cpse	r24, r1
 a96:	59 c0       	rjmp	.+178    	; 0xb4a <xTaskResumeAll+0xd8>
 a98:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 a9c:	81 11       	cpse	r24, r1
 a9e:	30 c0       	rjmp	.+96     	; 0xb00 <xTaskResumeAll+0x8e>
 aa0:	57 c0       	rjmp	.+174    	; 0xb50 <xTaskResumeAll+0xde>
 aa2:	d7 01       	movw	r26, r14
 aa4:	15 96       	adiw	r26, 0x05	; 5
 aa6:	ed 91       	ld	r30, X+
 aa8:	fc 91       	ld	r31, X
 aaa:	16 97       	sbiw	r26, 0x06	; 6
 aac:	c6 81       	ldd	r28, Z+6	; 0x06
 aae:	d7 81       	ldd	r29, Z+7	; 0x07
 ab0:	ce 01       	movw	r24, r28
 ab2:	0c 96       	adiw	r24, 0x0c	; 12
 ab4:	a1 db       	rcall	.-2238   	; 0x1f8 <uxListRemove>
 ab6:	8e 01       	movw	r16, r28
 ab8:	0e 5f       	subi	r16, 0xFE	; 254
 aba:	1f 4f       	sbci	r17, 0xFF	; 255
 abc:	c8 01       	movw	r24, r16
 abe:	9c db       	rcall	.-2248   	; 0x1f8 <uxListRemove>
 ac0:	8e 89       	ldd	r24, Y+22	; 0x16
 ac2:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ac6:	98 17       	cp	r25, r24
 ac8:	10 f4       	brcc	.+4      	; 0xace <xTaskResumeAll+0x5c>
 aca:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	9c 01       	movw	r18, r24
 ad2:	22 0f       	add	r18, r18
 ad4:	33 1f       	adc	r19, r19
 ad6:	22 0f       	add	r18, r18
 ad8:	33 1f       	adc	r19, r19
 ada:	22 0f       	add	r18, r18
 adc:	33 1f       	adc	r19, r19
 ade:	82 0f       	add	r24, r18
 ae0:	93 1f       	adc	r25, r19
 ae2:	b8 01       	movw	r22, r16
 ae4:	89 5d       	subi	r24, 0xD9	; 217
 ae6:	98 4f       	sbci	r25, 0xF8	; 248
 ae8:	35 db       	rcall	.-2454   	; 0x154 <vListInsertEnd>
 aea:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 aee:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 af2:	9e 89       	ldd	r25, Y+22	; 0x16
 af4:	86 89       	ldd	r24, Z+22	; 0x16
 af6:	98 17       	cp	r25, r24
 af8:	68 f0       	brcs	.+26     	; 0xb14 <xTaskResumeAll+0xa2>
 afa:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 afe:	0a c0       	rjmp	.+20     	; 0xb14 <xTaskResumeAll+0xa2>
 b00:	c0 e0       	ldi	r28, 0x00	; 0
 b02:	d0 e0       	ldi	r29, 0x00	; 0
 b04:	0f 2e       	mov	r0, r31
 b06:	f8 e0       	ldi	r31, 0x08	; 8
 b08:	ef 2e       	mov	r14, r31
 b0a:	f7 e0       	ldi	r31, 0x07	; 7
 b0c:	ff 2e       	mov	r15, r31
 b0e:	f0 2d       	mov	r31, r0
 b10:	dd 24       	eor	r13, r13
 b12:	d3 94       	inc	r13
 b14:	f7 01       	movw	r30, r14
 b16:	80 81       	ld	r24, Z
 b18:	81 11       	cpse	r24, r1
 b1a:	c3 cf       	rjmp	.-122    	; 0xaa2 <xTaskResumeAll+0x30>
 b1c:	cd 2b       	or	r28, r29
 b1e:	09 f0       	breq	.+2      	; 0xb22 <xTaskResumeAll+0xb0>
 b20:	32 dd       	rcall	.-1436   	; 0x586 <prvResetNextTaskUnblockTime>
 b22:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b26:	cc 23       	and	r28, r28
 b28:	49 f0       	breq	.+18     	; 0xb3c <xTaskResumeAll+0xca>
 b2a:	d1 e0       	ldi	r29, 0x01	; 1
 b2c:	eb de       	rcall	.-554    	; 0x904 <xTaskIncrementTick>
 b2e:	81 11       	cpse	r24, r1
 b30:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 b34:	c1 50       	subi	r28, 0x01	; 1
 b36:	d1 f7       	brne	.-12     	; 0xb2c <xTaskResumeAll+0xba>
 b38:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 b3c:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b40:	88 23       	and	r24, r24
 b42:	29 f0       	breq	.+10     	; 0xb4e <xTaskResumeAll+0xdc>
 b44:	6c dc       	rcall	.-1832   	; 0x41e <vPortYield>
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	03 c0       	rjmp	.+6      	; 0xb50 <xTaskResumeAll+0xde>
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	01 c0       	rjmp	.+2      	; 0xb50 <xTaskResumeAll+0xde>
 b4e:	80 e0       	ldi	r24, 0x00	; 0
 b50:	0f 90       	pop	r0
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	1f 91       	pop	r17
 b5a:	0f 91       	pop	r16
 b5c:	ff 90       	pop	r15
 b5e:	ef 90       	pop	r14
 b60:	df 90       	pop	r13
 b62:	08 95       	ret

00000b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b64:	cf 93       	push	r28
 b66:	df 93       	push	r29
 b68:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b6a:	89 2b       	or	r24, r25
 b6c:	39 f0       	breq	.+14     	; 0xb7c <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 b6e:	c4 de       	rcall	.-632    	; 0x8f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 b74:	5b dd       	rcall	.-1354   	; 0x62c <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b76:	7d df       	rcall	.-262    	; 0xa72 <xTaskResumeAll>
 b78:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 b7a:	01 c0       	rjmp	.+2      	; 0xb7e <vTaskDelay+0x1a>
 b7c:	50 dc       	rcall	.-1888   	; 0x41e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 b7e:	df 91       	pop	r29
 b80:	cf 91       	pop	r28
 b82:	08 95       	ret

00000b84 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 b84:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 b88:	88 23       	and	r24, r24
 b8a:	21 f0       	breq	.+8      	; 0xb94 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 b92:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 b94:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 b98:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 b9c:	82 2f       	mov	r24, r18
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	fc 01       	movw	r30, r24
 ba2:	ee 0f       	add	r30, r30
 ba4:	ff 1f       	adc	r31, r31
 ba6:	ee 0f       	add	r30, r30
 ba8:	ff 1f       	adc	r31, r31
 baa:	ee 0f       	add	r30, r30
 bac:	ff 1f       	adc	r31, r31
 bae:	e8 0f       	add	r30, r24
 bb0:	f9 1f       	adc	r31, r25
 bb2:	e9 5d       	subi	r30, 0xD9	; 217
 bb4:	f8 4f       	sbci	r31, 0xF8	; 248
 bb6:	30 81       	ld	r19, Z
 bb8:	31 11       	cpse	r19, r1
 bba:	11 c0       	rjmp	.+34     	; 0xbde <vTaskSwitchContext+0x5a>
 bbc:	21 50       	subi	r18, 0x01	; 1
 bbe:	82 2f       	mov	r24, r18
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	fc 01       	movw	r30, r24
 bc4:	ee 0f       	add	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	ee 0f       	add	r30, r30
 bca:	ff 1f       	adc	r31, r31
 bcc:	ee 0f       	add	r30, r30
 bce:	ff 1f       	adc	r31, r31
 bd0:	e8 0f       	add	r30, r24
 bd2:	f9 1f       	adc	r31, r25
 bd4:	e9 5d       	subi	r30, 0xD9	; 217
 bd6:	f8 4f       	sbci	r31, 0xF8	; 248
 bd8:	30 81       	ld	r19, Z
 bda:	33 23       	and	r19, r19
 bdc:	79 f3       	breq	.-34     	; 0xbbc <vTaskSwitchContext+0x38>
 bde:	ac 01       	movw	r20, r24
 be0:	44 0f       	add	r20, r20
 be2:	55 1f       	adc	r21, r21
 be4:	44 0f       	add	r20, r20
 be6:	55 1f       	adc	r21, r21
 be8:	44 0f       	add	r20, r20
 bea:	55 1f       	adc	r21, r21
 bec:	48 0f       	add	r20, r24
 bee:	59 1f       	adc	r21, r25
 bf0:	da 01       	movw	r26, r20
 bf2:	a9 5d       	subi	r26, 0xD9	; 217
 bf4:	b8 4f       	sbci	r27, 0xF8	; 248
 bf6:	11 96       	adiw	r26, 0x01	; 1
 bf8:	ed 91       	ld	r30, X+
 bfa:	fc 91       	ld	r31, X
 bfc:	12 97       	sbiw	r26, 0x02	; 2
 bfe:	02 80       	ldd	r0, Z+2	; 0x02
 c00:	f3 81       	ldd	r31, Z+3	; 0x03
 c02:	e0 2d       	mov	r30, r0
 c04:	12 96       	adiw	r26, 0x02	; 2
 c06:	fc 93       	st	X, r31
 c08:	ee 93       	st	-X, r30
 c0a:	11 97       	sbiw	r26, 0x01	; 1
 c0c:	46 5d       	subi	r20, 0xD6	; 214
 c0e:	58 4f       	sbci	r21, 0xF8	; 248
 c10:	e4 17       	cp	r30, r20
 c12:	f5 07       	cpc	r31, r21
 c14:	29 f4       	brne	.+10     	; 0xc20 <vTaskSwitchContext+0x9c>
 c16:	42 81       	ldd	r20, Z+2	; 0x02
 c18:	53 81       	ldd	r21, Z+3	; 0x03
 c1a:	fd 01       	movw	r30, r26
 c1c:	52 83       	std	Z+2, r21	; 0x02
 c1e:	41 83       	std	Z+1, r20	; 0x01
 c20:	fc 01       	movw	r30, r24
 c22:	ee 0f       	add	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	8e 0f       	add	r24, r30
 c30:	9f 1f       	adc	r25, r31
 c32:	fc 01       	movw	r30, r24
 c34:	e9 5d       	subi	r30, 0xD9	; 217
 c36:	f8 4f       	sbci	r31, 0xF8	; 248
 c38:	01 80       	ldd	r0, Z+1	; 0x01
 c3a:	f2 81       	ldd	r31, Z+2	; 0x02
 c3c:	e0 2d       	mov	r30, r0
 c3e:	86 81       	ldd	r24, Z+6	; 0x06
 c40:	97 81       	ldd	r25, Z+7	; 0x07
 c42:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 c46:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 c4a:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 c4e:	08 95       	ret

00000c50 <_exit>:
 c50:	f8 94       	cli

00000c52 <__stop_program>:
 c52:	ff cf       	rjmp	.-2      	; 0xc52 <__stop_program>
